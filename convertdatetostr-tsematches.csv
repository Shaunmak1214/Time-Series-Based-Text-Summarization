,POSTID,POSTLINK,POSTTITLE,POSTBODY,POSTDATE,POSTVOTECOUNTS,COMMENTID,COMMENTSCORE,COMMENTUSERNAME,COMMENTTEXT,COMMENTDATETIME,ANSWERID,ANSWERTEXT,ANSWERBODY,ANSWERDATETIME,ANSWERVOTECOUNTS,ANSWERCMTID,ANSWERCMTTEXT,ANSWERCMTBODY,ANSWERCMTDATETIME,ANSWERCMTVOTECOUNTS,TYPE,postId,title,partial_ratio,token_sort_ratio,token_set_ratio
0,26100218,https://stackoverflow.com/questions/26100218/reverse-string-in-javascript,Reverse String in JavaScript,"
                
<p>I wrote a JS constructor which reverse a string variable:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">ReverseString</span>(<span class=""hljs-params"">string</span>) {
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span> = string;
    <span class=""hljs-keyword"">var</span> size = <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>.<span class=""hljs-property"">length</span>;
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">reverse</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {
        <span class=""hljs-keyword"">for</span>(size; size &gt;= <span class=""hljs-number"">0</span>; --size) {
            <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>[size]);
        }
    }
}
</code></pre>

<p>When I invoke a reverse method on a new string object(<code>""asd""</code>) it produces the following output:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-literal"">undefined</span> 
    d 
    s 
    a
</code></pre>

<p>Where this <code>undefined</code> came from? Could you help me eliminate this ? </p>
    ","('2014-09-29 12:41:59Z',)","('2',)",,,,,,,,,,,,,,,,post,26100218,Reverse String in JavaScript,68,43,83
1,26100218,https://stackoverflow.com/questions/26100218/reverse-string-in-javascript,Reverse String in JavaScript,"
                
<p>I wrote a JS constructor which reverse a string variable:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">ReverseString</span>(<span class=""hljs-params"">string</span>) {
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span> = string;
    <span class=""hljs-keyword"">var</span> size = <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>.<span class=""hljs-property"">length</span>;
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">reverse</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {
        <span class=""hljs-keyword"">for</span>(size; size &gt;= <span class=""hljs-number"">0</span>; --size) {
            <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>[size]);
        }
    }
}
</code></pre>

<p>When I invoke a reverse method on a new string object(<code>""asd""</code>) it produces the following output:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-literal"">undefined</span> 
    d 
    s 
    a
</code></pre>

<p>Where this <code>undefined</code> came from? Could you help me eliminate this ? </p>
    ","('2014-09-29 12:41:59Z',)","('2',)",comment-40900823,4.0,Frédéric Hamidi,"The range of characters indexes in a string goes from zero to the string length, <b>minus one</b>.","2014-09-29 12:43:17Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,26100218,Reverse String in JavaScript,68,43,83
2,26100218,https://stackoverflow.com/questions/26100218/reverse-string-in-javascript,Reverse String in JavaScript,"
                
<p>I wrote a JS constructor which reverse a string variable:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">ReverseString</span>(<span class=""hljs-params"">string</span>) {
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span> = string;
    <span class=""hljs-keyword"">var</span> size = <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>.<span class=""hljs-property"">length</span>;
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">reverse</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {
        <span class=""hljs-keyword"">for</span>(size; size &gt;= <span class=""hljs-number"">0</span>; --size) {
            <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>[size]);
        }
    }
}
</code></pre>

<p>When I invoke a reverse method on a new string object(<code>""asd""</code>) it produces the following output:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-literal"">undefined</span> 
    d 
    s 
    a
</code></pre>

<p>Where this <code>undefined</code> came from? Could you help me eliminate this ? </p>
    ","('2014-09-29 12:41:59Z',)","('2',)",comment-40900875,4.0,Frédéric Hamidi,"Also, just in case you don't want to reinvent the wheel, <code>str.split("""").reverse().join("""")</code> is an useful idiom.","2014-09-29 12:44:59Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,26100218,Reverse String in JavaScript,68,43,83
3,26100218,https://stackoverflow.com/questions/26100218/reverse-string-in-javascript,Reverse String in JavaScript,"
                
<p>I wrote a JS constructor which reverse a string variable:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">ReverseString</span>(<span class=""hljs-params"">string</span>) {
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span> = string;
    <span class=""hljs-keyword"">var</span> size = <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>.<span class=""hljs-property"">length</span>;
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">reverse</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {
        <span class=""hljs-keyword"">for</span>(size; size &gt;= <span class=""hljs-number"">0</span>; --size) {
            <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>[size]);
        }
    }
}
</code></pre>

<p>When I invoke a reverse method on a new string object(<code>""asd""</code>) it produces the following output:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-literal"">undefined</span> 
    d 
    s 
    a
</code></pre>

<p>Where this <code>undefined</code> came from? Could you help me eliminate this ? </p>
    ","('2014-09-29 12:41:59Z',)","('2',)",comment-40900914,,user663031,"possible duplicate of <a href=""http://stackoverflow.com/questions/958908/how-do-you-reverse-a-string-in-place-in-javascript"">How do you reverse a string in place in JavaScript?</a>","2014-09-29 12:46:12Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,26100218,Reverse String in JavaScript,68,43,83
4,26100218,https://stackoverflow.com/questions/26100218/reverse-string-in-javascript,Reverse String in JavaScript,"
                
<p>I wrote a JS constructor which reverse a string variable:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">ReverseString</span>(<span class=""hljs-params"">string</span>) {
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span> = string;
    <span class=""hljs-keyword"">var</span> size = <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>.<span class=""hljs-property"">length</span>;
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">reverse</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {
        <span class=""hljs-keyword"">for</span>(size; size &gt;= <span class=""hljs-number"">0</span>; --size) {
            <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>[size]);
        }
    }
}
</code></pre>

<p>When I invoke a reverse method on a new string object(<code>""asd""</code>) it produces the following output:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-literal"">undefined</span> 
    d 
    s 
    a
</code></pre>

<p>Where this <code>undefined</code> came from? Could you help me eliminate this ? </p>
    ","('2014-09-29 12:41:59Z',)","('2',)",comment-40900984,,user663031,"Just curious, any particular reason you're inventing an entirely new type of object <code>ReverseString</code> with a single purpose in life which is to reverse the string it holds? You plan to reverse it again and again?","2014-09-29 12:47:51Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,26100218,Reverse String in JavaScript,68,43,83
5,26100218,https://stackoverflow.com/questions/26100218/reverse-string-in-javascript,Reverse String in JavaScript,"
                
<p>I wrote a JS constructor which reverse a string variable:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">ReverseString</span>(<span class=""hljs-params"">string</span>) {
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span> = string;
    <span class=""hljs-keyword"">var</span> size = <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>.<span class=""hljs-property"">length</span>;
    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">reverse</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {
        <span class=""hljs-keyword"">for</span>(size; size &gt;= <span class=""hljs-number"">0</span>; --size) {
            <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">str</span>[size]);
        }
    }
}
</code></pre>

<p>When I invoke a reverse method on a new string object(<code>""asd""</code>) it produces the following output:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-literal"">undefined</span> 
    d 
    s 
    a
</code></pre>

<p>Where this <code>undefined</code> came from? Could you help me eliminate this ? </p>
    ","('2014-09-29 12:41:59Z',)","('2',)",comment-40901194,,user663031,"Let's see, you searched for ""reverse string javascript"" before posting this question and found nothing, I guess. Seems no-one ever had this problem before. Except <a href=""http://stackoverflow.com/questions/1611427/reversing-a-string-in-javascript"" title=""reversing a string in javascript"">stackoverflow.com/questions/1611427/…</a>, <a href=""http://stackoverflow.com/questions/4859208/recursive-string-reversal-function-in-javascript"" title=""recursive string reversal function in javascript"">stackoverflow.com/questions/4859208/…</a> (see duplicate answer below), and off-site resources such as <a href=""http://eddmann.com/posts/ten-ways-to-reverse-a-string-in-javascript/"" rel=""nofollow noreferrer"">eddmann.com/posts/ten-ways-to-reverse-a-string-in-javascript</a>.","2014-09-29 12:53:23Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,26100218,Reverse String in JavaScript,68,43,83
6,17880476,https://stackoverflow.com/questions/17880476/joins-in-javascript,Joins in Javascript,"
                
<p>I have 2 lists of objects:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">people = 
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Tom""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Bob""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Sir Benjamin Rogan-Josh IV""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">2</span>}];

cars=
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ford Fiesta""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""blue""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ferrari""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""red""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Rover 25""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""Sunset Melting Yellow with hints of yellow""</span>}];
</code></pre>

<p>Is there a function (possibly in Angular, JQuery, Underscore, LoDash, or other external library) to do a left join in one line on these? Something like:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">peoplewithcars = <span class=""hljs-title function_"">leftjoin</span>( people, cars, <span class=""hljs-string"">""carid""</span>, <span class=""hljs-string"">""id""</span>);
</code></pre>

<p>I can write my own, but if LoDash has an optimised version I'd like to use that.</p>
    ","('2013-07-26 11:45:41Z',)","('16',)",,,,,,,,,,,,,,,,post,17880476,Joins in Javascript,74,38,81
7,17880476,https://stackoverflow.com/questions/17880476/joins-in-javascript,Joins in Javascript,"
                
<p>I have 2 lists of objects:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">people = 
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Tom""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Bob""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Sir Benjamin Rogan-Josh IV""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">2</span>}];

cars=
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ford Fiesta""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""blue""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ferrari""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""red""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Rover 25""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""Sunset Melting Yellow with hints of yellow""</span>}];
</code></pre>

<p>Is there a function (possibly in Angular, JQuery, Underscore, LoDash, or other external library) to do a left join in one line on these? Something like:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">peoplewithcars = <span class=""hljs-title function_"">leftjoin</span>( people, cars, <span class=""hljs-string"">""carid""</span>, <span class=""hljs-string"">""id""</span>);
</code></pre>

<p>I can write my own, but if LoDash has an optimised version I'd like to use that.</p>
    ","('2013-07-26 11:45:41Z',)","('16',)",,,,,,55642683.0,"This implementation uses the ES6 spread operator. Again, not a library function as asked for.
const leftJoin = (objArr1, objArr2, key1, key2) => objArr1.map(
    anObj1 => ({
        ...objArr2.find(
            anObj2 => anObj1[key1] === anObj2[key2]
        ),
        ...anObj1
    })
);","('\n<p>This implementation uses the ES6 spread operator. Again, not a library function as asked for.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">leftJoin</span> = (<span class=""hljs-params"">objArr1, objArr2, key1, key2</span>) =&gt; objArr1.<span class=""hljs-title function_"">map</span>(\n    <span class=""hljs-function""><span class=""hljs-params"">anObj1</span> =&gt;</span> ({\n        ...objArr2.<span class=""hljs-title function_"">find</span>(\n            <span class=""hljs-function""><span class=""hljs-params"">anObj2</span> =&gt;</span> anObj1[key1] === anObj2[key2]\n        ),\n        ...anObj1\n    })\n);\n</code></pre>\n    ',)","2022-09-06 00:06:31Z, License: CC BY-SA 4.0","('9',)",,,,,,answer,17880476,Joins in Javascript,74,38,81
8,17880476,https://stackoverflow.com/questions/17880476/joins-in-javascript,Joins in Javascript,"
                
<p>I have 2 lists of objects:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">people = 
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Tom""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Bob""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Sir Benjamin Rogan-Josh IV""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">2</span>}];

cars=
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ford Fiesta""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""blue""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ferrari""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""red""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Rover 25""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""Sunset Melting Yellow with hints of yellow""</span>}];
</code></pre>

<p>Is there a function (possibly in Angular, JQuery, Underscore, LoDash, or other external library) to do a left join in one line on these? Something like:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">peoplewithcars = <span class=""hljs-title function_"">leftjoin</span>( people, cars, <span class=""hljs-string"">""carid""</span>, <span class=""hljs-string"">""id""</span>);
</code></pre>

<p>I can write my own, but if LoDash has an optimised version I'd like to use that.</p>
    ","('2013-07-26 11:45:41Z',)","('16',)",,,,,,55642683.0,"This implementation uses the ES6 spread operator. Again, not a library function as asked for.
const leftJoin = (objArr1, objArr2, key1, key2) => objArr1.map(
    anObj1 => ({
        ...objArr2.find(
            anObj2 => anObj1[key1] === anObj2[key2]
        ),
        ...anObj1
    })
);","('\n<p>This implementation uses the ES6 spread operator. Again, not a library function as asked for.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">leftJoin</span> = (<span class=""hljs-params"">objArr1, objArr2, key1, key2</span>) =&gt; objArr1.<span class=""hljs-title function_"">map</span>(\n    <span class=""hljs-function""><span class=""hljs-params"">anObj1</span> =&gt;</span> ({\n        ...objArr2.<span class=""hljs-title function_"">find</span>(\n            <span class=""hljs-function""><span class=""hljs-params"">anObj2</span> =&gt;</span> anObj1[key1] === anObj2[key2]\n        ),\n        ...anObj1\n    })\n);\n</code></pre>\n    ',)","2022-09-06 00:06:31Z, License: CC BY-SA 4.0","('9',)","('129996990',)","Clever solution. But it fails if we try to use ""carid"" as the name of the card id in both tables. And I don't see an easy way to fix this in the code. The solution by @ЕрланЯр-Мухамедов solves this.","('\n                \n                <span class=""comment-copy"">Clever solution. But it fails if we try to use ""carid"" as the name of the card id in both tables. And I don\'t see an easy way to fix this in the code. The solution by @ЕрланЯр-Мухамедов solves this.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1978840/john-pankowicz"" title=""4,053 reputation"" class=""comment-user"">John Pankowicz</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment129996990_55642683"" aria-label=""Link to comment""><span title=""2022-09-06 00:06:31Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Sep 6, 2022 at 0:06</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Sep 6, 2022 at 0:06","('',)",answer_comment,17880476,Joins in Javascript,74,38,81
9,17880476,https://stackoverflow.com/questions/17880476/joins-in-javascript,Joins in Javascript,"
                
<p>I have 2 lists of objects:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">people = 
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Tom""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Bob""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Sir Benjamin Rogan-Josh IV""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">2</span>}];

cars=
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ford Fiesta""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""blue""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ferrari""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""red""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Rover 25""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""Sunset Melting Yellow with hints of yellow""</span>}];
</code></pre>

<p>Is there a function (possibly in Angular, JQuery, Underscore, LoDash, or other external library) to do a left join in one line on these? Something like:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">peoplewithcars = <span class=""hljs-title function_"">leftjoin</span>( people, cars, <span class=""hljs-string"">""carid""</span>, <span class=""hljs-string"">""id""</span>);
</code></pre>

<p>I can write my own, but if LoDash has an optimised version I'd like to use that.</p>
    ","('2013-07-26 11:45:41Z',)","('16',)",,,,,,55642683.0,"This implementation uses the ES6 spread operator. Again, not a library function as asked for.
const leftJoin = (objArr1, objArr2, key1, key2) => objArr1.map(
    anObj1 => ({
        ...objArr2.find(
            anObj2 => anObj1[key1] === anObj2[key2]
        ),
        ...anObj1
    })
);","('\n<p>This implementation uses the ES6 spread operator. Again, not a library function as asked for.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">leftJoin</span> = (<span class=""hljs-params"">objArr1, objArr2, key1, key2</span>) =&gt; objArr1.<span class=""hljs-title function_"">map</span>(\n    <span class=""hljs-function""><span class=""hljs-params"">anObj1</span> =&gt;</span> ({\n        ...objArr2.<span class=""hljs-title function_"">find</span>(\n            <span class=""hljs-function""><span class=""hljs-params"">anObj2</span> =&gt;</span> anObj1[key1] === anObj2[key2]\n        ),\n        ...anObj1\n    })\n);\n</code></pre>\n    ',)","2022-09-06 00:06:31Z, License: CC BY-SA 4.0","('9',)","('130053628',)","@JohnPankowicz Not sure what you mean by ""name of the card id""; could you please provide example data?","('\n                \n                <span class=""comment-copy"">@JohnPankowicz Not sure what you mean by ""name of the card id""; could you please provide example data?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2760203/ashley-wilson"" title=""464 reputation"" class=""comment-user"">Ashley Wilson</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment130053628_55642683"" aria-label=""Link to comment""><span title=""2022-09-08 10:59:51Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Sep 8, 2022 at 10:59</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Sep 8, 2022 at 10:59","('',)",answer_comment,17880476,Joins in Javascript,74,38,81
10,17880476,https://stackoverflow.com/questions/17880476/joins-in-javascript,Joins in Javascript,"
                
<p>I have 2 lists of objects:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">people = 
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Tom""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Bob""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Sir Benjamin Rogan-Josh IV""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">2</span>}];

cars=
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ford Fiesta""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""blue""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ferrari""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""red""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Rover 25""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""Sunset Melting Yellow with hints of yellow""</span>}];
</code></pre>

<p>Is there a function (possibly in Angular, JQuery, Underscore, LoDash, or other external library) to do a left join in one line on these? Something like:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">peoplewithcars = <span class=""hljs-title function_"">leftjoin</span>( people, cars, <span class=""hljs-string"">""carid""</span>, <span class=""hljs-string"">""id""</span>);
</code></pre>

<p>I can write my own, but if LoDash has an optimised version I'd like to use that.</p>
    ","('2013-07-26 11:45:41Z',)","('16',)",,,,,,55642683.0,"This implementation uses the ES6 spread operator. Again, not a library function as asked for.
const leftJoin = (objArr1, objArr2, key1, key2) => objArr1.map(
    anObj1 => ({
        ...objArr2.find(
            anObj2 => anObj1[key1] === anObj2[key2]
        ),
        ...anObj1
    })
);","('\n<p>This implementation uses the ES6 spread operator. Again, not a library function as asked for.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">leftJoin</span> = (<span class=""hljs-params"">objArr1, objArr2, key1, key2</span>) =&gt; objArr1.<span class=""hljs-title function_"">map</span>(\n    <span class=""hljs-function""><span class=""hljs-params"">anObj1</span> =&gt;</span> ({\n        ...objArr2.<span class=""hljs-title function_"">find</span>(\n            <span class=""hljs-function""><span class=""hljs-params"">anObj2</span> =&gt;</span> anObj1[key1] === anObj2[key2]\n        ),\n        ...anObj1\n    })\n);\n</code></pre>\n    ',)","2022-09-06 00:06:31Z, License: CC BY-SA 4.0","('9',)","('130081187',)","It's much clearer when designing data structures to use the same property name in each place for the same property. Therefore, the 1st member of the ""cars"" array would be: [{carid: 1, name: ""Ford Fiesta"" ... But when I change ""id"" to ""carid"" in cars, your leftjoin fails. I'm sure there's a way to fix this, but I couldn't see how. I ended up using ЕрланЯр's solution in my code.","('\n                \n                <span class=""comment-copy"">It\'s much clearer when designing data structures to use the same property name in each place for the same property. Therefore, the 1st member of the ""cars"" array would be: [{carid: 1, name: ""Ford Fiesta"" ... But when I change ""id"" to ""carid"" in cars, your leftjoin fails. I\'m sure there\'s a way to fix this, but I couldn\'t see how. I ended up using ЕрланЯр\'s solution in my code.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1978840/john-pankowicz"" title=""4,053 reputation"" class=""comment-user"">John Pankowicz</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment130081187_55642683"" aria-label=""Link to comment""><span title=""2022-09-09 14:15:19Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Sep 9, 2022 at 14:15</span></a></span>\n            ',)","Sep 9, 2022 at 14:15","('',)",answer_comment,17880476,Joins in Javascript,74,38,81
11,17880476,https://stackoverflow.com/questions/17880476/joins-in-javascript,Joins in Javascript,"
                
<p>I have 2 lists of objects:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">people = 
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Tom""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Bob""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Sir Benjamin Rogan-Josh IV""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">2</span>}];

cars=
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ford Fiesta""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""blue""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ferrari""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""red""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Rover 25""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""Sunset Melting Yellow with hints of yellow""</span>}];
</code></pre>

<p>Is there a function (possibly in Angular, JQuery, Underscore, LoDash, or other external library) to do a left join in one line on these? Something like:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">peoplewithcars = <span class=""hljs-title function_"">leftjoin</span>( people, cars, <span class=""hljs-string"">""carid""</span>, <span class=""hljs-string"">""id""</span>);
</code></pre>

<p>I can write my own, but if LoDash has an optimised version I'd like to use that.</p>
    ","('2013-07-26 11:45:41Z',)","('16',)",,,,,,55642683.0,"This implementation uses the ES6 spread operator. Again, not a library function as asked for.
const leftJoin = (objArr1, objArr2, key1, key2) => objArr1.map(
    anObj1 => ({
        ...objArr2.find(
            anObj2 => anObj1[key1] === anObj2[key2]
        ),
        ...anObj1
    })
);","('\n<p>This implementation uses the ES6 spread operator. Again, not a library function as asked for.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">leftJoin</span> = (<span class=""hljs-params"">objArr1, objArr2, key1, key2</span>) =&gt; objArr1.<span class=""hljs-title function_"">map</span>(\n    <span class=""hljs-function""><span class=""hljs-params"">anObj1</span> =&gt;</span> ({\n        ...objArr2.<span class=""hljs-title function_"">find</span>(\n            <span class=""hljs-function""><span class=""hljs-params"">anObj2</span> =&gt;</span> anObj1[key1] === anObj2[key2]\n        ),\n        ...anObj1\n    })\n);\n</code></pre>\n    ',)","2022-09-06 00:06:31Z, License: CC BY-SA 4.0","('9',)","('130283126',)","@JohnPankowicz As with any left join, the first table takes precedence, so if the same key appears in both objects, the keys on the right object get overwritten. If you have matching sets, you can reverse the order of the tables to get the combined set. See codepen: codepen.io/lifenstein/pen/VwxWjxL?editors=0012 (The other solution isn't generic though)","('\n                \n                <span class=""comment-copy"">@JohnPankowicz As with any left join, the first table takes precedence, so if the same key appears in both objects, the keys on the right object get overwritten. If you have matching sets, you can reverse the order of the tables to get the combined set. See codepen: <a href=""https://codepen.io/lifenstein/pen/VwxWjxL?editors=0012"" rel=""nofollow noreferrer"">codepen.io/lifenstein/pen/VwxWjxL?editors=0012</a> (The other solution isn\'t generic though)</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2760203/ashley-wilson"" title=""464 reputation"" class=""comment-user"">Ashley Wilson</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment130283126_55642683"" aria-label=""Link to comment""><span title=""2022-09-20 04:29:12Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Sep 20, 2022 at 4:29</span></a></span>\n                        <span title=""this comment was edited 3 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Sep 20, 2022 at 4:29","('',)",answer_comment,17880476,Joins in Javascript,74,38,81
12,17880476,https://stackoverflow.com/questions/17880476/joins-in-javascript,Joins in Javascript,"
                
<p>I have 2 lists of objects:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">people = 
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Tom""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Bob""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">1</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Sir Benjamin Rogan-Josh IV""</span>, <span class=""hljs-attr"">carid</span>: <span class=""hljs-number"">2</span>}];

cars=
[{<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">1</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ford Fiesta""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""blue""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">2</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Ferrari""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""red""</span>},
 {<span class=""hljs-attr"">id</span>: <span class=""hljs-number"">3</span>, <span class=""hljs-attr"">name</span>: <span class=""hljs-string"">""Rover 25""</span>, <span class=""hljs-attr"">color</span>: <span class=""hljs-string"">""Sunset Melting Yellow with hints of yellow""</span>}];
</code></pre>

<p>Is there a function (possibly in Angular, JQuery, Underscore, LoDash, or other external library) to do a left join in one line on these? Something like:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">peoplewithcars = <span class=""hljs-title function_"">leftjoin</span>( people, cars, <span class=""hljs-string"">""carid""</span>, <span class=""hljs-string"">""id""</span>);
</code></pre>

<p>I can write my own, but if LoDash has an optimised version I'd like to use that.</p>
    ","('2013-07-26 11:45:41Z',)","('16',)",,,,,,55642683.0,"This implementation uses the ES6 spread operator. Again, not a library function as asked for.
const leftJoin = (objArr1, objArr2, key1, key2) => objArr1.map(
    anObj1 => ({
        ...objArr2.find(
            anObj2 => anObj1[key1] === anObj2[key2]
        ),
        ...anObj1
    })
);","('\n<p>This implementation uses the ES6 spread operator. Again, not a library function as asked for.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">leftJoin</span> = (<span class=""hljs-params"">objArr1, objArr2, key1, key2</span>) =&gt; objArr1.<span class=""hljs-title function_"">map</span>(\n    <span class=""hljs-function""><span class=""hljs-params"">anObj1</span> =&gt;</span> ({\n        ...objArr2.<span class=""hljs-title function_"">find</span>(\n            <span class=""hljs-function""><span class=""hljs-params"">anObj2</span> =&gt;</span> anObj1[key1] === anObj2[key2]\n        ),\n        ...anObj1\n    })\n);\n</code></pre>\n    ',)","2022-09-06 00:06:31Z, License: CC BY-SA 4.0","('9',)","('130283212',)",You could add the object (table) names as prefixes for the keys to force them to be unique.,"('\n                \n                <span class=""comment-copy"">You could add the object (table) names as prefixes for the keys to force them to be unique.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2760203/ashley-wilson"" title=""464 reputation"" class=""comment-user"">Ashley Wilson</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment130283212_55642683"" aria-label=""Link to comment""><span title=""2022-09-20 04:39:24Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Sep 20, 2022 at 4:39</span></a></span>\n            ',)","Sep 20, 2022 at 4:39","('',)",answer_comment,17880476,Joins in Javascript,74,38,81
13,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,,,,,,,,,,,post,5717093,Check if a JavaScript string is a URL,47,58,85
14,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",comment-6536486,34.0,nfechner,"If it is missing the <code>http</code>, it is per default no url.","2011-04-19 13:29:10Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,5717093,Check if a JavaScript string is a URL,47,58,85
15,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",comment-6536517,2.0,jcolebrand,@nfechner that is to say that if it doesn't specify a protocol and use the colon character (preferably with two forward slashes next) then it is not a URL?,"2011-04-19 13:30:56Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,5717093,Check if a JavaScript string is a URL,47,58,85
16,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",comment-6536607,7.0,nfechner,"As you can read in the <a href=""http://www.ietf.org/rfc/rfc1738.txt"" rel=""nofollow noreferrer"">URL RFC</a>, the only part actually neccessary to make a String a valid URL is the colon. Valid URLs look like: <code>&lt;scheme&gt;:&lt;scheme-specific-part&gt;</code>","2011-04-19 13:34:59Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,5717093,Check if a JavaScript string is a URL,47,58,85
17,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",comment-24219896,1.0,nguyên,"see <a href=""http://stackoverflow.com/a/3975573/572180"">stackoverflow.com/a/3975573/572180</a>","2013-05-29 01:30:08Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,5717093,Check if a JavaScript string is a URL,47,58,85
18,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",comment-86830083,13.0,Roy Tinker,"How you test whether something is a URL is <i>highly</i> context-dependent and too vague without further qualification. Does it matter to you whether it conforms to the URL RFC spec, works when <a href=""https://stackoverflow.com/a/4217323/163227"">making an OS system call to open the URL</a>, parses as an <code>href</code> in an anchor element, works when calling <code>window.open(url)</code>, points to something that really exists, works in the browser location bar, or a combination of the above? You'll get very different answers depending on which of these you care about.","2018-04-18 18:59:10Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,5717093,Check if a JavaScript string is a URL,47,58,85
19,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,43467144.0,"If you want to check whether a string is valid HTTP URL, you can use URL constructor (it will throw on malformed string):
function isValidHttpUrl(string) {
  let url;
  try {
    url = new URL(string);
  } catch (_) {
    return false;
  }
  return url.protocol === ""http:"" || url.protocol === ""https:"";
}
console.log(""http://example.com: ""+isValidHttpUrl(""https://example.com""));
console.log(""example.com: ""+isValidHttpUrl(""example.com""));
Run code snippetExpand snippet
Note: Per RFC 3886, URL must begin with a scheme (not limited to http/https), e. g.:
www.example.com is not valid URL (missing scheme)
javascript:void(0) is valid URL, although not an HTTP one
http://.. is valid URL with the host being .. (whether it resolves depends on your DNS)
https://example..com is valid URL, same as above","('\n<p>If you want to check whether a string <strong>is valid HTTP URL</strong>, you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer""><code>URL</code> constructor</a> (it will throw on malformed string):</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">let</span> url;\n  <span class=""hljs-keyword"">try</span> {\n    url = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">URL</span>(string);\n  } <span class=""hljs-keyword"">catch</span> (_) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  }\n  <span class=""hljs-keyword"">return</span> url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""http:""</span> || url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""https:""</span>;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""http://example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""https://example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""example.com""</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p><strong>Note:</strong> Per <a href=""https://www.rfc-editor.org/rfc/rfc3986"" rel=""noreferrer"">RFC 3886</a>, URL must begin with a scheme (not limited to http/https), e. g.:</p>\n<ul>\n<li><code>www.example.com</code> is not valid URL (missing scheme)</li>\n<li><code>javascript:void(0)</code> is valid URL, although not an HTTP one</li>\n<li><code>http://..</code> is valid URL with the host being <code>..</code> (whether it resolves depends on your DNS)</li>\n<li><code>https://example..com</code> is valid URL, same as above</li>\n</ul>\n    ',)","2017-04-21 08:26:16Z, License: CC BY-SA 3.0","('587',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
20,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,43467144.0,"If you want to check whether a string is valid HTTP URL, you can use URL constructor (it will throw on malformed string):
function isValidHttpUrl(string) {
  let url;
  try {
    url = new URL(string);
  } catch (_) {
    return false;
  }
  return url.protocol === ""http:"" || url.protocol === ""https:"";
}
console.log(""http://example.com: ""+isValidHttpUrl(""https://example.com""));
console.log(""example.com: ""+isValidHttpUrl(""example.com""));
Run code snippetExpand snippet
Note: Per RFC 3886, URL must begin with a scheme (not limited to http/https), e. g.:
www.example.com is not valid URL (missing scheme)
javascript:void(0) is valid URL, although not an HTTP one
http://.. is valid URL with the host being .. (whether it resolves depends on your DNS)
https://example..com is valid URL, same as above","('\n<p>If you want to check whether a string <strong>is valid HTTP URL</strong>, you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer""><code>URL</code> constructor</a> (it will throw on malformed string):</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">let</span> url;\n  <span class=""hljs-keyword"">try</span> {\n    url = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">URL</span>(string);\n  } <span class=""hljs-keyword"">catch</span> (_) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  }\n  <span class=""hljs-keyword"">return</span> url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""http:""</span> || url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""https:""</span>;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""http://example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""https://example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""example.com""</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p><strong>Note:</strong> Per <a href=""https://www.rfc-editor.org/rfc/rfc3986"" rel=""noreferrer"">RFC 3886</a>, URL must begin with a scheme (not limited to http/https), e. g.:</p>\n<ul>\n<li><code>www.example.com</code> is not valid URL (missing scheme)</li>\n<li><code>javascript:void(0)</code> is valid URL, although not an HTTP one</li>\n<li><code>http://..</code> is valid URL with the host being <code>..</code> (whether it resolves depends on your DNS)</li>\n<li><code>https://example..com</code> is valid URL, same as above</li>\n</ul>\n    ',)","2017-04-21 08:26:16Z, License: CC BY-SA 3.0","('587',)","('74127199',)","@AshD no, it's not; e.g. you can't use as href attribute for <a>. Valid URL must begin with a scheme name, e.g. https://.","('\n                \n                <span class=""comment-copy"">@AshD no, it\'s not; e.g. you can\'t use as <code>href</code> attribute for <code>&lt;a&gt;</code>. Valid URL <a href=""https://tools.ietf.org/html/rfc3986#section-1.1.1"" rel=""nofollow noreferrer"">must begin with a scheme name</a>, e.g. <code>https://</code>.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1092711/pavlo"" title=""42,606 reputation"" class=""comment-user"">Pavlo</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment74127199_43467144"" aria-label=""Link to comment""><span title=""2017-04-21 08:26:16Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 21, 2017 at 8:26</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 21, 2017 at 8:26","('18',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
21,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,43467144.0,"If you want to check whether a string is valid HTTP URL, you can use URL constructor (it will throw on malformed string):
function isValidHttpUrl(string) {
  let url;
  try {
    url = new URL(string);
  } catch (_) {
    return false;
  }
  return url.protocol === ""http:"" || url.protocol === ""https:"";
}
console.log(""http://example.com: ""+isValidHttpUrl(""https://example.com""));
console.log(""example.com: ""+isValidHttpUrl(""example.com""));
Run code snippetExpand snippet
Note: Per RFC 3886, URL must begin with a scheme (not limited to http/https), e. g.:
www.example.com is not valid URL (missing scheme)
javascript:void(0) is valid URL, although not an HTTP one
http://.. is valid URL with the host being .. (whether it resolves depends on your DNS)
https://example..com is valid URL, same as above","('\n<p>If you want to check whether a string <strong>is valid HTTP URL</strong>, you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer""><code>URL</code> constructor</a> (it will throw on malformed string):</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">let</span> url;\n  <span class=""hljs-keyword"">try</span> {\n    url = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">URL</span>(string);\n  } <span class=""hljs-keyword"">catch</span> (_) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  }\n  <span class=""hljs-keyword"">return</span> url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""http:""</span> || url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""https:""</span>;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""http://example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""https://example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""example.com""</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p><strong>Note:</strong> Per <a href=""https://www.rfc-editor.org/rfc/rfc3986"" rel=""noreferrer"">RFC 3886</a>, URL must begin with a scheme (not limited to http/https), e. g.:</p>\n<ul>\n<li><code>www.example.com</code> is not valid URL (missing scheme)</li>\n<li><code>javascript:void(0)</code> is valid URL, although not an HTTP one</li>\n<li><code>http://..</code> is valid URL with the host being <code>..</code> (whether it resolves depends on your DNS)</li>\n<li><code>https://example..com</code> is valid URL, same as above</li>\n</ul>\n    ',)","2017-04-21 08:26:16Z, License: CC BY-SA 3.0","('587',)","('80012469',)",new URL('javascript:alert(23)'),"('\n                \n                <span class=""comment-copy"">new URL(\'javascript:alert(23)\')</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3560988/blade091"" title=""652 reputation"" class=""comment-user"">blade091</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment80012469_43467144"" aria-label=""Link to comment""><span title=""2017-10-02 15:47:51Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Oct 2, 2017 at 15:47</span></a></span>\n            ',)","Oct 2, 2017 at 15:47","('8',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
22,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,43467144.0,"If you want to check whether a string is valid HTTP URL, you can use URL constructor (it will throw on malformed string):
function isValidHttpUrl(string) {
  let url;
  try {
    url = new URL(string);
  } catch (_) {
    return false;
  }
  return url.protocol === ""http:"" || url.protocol === ""https:"";
}
console.log(""http://example.com: ""+isValidHttpUrl(""https://example.com""));
console.log(""example.com: ""+isValidHttpUrl(""example.com""));
Run code snippetExpand snippet
Note: Per RFC 3886, URL must begin with a scheme (not limited to http/https), e. g.:
www.example.com is not valid URL (missing scheme)
javascript:void(0) is valid URL, although not an HTTP one
http://.. is valid URL with the host being .. (whether it resolves depends on your DNS)
https://example..com is valid URL, same as above","('\n<p>If you want to check whether a string <strong>is valid HTTP URL</strong>, you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer""><code>URL</code> constructor</a> (it will throw on malformed string):</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">let</span> url;\n  <span class=""hljs-keyword"">try</span> {\n    url = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">URL</span>(string);\n  } <span class=""hljs-keyword"">catch</span> (_) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  }\n  <span class=""hljs-keyword"">return</span> url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""http:""</span> || url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""https:""</span>;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""http://example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""https://example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""example.com""</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p><strong>Note:</strong> Per <a href=""https://www.rfc-editor.org/rfc/rfc3986"" rel=""noreferrer"">RFC 3886</a>, URL must begin with a scheme (not limited to http/https), e. g.:</p>\n<ul>\n<li><code>www.example.com</code> is not valid URL (missing scheme)</li>\n<li><code>javascript:void(0)</code> is valid URL, although not an HTTP one</li>\n<li><code>http://..</code> is valid URL with the host being <code>..</code> (whether it resolves depends on your DNS)</li>\n<li><code>https://example..com</code> is valid URL, same as above</li>\n</ul>\n    ',)","2017-04-21 08:26:16Z, License: CC BY-SA 3.0","('587',)","('81082644',)","@Pavlo this returns true isValidUrl(""javascript:void(0)"")","('\n                \n                <span class=""comment-copy"">@Pavlo this returns true <code>isValidUrl(""javascript:void(0)"")</code></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2085698/praveena"" title=""6,240 reputation"" class=""comment-user"">Praveena</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment81082644_43467144"" aria-label=""Link to comment""><span title=""2017-11-02 03:55:34Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Nov 2, 2017 at 3:55</span></a></span>\n            ',)","Nov 2, 2017 at 3:55","('10',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
23,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,43467144.0,"If you want to check whether a string is valid HTTP URL, you can use URL constructor (it will throw on malformed string):
function isValidHttpUrl(string) {
  let url;
  try {
    url = new URL(string);
  } catch (_) {
    return false;
  }
  return url.protocol === ""http:"" || url.protocol === ""https:"";
}
console.log(""http://example.com: ""+isValidHttpUrl(""https://example.com""));
console.log(""example.com: ""+isValidHttpUrl(""example.com""));
Run code snippetExpand snippet
Note: Per RFC 3886, URL must begin with a scheme (not limited to http/https), e. g.:
www.example.com is not valid URL (missing scheme)
javascript:void(0) is valid URL, although not an HTTP one
http://.. is valid URL with the host being .. (whether it resolves depends on your DNS)
https://example..com is valid URL, same as above","('\n<p>If you want to check whether a string <strong>is valid HTTP URL</strong>, you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer""><code>URL</code> constructor</a> (it will throw on malformed string):</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">let</span> url;\n  <span class=""hljs-keyword"">try</span> {\n    url = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">URL</span>(string);\n  } <span class=""hljs-keyword"">catch</span> (_) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  }\n  <span class=""hljs-keyword"">return</span> url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""http:""</span> || url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""https:""</span>;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""http://example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""https://example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""example.com""</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p><strong>Note:</strong> Per <a href=""https://www.rfc-editor.org/rfc/rfc3986"" rel=""noreferrer"">RFC 3886</a>, URL must begin with a scheme (not limited to http/https), e. g.:</p>\n<ul>\n<li><code>www.example.com</code> is not valid URL (missing scheme)</li>\n<li><code>javascript:void(0)</code> is valid URL, although not an HTTP one</li>\n<li><code>http://..</code> is valid URL with the host being <code>..</code> (whether it resolves depends on your DNS)</li>\n<li><code>https://example..com</code> is valid URL, same as above</li>\n</ul>\n    ',)","2017-04-21 08:26:16Z, License: CC BY-SA 3.0","('587',)","('86739711',)",I like this for teaching me new things about js! It has no false negatives that I could find. It does have some false positives: http://.. Or http:///a,"('\n                \n                <span class=""comment-copy"">I like this for teaching me new things about js! It has no false negatives that I could find. It does have some false positives: <code>http://..</code> Or <code>http:///a</code></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3736602/aamarks"" title=""882 reputation"" class=""comment-user"">aamarks</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86739711_43467144"" aria-label=""Link to comment""><span title=""2018-04-16 16:42:40Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 16, 2018 at 16:42</span></a></span>\n                        <span title=""this comment was edited 3 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 16, 2018 at 16:42","('3',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
24,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,43467144.0,"If you want to check whether a string is valid HTTP URL, you can use URL constructor (it will throw on malformed string):
function isValidHttpUrl(string) {
  let url;
  try {
    url = new URL(string);
  } catch (_) {
    return false;
  }
  return url.protocol === ""http:"" || url.protocol === ""https:"";
}
console.log(""http://example.com: ""+isValidHttpUrl(""https://example.com""));
console.log(""example.com: ""+isValidHttpUrl(""example.com""));
Run code snippetExpand snippet
Note: Per RFC 3886, URL must begin with a scheme (not limited to http/https), e. g.:
www.example.com is not valid URL (missing scheme)
javascript:void(0) is valid URL, although not an HTTP one
http://.. is valid URL with the host being .. (whether it resolves depends on your DNS)
https://example..com is valid URL, same as above","('\n<p>If you want to check whether a string <strong>is valid HTTP URL</strong>, you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer""><code>URL</code> constructor</a> (it will throw on malformed string):</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">let</span> url;\n  <span class=""hljs-keyword"">try</span> {\n    url = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">URL</span>(string);\n  } <span class=""hljs-keyword"">catch</span> (_) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  }\n  <span class=""hljs-keyword"">return</span> url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""http:""</span> || url.<span class=""hljs-property"">protocol</span> === <span class=""hljs-string"">""https:""</span>;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""http://example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""https://example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""example.com: ""</span>+<span class=""hljs-title function_"">isValidHttpUrl</span>(<span class=""hljs-string"">""example.com""</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p><strong>Note:</strong> Per <a href=""https://www.rfc-editor.org/rfc/rfc3986"" rel=""noreferrer"">RFC 3886</a>, URL must begin with a scheme (not limited to http/https), e. g.:</p>\n<ul>\n<li><code>www.example.com</code> is not valid URL (missing scheme)</li>\n<li><code>javascript:void(0)</code> is valid URL, although not an HTTP one</li>\n<li><code>http://..</code> is valid URL with the host being <code>..</code> (whether it resolves depends on your DNS)</li>\n<li><code>https://example..com</code> is valid URL, same as above</li>\n</ul>\n    ',)","2017-04-21 08:26:16Z, License: CC BY-SA 3.0","('587',)","('90070981',)",URL is working starting from Edge so everything below it might not work as you expect. Make sure you check the compatibility first.,"('\n                \n                <span class=""comment-copy"">URL is working starting from Edge so everything below it might not work as you expect. Make sure you check the compatibility first.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/4185000/tony-t"" title=""94 reputation"" class=""comment-user"">Tony T.</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment90070981_43467144"" aria-label=""Link to comment""><span title=""2018-07-27 06:31:35Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 27, 2018 at 6:31</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jul 27, 2018 at 6:31","('3',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
25,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,5717133.0,"A related question with an answer
Or this Regexp from Devshed:
function validURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
    '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
    '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
    '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return !!pattern.test(str);
}","('\n<p><a href=""https://stackoverflow.com/questions/2838404/javascript-regex-url-matching"">A related question with an answer</a></p>\n<p>Or this Regexp from <a href=""https://web.archive.org/web/20110806041156/http://forums.devshed.com/javascript-development-115/regexp-to-match-url-pattern-493764.html"" rel=""noreferrer"">Devshed</a>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">validURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n    <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n    <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n    <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n    <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n    <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> !!pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2019-03-27 18:19:45Z, License: CC BY-SA 4.0","('403',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
26,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,5717133.0,"A related question with an answer
Or this Regexp from Devshed:
function validURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
    '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
    '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
    '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return !!pattern.test(str);
}","('\n<p><a href=""https://stackoverflow.com/questions/2838404/javascript-regex-url-matching"">A related question with an answer</a></p>\n<p>Or this Regexp from <a href=""https://web.archive.org/web/20110806041156/http://forums.devshed.com/javascript-development-115/regexp-to-match-url-pattern-493764.html"" rel=""noreferrer"">Devshed</a>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">validURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n    <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n    <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n    <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n    <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n    <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> !!pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2019-03-27 18:19:45Z, License: CC BY-SA 4.0","('403',)","('97490037',)",Fails on valid url web.archive.org/web/20170817095211/https://github.com/Microsoft/…,"('\n                \n                <span class=""comment-copy"">Fails on valid url <a href=""https://web.archive.org/web/20170817095211/https://github.com/Microsoft/vscode/issues/32405"" rel=""nofollow noreferrer"">web.archive.org/web/20170817095211/https://github.com/Microsoft/…</a></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/5056/george-mauer"" title=""115,965 reputation"" class=""comment-user"">George Mauer</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment97490037_5717133"" aria-label=""Link to comment""><span title=""2019-03-27 18:19:45Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Mar 27, 2019 at 18:19</span></a></span>\n            ',)","Mar 27, 2019 at 18:19","('4',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
27,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,5717133.0,"A related question with an answer
Or this Regexp from Devshed:
function validURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
    '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
    '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
    '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return !!pattern.test(str);
}","('\n<p><a href=""https://stackoverflow.com/questions/2838404/javascript-regex-url-matching"">A related question with an answer</a></p>\n<p>Or this Regexp from <a href=""https://web.archive.org/web/20110806041156/http://forums.devshed.com/javascript-development-115/regexp-to-match-url-pattern-493764.html"" rel=""noreferrer"">Devshed</a>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">validURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n    <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n    <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n    <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n    <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n    <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> !!pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2019-03-27 18:19:45Z, License: CC BY-SA 4.0","('403',)","('100276831',)",Fails on en.m.wikipedia.org/wiki/C_Sharp_(programming_language),"('\n                \n                <span class=""comment-copy"">Fails on <a href=""https://en.m.wikipedia.org/wiki/C_Sharp_(programming_language)"" rel=""nofollow noreferrer"">en.m.wikipedia.org/wiki/C_Sharp_(programming_language)</a></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/9059939/supun-kavinda"" title=""1,265 reputation"" class=""comment-user"">Supun Kavinda</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment100276831_5717133"" aria-label=""Link to comment""><span title=""2019-07-03 06:14:25Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 3, 2019 at 6:14</span></a></span>\n            ',)","Jul 3, 2019 at 6:14","('1',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
28,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,5717133.0,"A related question with an answer
Or this Regexp from Devshed:
function validURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
    '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
    '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
    '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return !!pattern.test(str);
}","('\n<p><a href=""https://stackoverflow.com/questions/2838404/javascript-regex-url-matching"">A related question with an answer</a></p>\n<p>Or this Regexp from <a href=""https://web.archive.org/web/20110806041156/http://forums.devshed.com/javascript-development-115/regexp-to-match-url-pattern-493764.html"" rel=""noreferrer"">Devshed</a>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">validURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n    <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n    <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n    <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n    <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n    <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> !!pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2019-03-27 18:19:45Z, License: CC BY-SA 4.0","('403',)","('102042671',)",www.jayakumar it is a valid url? it returning true,"('\n                \n                <span class=""comment-copy"">www.jayakumar it is a valid url? it returning true</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/4398541/jayakumar"" title=""91 reputation"" class=""comment-user"">Jayakumar</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment102042671_5717133"" aria-label=""Link to comment""><span title=""2019-09-05 12:29:30Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Sep 5, 2019 at 12:29</span></a></span>\n            ',)","Sep 5, 2019 at 12:29","('2',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
29,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,5717133.0,"A related question with an answer
Or this Regexp from Devshed:
function validURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
    '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
    '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
    '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return !!pattern.test(str);
}","('\n<p><a href=""https://stackoverflow.com/questions/2838404/javascript-regex-url-matching"">A related question with an answer</a></p>\n<p>Or this Regexp from <a href=""https://web.archive.org/web/20110806041156/http://forums.devshed.com/javascript-development-115/regexp-to-match-url-pattern-493764.html"" rel=""noreferrer"">Devshed</a>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">validURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n    <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n    <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n    <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n    <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n    <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> !!pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2019-03-27 18:19:45Z, License: CC BY-SA 4.0","('403',)","('110522822',)","I think this answer is outdates, suggest not to use it in production","('\n                \n                <span class=""comment-copy"">I think this answer is outdates, suggest not to use it in production</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1475625/david-constantine"" title=""567 reputation"" class=""comment-user"">David Constantine</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment110522822_5717133"" aria-label=""Link to comment""><span title=""2020-06-21 07:34:27Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jun 21, 2020 at 7:34</span></a></span>\n            ',)","Jun 21, 2020 at 7:34","('3',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
30,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,5717133.0,"A related question with an answer
Or this Regexp from Devshed:
function validURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
    '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
    '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
    '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return !!pattern.test(str);
}","('\n<p><a href=""https://stackoverflow.com/questions/2838404/javascript-regex-url-matching"">A related question with an answer</a></p>\n<p>Or this Regexp from <a href=""https://web.archive.org/web/20110806041156/http://forums.devshed.com/javascript-development-115/regexp-to-match-url-pattern-493764.html"" rel=""noreferrer"">Devshed</a>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">validURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n    <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n    <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n    <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n    <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n    <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> !!pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2019-03-27 18:19:45Z, License: CC BY-SA 4.0","('403',)","('113000791',)","if we put ""111111111111111111111111111111111111111111111111"" as input server will hang. I faced this issue and then chenged my code to str.match(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g);","('\n                \n                <span class=""comment-copy"">if we put ""111111111111111111111111111111111111111111111111"" as input server will hang. I faced this issue and then chenged my code to str.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)/g);</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/6660638/epsi95"" title=""8,782 reputation"" class=""comment-user"">Epsi95</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment113000791_5717133"" aria-label=""Link to comment""><span title=""2020-09-15 13:31:54Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Sep 15, 2020 at 13:31</span></a></span>\n            ',)","Sep 15, 2020 at 13:31","('6',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
31,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,14582229.0,"function isURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|'+ // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2014-04-23 00:23:52Z, License: CC BY-SA 3.0","('165',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
32,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,14582229.0,"function isURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|'+ // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2014-04-23 00:23:52Z, License: CC BY-SA 3.0","('165',)","('35545197',)","fails for google search image links : http://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&docid=nIv5rk2GyP3hXM&tbnid=isiOkMe3nCtexM:&ved=0CAUQjRw&url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&ei=ygZXU_2fGKbMsQTf4YLgAQ&bvm=bv.65177938,d.aWc&psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&ust=1398298682009707","('\n                \n                <span class=""comment-copy"">fails for google search image links : <code>http://www.google.com/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;docid=nIv5rk2GyP3hXM&amp;tbnid=isiOkMe3nCtexM:&amp;ved=0CAUQjRw&amp;url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&amp;ei=ygZXU_2fGKbMsQTf4YLgAQ&amp;bvm=bv.65177938,d.aWc&amp;psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&amp;ust=1398298682009707</code></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1529231/bill-davis"" title=""323 reputation"" class=""comment-user"">bill davis</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment35545197_14582229"" aria-label=""Link to comment""><span title=""2014-04-23 00:23:52Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 23, 2014 at 0:23</span></a></span>\n                        <span title=""this comment was edited 5 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 23, 2014 at 0:23","('17',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
33,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,14582229.0,"function isURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|'+ // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2014-04-23 00:23:52Z, License: CC BY-SA 3.0","('165',)","('44736859',)",this is unusable slow,"('\n                \n                <span class=""comment-copy"">this is unusable slow</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/231382/hern%c3%a1n-eche"" title=""6,393 reputation"" class=""comment-user"">Hernán Eche</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment44736859_14582229"" aria-label=""Link to comment""><span title=""2015-01-28 03:00:32Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jan 28, 2015 at 3:00</span></a></span>\n            ',)","Jan 28, 2015 at 3:00","('9',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
34,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,14582229.0,"function isURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|'+ // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2014-04-23 00:23:52Z, License: CC BY-SA 3.0","('165',)","('61523253',)","@HernánEche What so you mean by slow? start = new Date(); isURL(""http://michalstefanow.com""); end = new Date(); diff = end - start; console.log(diff) I put a kettle on, went to a toilet, called my mum and the thing was done in no time...","('\n                \n                <span class=""comment-copy"">@HernánEche What so you mean by <b>slow</b>? <code>start = new Date(); isURL(""http://michalstefanow.com""); end = new Date(); diff = end - start; console.log(diff)</code> I put a kettle on, went to a toilet, called my mum and the thing was done in no time...</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/775359/mars-robertson"" title=""12,535 reputation"" class=""comment-user"">Mars Robertson</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment61523253_14582229"" aria-label=""Link to comment""><span title=""2016-05-02 13:59:41Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">May 2, 2016 at 13:59</span></a></span>\n            ',)","May 2, 2016 at 13:59","('10',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
35,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,14582229.0,"function isURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|'+ // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2014-04-23 00:23:52Z, License: CC BY-SA 3.0","('165',)","('69025668',)",It returns true for aaa.,"('\n                \n                <span class=""comment-copy"">It returns <code>true</code> for <code>aaa</code>.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/811716/alex-naumov"" title=""331 reputation"" class=""comment-user"">alex naumov</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment69025668_14582229"" aria-label=""Link to comment""><span title=""2016-12-01 09:13:43Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Dec 1, 2016 at 9:13</span></a></span>\n            ',)","Dec 1, 2016 at 9:13","('75',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
36,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,14582229.0,"function isURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|'+ // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^(https?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre>\n    ',)","2014-04-23 00:23:52Z, License: CC BY-SA 3.0","('165',)","('86739976',)",This absolutely should not be the correct answer. It fails many test cases and more importantly it hangs your page on even a short string: isURL('12345678901234567890123') add some more characters and it's even worse.,"('\n                \n                <span class=""comment-copy"">This absolutely should not be the correct answer. It fails many test cases and more importantly it hangs your page on even a short string: <code>isURL(\'12345678901234567890123\')</code> add some more characters and it\'s even worse.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3736602/aamarks"" title=""882 reputation"" class=""comment-user"">aamarks</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86739976_14582229"" aria-label=""Link to comment""><span title=""2018-04-16 16:51:07Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 16, 2018 at 16:51</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 16, 2018 at 16:51","('4',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
37,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,34695026.0,"Rather than using a regular expression, I would recommend making use of an anchor element.
when you set the href property of an anchor, various other properties are set.
var parser = document.createElement('a');
parser.href = ""http://example.com:3000/pathname/?search=test#hash"";

parser.protocol; // => ""http:""
parser.hostname; // => ""example.com""
parser.port;     // => ""3000""
parser.pathname; // => ""/pathname/""
parser.search;   // => ""?search=test""
parser.hash;     // => ""#hash""
parser.host;     // => ""example.com:3000""
source
However, if the value href is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.
Edit: as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.
So, as long as you're not passing in the URL of the current page, you can do something like:
function isValidURL(str) {
   var a  = document.createElement('a');
   a.href = str;
   return (a.host && a.host != window.location.host);
}","('\n<p>Rather than using a regular expression, I would recommend making use of an anchor element. </p>\n\n<p>when you set the <code>href</code> property of an <code>anchor</code>, various other properties are set. </p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> parser = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\nparser.<span class=""hljs-property"">href</span> = <span class=""hljs-string"">""http://example.com:3000/pathname/?search=test#hash""</span>;\n\nparser.<span class=""hljs-property"">protocol</span>; <span class=""hljs-comment"">// =&gt; ""http:""</span>\nparser.<span class=""hljs-property"">hostname</span>; <span class=""hljs-comment"">// =&gt; ""example.com""</span>\nparser.<span class=""hljs-property"">port</span>;     <span class=""hljs-comment"">// =&gt; ""3000""</span>\nparser.<span class=""hljs-property"">pathname</span>; <span class=""hljs-comment"">// =&gt; ""/pathname/""</span>\nparser.<span class=""hljs-property"">search</span>;   <span class=""hljs-comment"">// =&gt; ""?search=test""</span>\nparser.<span class=""hljs-property"">hash</span>;     <span class=""hljs-comment"">// =&gt; ""#hash""</span>\nparser.<span class=""hljs-property"">host</span>;     <span class=""hljs-comment"">// =&gt; ""example.com:3000""</span>\n</code></pre>\n\n<p><em><a href=""https://gist.github.com/jlong/2428561"">source</a></em></p>\n\n<p>However, if the value <code>href</code> is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.</p>\n\n<p><strong>Edit:</strong> as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.</p>\n\n<p>So, as long as you\'re not passing in the URL of the current page, you can do something like:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">str</span>) {\n   <span class=""hljs-keyword"">var</span> a  = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\n   a.<span class=""hljs-property"">href</span> = str;\n   <span class=""hljs-keyword"">return</span> (a.<span class=""hljs-property"">host</span> &amp;&amp; a.<span class=""hljs-property"">host</span> != <span class=""hljs-variable language_"">window</span>.<span class=""hljs-property"">location</span>.<span class=""hljs-property"">host</span>);\n}\n</code></pre>\n    ',)","2016-02-25 15:37:15Z, License: CC BY-SA 3.0","('114',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
38,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,34695026.0,"Rather than using a regular expression, I would recommend making use of an anchor element.
when you set the href property of an anchor, various other properties are set.
var parser = document.createElement('a');
parser.href = ""http://example.com:3000/pathname/?search=test#hash"";

parser.protocol; // => ""http:""
parser.hostname; // => ""example.com""
parser.port;     // => ""3000""
parser.pathname; // => ""/pathname/""
parser.search;   // => ""?search=test""
parser.hash;     // => ""#hash""
parser.host;     // => ""example.com:3000""
source
However, if the value href is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.
Edit: as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.
So, as long as you're not passing in the URL of the current page, you can do something like:
function isValidURL(str) {
   var a  = document.createElement('a');
   a.href = str;
   return (a.host && a.host != window.location.host);
}","('\n<p>Rather than using a regular expression, I would recommend making use of an anchor element. </p>\n\n<p>when you set the <code>href</code> property of an <code>anchor</code>, various other properties are set. </p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> parser = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\nparser.<span class=""hljs-property"">href</span> = <span class=""hljs-string"">""http://example.com:3000/pathname/?search=test#hash""</span>;\n\nparser.<span class=""hljs-property"">protocol</span>; <span class=""hljs-comment"">// =&gt; ""http:""</span>\nparser.<span class=""hljs-property"">hostname</span>; <span class=""hljs-comment"">// =&gt; ""example.com""</span>\nparser.<span class=""hljs-property"">port</span>;     <span class=""hljs-comment"">// =&gt; ""3000""</span>\nparser.<span class=""hljs-property"">pathname</span>; <span class=""hljs-comment"">// =&gt; ""/pathname/""</span>\nparser.<span class=""hljs-property"">search</span>;   <span class=""hljs-comment"">// =&gt; ""?search=test""</span>\nparser.<span class=""hljs-property"">hash</span>;     <span class=""hljs-comment"">// =&gt; ""#hash""</span>\nparser.<span class=""hljs-property"">host</span>;     <span class=""hljs-comment"">// =&gt; ""example.com:3000""</span>\n</code></pre>\n\n<p><em><a href=""https://gist.github.com/jlong/2428561"">source</a></em></p>\n\n<p>However, if the value <code>href</code> is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.</p>\n\n<p><strong>Edit:</strong> as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.</p>\n\n<p>So, as long as you\'re not passing in the URL of the current page, you can do something like:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">str</span>) {\n   <span class=""hljs-keyword"">var</span> a  = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\n   a.<span class=""hljs-property"">href</span> = str;\n   <span class=""hljs-keyword"">return</span> (a.<span class=""hljs-property"">host</span> &amp;&amp; a.<span class=""hljs-property"">host</span> != <span class=""hljs-variable language_"">window</span>.<span class=""hljs-property"">location</span>.<span class=""hljs-property"">host</span>);\n}\n</code></pre>\n    ',)","2016-02-25 15:37:15Z, License: CC BY-SA 3.0","('114',)","('58944874',)","This isn't the case (in Chrome 48 at least). If the url passed to a.href is invalid, parser.host returns the hostname of the page you're currently on, not the expected false.","('\n                \n                <span class=""comment-copy"">This isn\'t the case (in Chrome 48 at least). If the url passed to <code>a.href</code> is invalid, <code>parser.host</code> returns the hostname of the page you\'re currently on, not the expected <code>false</code>.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/856054/sam-beckham"" title=""1,218 reputation"" class=""comment-user"">Sam Beckham</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment58944874_34695026"" aria-label=""Link to comment""><span title=""2016-02-25 15:37:15Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Feb 25, 2016 at 15:37</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Feb 25, 2016 at 15:37","('8',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
39,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,34695026.0,"Rather than using a regular expression, I would recommend making use of an anchor element.
when you set the href property of an anchor, various other properties are set.
var parser = document.createElement('a');
parser.href = ""http://example.com:3000/pathname/?search=test#hash"";

parser.protocol; // => ""http:""
parser.hostname; // => ""example.com""
parser.port;     // => ""3000""
parser.pathname; // => ""/pathname/""
parser.search;   // => ""?search=test""
parser.hash;     // => ""#hash""
parser.host;     // => ""example.com:3000""
source
However, if the value href is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.
Edit: as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.
So, as long as you're not passing in the URL of the current page, you can do something like:
function isValidURL(str) {
   var a  = document.createElement('a');
   a.href = str;
   return (a.host && a.host != window.location.host);
}","('\n<p>Rather than using a regular expression, I would recommend making use of an anchor element. </p>\n\n<p>when you set the <code>href</code> property of an <code>anchor</code>, various other properties are set. </p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> parser = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\nparser.<span class=""hljs-property"">href</span> = <span class=""hljs-string"">""http://example.com:3000/pathname/?search=test#hash""</span>;\n\nparser.<span class=""hljs-property"">protocol</span>; <span class=""hljs-comment"">// =&gt; ""http:""</span>\nparser.<span class=""hljs-property"">hostname</span>; <span class=""hljs-comment"">// =&gt; ""example.com""</span>\nparser.<span class=""hljs-property"">port</span>;     <span class=""hljs-comment"">// =&gt; ""3000""</span>\nparser.<span class=""hljs-property"">pathname</span>; <span class=""hljs-comment"">// =&gt; ""/pathname/""</span>\nparser.<span class=""hljs-property"">search</span>;   <span class=""hljs-comment"">// =&gt; ""?search=test""</span>\nparser.<span class=""hljs-property"">hash</span>;     <span class=""hljs-comment"">// =&gt; ""#hash""</span>\nparser.<span class=""hljs-property"">host</span>;     <span class=""hljs-comment"">// =&gt; ""example.com:3000""</span>\n</code></pre>\n\n<p><em><a href=""https://gist.github.com/jlong/2428561"">source</a></em></p>\n\n<p>However, if the value <code>href</code> is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.</p>\n\n<p><strong>Edit:</strong> as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.</p>\n\n<p>So, as long as you\'re not passing in the URL of the current page, you can do something like:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">str</span>) {\n   <span class=""hljs-keyword"">var</span> a  = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\n   a.<span class=""hljs-property"">href</span> = str;\n   <span class=""hljs-keyword"">return</span> (a.<span class=""hljs-property"">host</span> &amp;&amp; a.<span class=""hljs-property"">host</span> != <span class=""hljs-variable language_"">window</span>.<span class=""hljs-property"">location</span>.<span class=""hljs-property"">host</span>);\n}\n</code></pre>\n    ',)","2016-02-25 15:37:15Z, License: CC BY-SA 3.0","('114',)","('58961460',)","Gah! that's weird. I swear I tested this! I think it's fair to say that this wont really ever have to be used ON the current page, so the conditional can just be changed. I'll edit the post.","('\n                \n                <span class=""comment-copy"">Gah! that\'s weird. I swear I tested this!   I think it\'s fair to say that this wont really ever have to be used ON the current page, so the conditional can just be changed. I\'ll edit the post.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3581485/luke"" title=""5,527 reputation"" class=""comment-user"">Luke</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment58961460_34695026"" aria-label=""Link to comment""><span title=""2016-02-25 22:48:32Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Feb 25, 2016 at 22:48</span></a></span>\n            ',)","Feb 25, 2016 at 22:48","('3',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
40,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,34695026.0,"Rather than using a regular expression, I would recommend making use of an anchor element.
when you set the href property of an anchor, various other properties are set.
var parser = document.createElement('a');
parser.href = ""http://example.com:3000/pathname/?search=test#hash"";

parser.protocol; // => ""http:""
parser.hostname; // => ""example.com""
parser.port;     // => ""3000""
parser.pathname; // => ""/pathname/""
parser.search;   // => ""?search=test""
parser.hash;     // => ""#hash""
parser.host;     // => ""example.com:3000""
source
However, if the value href is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.
Edit: as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.
So, as long as you're not passing in the URL of the current page, you can do something like:
function isValidURL(str) {
   var a  = document.createElement('a');
   a.href = str;
   return (a.host && a.host != window.location.host);
}","('\n<p>Rather than using a regular expression, I would recommend making use of an anchor element. </p>\n\n<p>when you set the <code>href</code> property of an <code>anchor</code>, various other properties are set. </p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> parser = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\nparser.<span class=""hljs-property"">href</span> = <span class=""hljs-string"">""http://example.com:3000/pathname/?search=test#hash""</span>;\n\nparser.<span class=""hljs-property"">protocol</span>; <span class=""hljs-comment"">// =&gt; ""http:""</span>\nparser.<span class=""hljs-property"">hostname</span>; <span class=""hljs-comment"">// =&gt; ""example.com""</span>\nparser.<span class=""hljs-property"">port</span>;     <span class=""hljs-comment"">// =&gt; ""3000""</span>\nparser.<span class=""hljs-property"">pathname</span>; <span class=""hljs-comment"">// =&gt; ""/pathname/""</span>\nparser.<span class=""hljs-property"">search</span>;   <span class=""hljs-comment"">// =&gt; ""?search=test""</span>\nparser.<span class=""hljs-property"">hash</span>;     <span class=""hljs-comment"">// =&gt; ""#hash""</span>\nparser.<span class=""hljs-property"">host</span>;     <span class=""hljs-comment"">// =&gt; ""example.com:3000""</span>\n</code></pre>\n\n<p><em><a href=""https://gist.github.com/jlong/2428561"">source</a></em></p>\n\n<p>However, if the value <code>href</code> is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.</p>\n\n<p><strong>Edit:</strong> as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.</p>\n\n<p>So, as long as you\'re not passing in the URL of the current page, you can do something like:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">str</span>) {\n   <span class=""hljs-keyword"">var</span> a  = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\n   a.<span class=""hljs-property"">href</span> = str;\n   <span class=""hljs-keyword"">return</span> (a.<span class=""hljs-property"">host</span> &amp;&amp; a.<span class=""hljs-property"">host</span> != <span class=""hljs-variable language_"">window</span>.<span class=""hljs-property"">location</span>.<span class=""hljs-property"">host</span>);\n}\n</code></pre>\n    ',)","2016-02-25 15:37:15Z, License: CC BY-SA 3.0","('114',)","('62009954',)","it is not a very typical use case, but this technique does not work in the context of Firefox browser window (important for addon development)","('\n                \n                <span class=""comment-copy"">it is not a very typical use case, but this technique does not work in the context of Firefox browser window (important for addon development)</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1877270/chrmod"" title=""1,395 reputation"" class=""comment-user"">chrmod</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment62009954_34695026"" aria-label=""Link to comment""><span title=""2016-05-15 16:01:48Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">May 15, 2016 at 16:01</span></a></span>\n            ',)","May 15, 2016 at 16:01","('',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
41,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,34695026.0,"Rather than using a regular expression, I would recommend making use of an anchor element.
when you set the href property of an anchor, various other properties are set.
var parser = document.createElement('a');
parser.href = ""http://example.com:3000/pathname/?search=test#hash"";

parser.protocol; // => ""http:""
parser.hostname; // => ""example.com""
parser.port;     // => ""3000""
parser.pathname; // => ""/pathname/""
parser.search;   // => ""?search=test""
parser.hash;     // => ""#hash""
parser.host;     // => ""example.com:3000""
source
However, if the value href is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.
Edit: as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.
So, as long as you're not passing in the URL of the current page, you can do something like:
function isValidURL(str) {
   var a  = document.createElement('a');
   a.href = str;
   return (a.host && a.host != window.location.host);
}","('\n<p>Rather than using a regular expression, I would recommend making use of an anchor element. </p>\n\n<p>when you set the <code>href</code> property of an <code>anchor</code>, various other properties are set. </p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> parser = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\nparser.<span class=""hljs-property"">href</span> = <span class=""hljs-string"">""http://example.com:3000/pathname/?search=test#hash""</span>;\n\nparser.<span class=""hljs-property"">protocol</span>; <span class=""hljs-comment"">// =&gt; ""http:""</span>\nparser.<span class=""hljs-property"">hostname</span>; <span class=""hljs-comment"">// =&gt; ""example.com""</span>\nparser.<span class=""hljs-property"">port</span>;     <span class=""hljs-comment"">// =&gt; ""3000""</span>\nparser.<span class=""hljs-property"">pathname</span>; <span class=""hljs-comment"">// =&gt; ""/pathname/""</span>\nparser.<span class=""hljs-property"">search</span>;   <span class=""hljs-comment"">// =&gt; ""?search=test""</span>\nparser.<span class=""hljs-property"">hash</span>;     <span class=""hljs-comment"">// =&gt; ""#hash""</span>\nparser.<span class=""hljs-property"">host</span>;     <span class=""hljs-comment"">// =&gt; ""example.com:3000""</span>\n</code></pre>\n\n<p><em><a href=""https://gist.github.com/jlong/2428561"">source</a></em></p>\n\n<p>However, if the value <code>href</code> is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.</p>\n\n<p><strong>Edit:</strong> as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.</p>\n\n<p>So, as long as you\'re not passing in the URL of the current page, you can do something like:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">str</span>) {\n   <span class=""hljs-keyword"">var</span> a  = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\n   a.<span class=""hljs-property"">href</span> = str;\n   <span class=""hljs-keyword"">return</span> (a.<span class=""hljs-property"">host</span> &amp;&amp; a.<span class=""hljs-property"">host</span> != <span class=""hljs-variable language_"">window</span>.<span class=""hljs-property"">location</span>.<span class=""hljs-property"">host</span>);\n}\n</code></pre>\n    ',)","2016-02-25 15:37:15Z, License: CC BY-SA 3.0","('114',)","('86656948',)",function isValidURL(str): so much better than using regex! Thank you!,"('\n                \n                <span class=""comment-copy""><code>function isValidURL(str)</code>: so much better than using regex! Thank you!</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1086511/rodrigo"" title=""4,648 reputation"" class=""comment-user"">Rodrigo</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86656948_34695026"" aria-label=""Link to comment""><span title=""2018-04-13 15:55:28Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 13, 2018 at 15:55</span></a></span>\n            ',)","Apr 13, 2018 at 15:55","('5',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
42,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,34695026.0,"Rather than using a regular expression, I would recommend making use of an anchor element.
when you set the href property of an anchor, various other properties are set.
var parser = document.createElement('a');
parser.href = ""http://example.com:3000/pathname/?search=test#hash"";

parser.protocol; // => ""http:""
parser.hostname; // => ""example.com""
parser.port;     // => ""3000""
parser.pathname; // => ""/pathname/""
parser.search;   // => ""?search=test""
parser.hash;     // => ""#hash""
parser.host;     // => ""example.com:3000""
source
However, if the value href is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.
Edit: as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.
So, as long as you're not passing in the URL of the current page, you can do something like:
function isValidURL(str) {
   var a  = document.createElement('a');
   a.href = str;
   return (a.host && a.host != window.location.host);
}","('\n<p>Rather than using a regular expression, I would recommend making use of an anchor element. </p>\n\n<p>when you set the <code>href</code> property of an <code>anchor</code>, various other properties are set. </p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> parser = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\nparser.<span class=""hljs-property"">href</span> = <span class=""hljs-string"">""http://example.com:3000/pathname/?search=test#hash""</span>;\n\nparser.<span class=""hljs-property"">protocol</span>; <span class=""hljs-comment"">// =&gt; ""http:""</span>\nparser.<span class=""hljs-property"">hostname</span>; <span class=""hljs-comment"">// =&gt; ""example.com""</span>\nparser.<span class=""hljs-property"">port</span>;     <span class=""hljs-comment"">// =&gt; ""3000""</span>\nparser.<span class=""hljs-property"">pathname</span>; <span class=""hljs-comment"">// =&gt; ""/pathname/""</span>\nparser.<span class=""hljs-property"">search</span>;   <span class=""hljs-comment"">// =&gt; ""?search=test""</span>\nparser.<span class=""hljs-property"">hash</span>;     <span class=""hljs-comment"">// =&gt; ""#hash""</span>\nparser.<span class=""hljs-property"">host</span>;     <span class=""hljs-comment"">// =&gt; ""example.com:3000""</span>\n</code></pre>\n\n<p><em><a href=""https://gist.github.com/jlong/2428561"">source</a></em></p>\n\n<p>However, if the value <code>href</code> is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.</p>\n\n<p><strong>Edit:</strong> as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.</p>\n\n<p>So, as long as you\'re not passing in the URL of the current page, you can do something like:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">str</span>) {\n   <span class=""hljs-keyword"">var</span> a  = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'a\'</span>);\n   a.<span class=""hljs-property"">href</span> = str;\n   <span class=""hljs-keyword"">return</span> (a.<span class=""hljs-property"">host</span> &amp;&amp; a.<span class=""hljs-property"">host</span> != <span class=""hljs-variable language_"">window</span>.<span class=""hljs-property"">location</span>.<span class=""hljs-property"">host</span>);\n}\n</code></pre>\n    ',)","2016-02-25 15:37:15Z, License: CC BY-SA 3.0","('114',)","('93983978',)",Pretty simple way to hack around the problem. These properties are experimental though: developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement,"('\n                \n                <span class=""comment-copy"">Pretty simple way to hack around the problem. These properties are experimental though: <a href=""https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement"" rel=""nofollow noreferrer"">developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement</a></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1091212/boris-d-teoharov"" title=""2,290 reputation"" class=""comment-user"">Boris D. Teoharov</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment93983978_34695026"" aria-label=""Link to comment""><span title=""2018-11-30 14:19:23Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Nov 30, 2018 at 14:19</span></a></span>\n            ',)","Nov 30, 2018 at 14:19","('1',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
43,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49849482.0,"I am using below function to validate URL with or without http/https:
function isValidURL(string) {
  var res = string.match(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g);
  return (res !== null)
};

var testCase1 = ""http://en.wikipedia.org/wiki/Procter_&_Gamble"";
console.log(isValidURL(testCase1)); // return true

var testCase2 = ""http://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&docid=nIv5rk2GyP3hXM&tbnid=isiOkMe3nCtexM:&ved=0CAUQjRw&url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&ei=ygZXU_2fGKbMsQTf4YLgAQ&bvm=bv.65177938,d.aWc&psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&ust=1398298682009707"";
console.log(isValidURL(testCase2)); // return true

var testCase3 = ""https://sdfasd"";
console.log(isValidURL(testCase3)); // return false

var testCase4 = ""dfdsfdsfdfdsfsdfs"";
console.log(isValidURL(testCase4)); // return false

var testCase5 = ""magnet:?xt=urn:btih:123"";
console.log(isValidURL(testCase5)); // return false

var testCase6 = ""https://stackoverflow.com/"";
console.log(isValidURL(testCase6)); // return true

var testCase7 = ""https://w"";
console.log(isValidURL(testCase7)); // return false

var testCase8 = ""https://sdfasdp.ppppppppppp"";
console.log(isValidURL(testCase8)); // return false
Run code snippetExpand snippet","('\n<p>I am using below function to validate URL with or without <code>http/https</code>:</p>\n\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">var</span> res = string.<span class=""hljs-title function_"">match</span>(<span class=""hljs-regexp"">/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)/g</span>);\n  <span class=""hljs-keyword"">return</span> (res !== <span class=""hljs-literal"">null</span>)\n};\n\n<span class=""hljs-keyword"">var</span> testCase1 = <span class=""hljs-string"">""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase1)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase2 = <span class=""hljs-string"">""http://www.google.com/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;docid=nIv5rk2GyP3hXM&amp;tbnid=isiOkMe3nCtexM:&amp;ved=0CAUQjRw&amp;url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&amp;ei=ygZXU_2fGKbMsQTf4YLgAQ&amp;bvm=bv.65177938,d.aWc&amp;psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&amp;ust=1398298682009707""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase2)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase3 = <span class=""hljs-string"">""https://sdfasd""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase3)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase4 = <span class=""hljs-string"">""dfdsfdsfdfdsfsdfs""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase4)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase5 = <span class=""hljs-string"">""magnet:?xt=urn:btih:123""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase5)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase6 = <span class=""hljs-string"">""https://stackoverflow.com/""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase6)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase7 = <span class=""hljs-string"">""https://w""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase7)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase8 = <span class=""hljs-string"">""https://sdfasdp.ppppppppppp""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase8)); <span class=""hljs-comment"">// return false</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2018-04-16 07:36:41Z, License: CC BY-SA 3.0","('101',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
44,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49849482.0,"I am using below function to validate URL with or without http/https:
function isValidURL(string) {
  var res = string.match(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g);
  return (res !== null)
};

var testCase1 = ""http://en.wikipedia.org/wiki/Procter_&_Gamble"";
console.log(isValidURL(testCase1)); // return true

var testCase2 = ""http://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&docid=nIv5rk2GyP3hXM&tbnid=isiOkMe3nCtexM:&ved=0CAUQjRw&url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&ei=ygZXU_2fGKbMsQTf4YLgAQ&bvm=bv.65177938,d.aWc&psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&ust=1398298682009707"";
console.log(isValidURL(testCase2)); // return true

var testCase3 = ""https://sdfasd"";
console.log(isValidURL(testCase3)); // return false

var testCase4 = ""dfdsfdsfdfdsfsdfs"";
console.log(isValidURL(testCase4)); // return false

var testCase5 = ""magnet:?xt=urn:btih:123"";
console.log(isValidURL(testCase5)); // return false

var testCase6 = ""https://stackoverflow.com/"";
console.log(isValidURL(testCase6)); // return true

var testCase7 = ""https://w"";
console.log(isValidURL(testCase7)); // return false

var testCase8 = ""https://sdfasdp.ppppppppppp"";
console.log(isValidURL(testCase8)); // return false
Run code snippetExpand snippet","('\n<p>I am using below function to validate URL with or without <code>http/https</code>:</p>\n\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">var</span> res = string.<span class=""hljs-title function_"">match</span>(<span class=""hljs-regexp"">/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)/g</span>);\n  <span class=""hljs-keyword"">return</span> (res !== <span class=""hljs-literal"">null</span>)\n};\n\n<span class=""hljs-keyword"">var</span> testCase1 = <span class=""hljs-string"">""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase1)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase2 = <span class=""hljs-string"">""http://www.google.com/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;docid=nIv5rk2GyP3hXM&amp;tbnid=isiOkMe3nCtexM:&amp;ved=0CAUQjRw&amp;url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&amp;ei=ygZXU_2fGKbMsQTf4YLgAQ&amp;bvm=bv.65177938,d.aWc&amp;psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&amp;ust=1398298682009707""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase2)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase3 = <span class=""hljs-string"">""https://sdfasd""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase3)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase4 = <span class=""hljs-string"">""dfdsfdsfdfdsfsdfs""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase4)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase5 = <span class=""hljs-string"">""magnet:?xt=urn:btih:123""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase5)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase6 = <span class=""hljs-string"">""https://stackoverflow.com/""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase6)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase7 = <span class=""hljs-string"">""https://w""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase7)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase8 = <span class=""hljs-string"">""https://sdfasdp.ppppppppppp""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase8)); <span class=""hljs-comment"">// return false</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2018-04-16 07:36:41Z, License: CC BY-SA 3.0","('101',)","('86718219',)",Seems a nice solution! Could you add some tests showing it works in some corner cases (see for example these comments)?,"('\n                \n                <span class=""comment-copy"">Seems a nice solution! Could you add some tests showing it works in some corner cases (see for example these <a href=""https://stackoverflow.com/a/14582229/1422096"">comments</a>)?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1422096/basj"" title=""40,620 reputation"" class=""comment-user"">Basj</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86718219_49849482"" aria-label=""Link to comment""><span title=""2018-04-16 07:36:41Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 16, 2018 at 7:36</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 16, 2018 at 7:36","('2',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
45,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49849482.0,"I am using below function to validate URL with or without http/https:
function isValidURL(string) {
  var res = string.match(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g);
  return (res !== null)
};

var testCase1 = ""http://en.wikipedia.org/wiki/Procter_&_Gamble"";
console.log(isValidURL(testCase1)); // return true

var testCase2 = ""http://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&docid=nIv5rk2GyP3hXM&tbnid=isiOkMe3nCtexM:&ved=0CAUQjRw&url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&ei=ygZXU_2fGKbMsQTf4YLgAQ&bvm=bv.65177938,d.aWc&psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&ust=1398298682009707"";
console.log(isValidURL(testCase2)); // return true

var testCase3 = ""https://sdfasd"";
console.log(isValidURL(testCase3)); // return false

var testCase4 = ""dfdsfdsfdfdsfsdfs"";
console.log(isValidURL(testCase4)); // return false

var testCase5 = ""magnet:?xt=urn:btih:123"";
console.log(isValidURL(testCase5)); // return false

var testCase6 = ""https://stackoverflow.com/"";
console.log(isValidURL(testCase6)); // return true

var testCase7 = ""https://w"";
console.log(isValidURL(testCase7)); // return false

var testCase8 = ""https://sdfasdp.ppppppppppp"";
console.log(isValidURL(testCase8)); // return false
Run code snippetExpand snippet","('\n<p>I am using below function to validate URL with or without <code>http/https</code>:</p>\n\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">var</span> res = string.<span class=""hljs-title function_"">match</span>(<span class=""hljs-regexp"">/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)/g</span>);\n  <span class=""hljs-keyword"">return</span> (res !== <span class=""hljs-literal"">null</span>)\n};\n\n<span class=""hljs-keyword"">var</span> testCase1 = <span class=""hljs-string"">""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase1)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase2 = <span class=""hljs-string"">""http://www.google.com/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;docid=nIv5rk2GyP3hXM&amp;tbnid=isiOkMe3nCtexM:&amp;ved=0CAUQjRw&amp;url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&amp;ei=ygZXU_2fGKbMsQTf4YLgAQ&amp;bvm=bv.65177938,d.aWc&amp;psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&amp;ust=1398298682009707""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase2)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase3 = <span class=""hljs-string"">""https://sdfasd""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase3)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase4 = <span class=""hljs-string"">""dfdsfdsfdfdsfsdfs""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase4)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase5 = <span class=""hljs-string"">""magnet:?xt=urn:btih:123""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase5)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase6 = <span class=""hljs-string"">""https://stackoverflow.com/""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase6)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase7 = <span class=""hljs-string"">""https://w""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase7)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase8 = <span class=""hljs-string"">""https://sdfasdp.ppppppppppp""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase8)); <span class=""hljs-comment"">// return false</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2018-04-16 07:36:41Z, License: CC BY-SA 3.0","('101',)","('86719004',)",@Basj added test cases. Please check,"('\n                \n                <span class=""comment-copy"">@Basj added test cases. Please check</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/631803/vikasdeep-singh"" title=""20,737 reputation"" class=""comment-user"">Vikasdeep Singh</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86719004_49849482"" aria-label=""Link to comment""><span title=""2018-04-16 08:00:59Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 16, 2018 at 8:00</span></a></span>\n            ',)","Apr 16, 2018 at 8:00","('',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
46,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49849482.0,"I am using below function to validate URL with or without http/https:
function isValidURL(string) {
  var res = string.match(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g);
  return (res !== null)
};

var testCase1 = ""http://en.wikipedia.org/wiki/Procter_&_Gamble"";
console.log(isValidURL(testCase1)); // return true

var testCase2 = ""http://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&docid=nIv5rk2GyP3hXM&tbnid=isiOkMe3nCtexM:&ved=0CAUQjRw&url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&ei=ygZXU_2fGKbMsQTf4YLgAQ&bvm=bv.65177938,d.aWc&psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&ust=1398298682009707"";
console.log(isValidURL(testCase2)); // return true

var testCase3 = ""https://sdfasd"";
console.log(isValidURL(testCase3)); // return false

var testCase4 = ""dfdsfdsfdfdsfsdfs"";
console.log(isValidURL(testCase4)); // return false

var testCase5 = ""magnet:?xt=urn:btih:123"";
console.log(isValidURL(testCase5)); // return false

var testCase6 = ""https://stackoverflow.com/"";
console.log(isValidURL(testCase6)); // return true

var testCase7 = ""https://w"";
console.log(isValidURL(testCase7)); // return false

var testCase8 = ""https://sdfasdp.ppppppppppp"";
console.log(isValidURL(testCase8)); // return false
Run code snippetExpand snippet","('\n<p>I am using below function to validate URL with or without <code>http/https</code>:</p>\n\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">var</span> res = string.<span class=""hljs-title function_"">match</span>(<span class=""hljs-regexp"">/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)/g</span>);\n  <span class=""hljs-keyword"">return</span> (res !== <span class=""hljs-literal"">null</span>)\n};\n\n<span class=""hljs-keyword"">var</span> testCase1 = <span class=""hljs-string"">""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase1)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase2 = <span class=""hljs-string"">""http://www.google.com/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;docid=nIv5rk2GyP3hXM&amp;tbnid=isiOkMe3nCtexM:&amp;ved=0CAUQjRw&amp;url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&amp;ei=ygZXU_2fGKbMsQTf4YLgAQ&amp;bvm=bv.65177938,d.aWc&amp;psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&amp;ust=1398298682009707""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase2)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase3 = <span class=""hljs-string"">""https://sdfasd""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase3)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase4 = <span class=""hljs-string"">""dfdsfdsfdfdsfsdfs""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase4)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase5 = <span class=""hljs-string"">""magnet:?xt=urn:btih:123""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase5)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase6 = <span class=""hljs-string"">""https://stackoverflow.com/""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase6)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase7 = <span class=""hljs-string"">""https://w""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase7)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase8 = <span class=""hljs-string"">""https://sdfasdp.ppppppppppp""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase8)); <span class=""hljs-comment"">// return false</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2018-04-16 07:36:41Z, License: CC BY-SA 3.0","('101',)","('94843921',)",its returning true for sadf@gmail.com...should it? I guess it should not,"('\n                \n                <span class=""comment-copy"">its returning true for <code>sadf@gmail.com</code>...should it? I guess it should not</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/5361964/zohab-ali"" title=""8,280 reputation"" class=""comment-user"">Zohab Ali</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment94843921_49849482"" aria-label=""Link to comment""><span title=""2019-01-02 09:05:06Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jan 2, 2019 at 9:05</span></a></span>\n            ',)","Jan 2, 2019 at 9:05","('5',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
47,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49849482.0,"I am using below function to validate URL with or without http/https:
function isValidURL(string) {
  var res = string.match(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g);
  return (res !== null)
};

var testCase1 = ""http://en.wikipedia.org/wiki/Procter_&_Gamble"";
console.log(isValidURL(testCase1)); // return true

var testCase2 = ""http://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&docid=nIv5rk2GyP3hXM&tbnid=isiOkMe3nCtexM:&ved=0CAUQjRw&url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&ei=ygZXU_2fGKbMsQTf4YLgAQ&bvm=bv.65177938,d.aWc&psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&ust=1398298682009707"";
console.log(isValidURL(testCase2)); // return true

var testCase3 = ""https://sdfasd"";
console.log(isValidURL(testCase3)); // return false

var testCase4 = ""dfdsfdsfdfdsfsdfs"";
console.log(isValidURL(testCase4)); // return false

var testCase5 = ""magnet:?xt=urn:btih:123"";
console.log(isValidURL(testCase5)); // return false

var testCase6 = ""https://stackoverflow.com/"";
console.log(isValidURL(testCase6)); // return true

var testCase7 = ""https://w"";
console.log(isValidURL(testCase7)); // return false

var testCase8 = ""https://sdfasdp.ppppppppppp"";
console.log(isValidURL(testCase8)); // return false
Run code snippetExpand snippet","('\n<p>I am using below function to validate URL with or without <code>http/https</code>:</p>\n\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">var</span> res = string.<span class=""hljs-title function_"">match</span>(<span class=""hljs-regexp"">/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)/g</span>);\n  <span class=""hljs-keyword"">return</span> (res !== <span class=""hljs-literal"">null</span>)\n};\n\n<span class=""hljs-keyword"">var</span> testCase1 = <span class=""hljs-string"">""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase1)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase2 = <span class=""hljs-string"">""http://www.google.com/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;docid=nIv5rk2GyP3hXM&amp;tbnid=isiOkMe3nCtexM:&amp;ved=0CAUQjRw&amp;url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&amp;ei=ygZXU_2fGKbMsQTf4YLgAQ&amp;bvm=bv.65177938,d.aWc&amp;psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&amp;ust=1398298682009707""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase2)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase3 = <span class=""hljs-string"">""https://sdfasd""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase3)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase4 = <span class=""hljs-string"">""dfdsfdsfdfdsfsdfs""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase4)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase5 = <span class=""hljs-string"">""magnet:?xt=urn:btih:123""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase5)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase6 = <span class=""hljs-string"">""https://stackoverflow.com/""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase6)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase7 = <span class=""hljs-string"">""https://w""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase7)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase8 = <span class=""hljs-string"">""https://sdfasdp.ppppppppppp""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase8)); <span class=""hljs-comment"">// return false</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2018-04-16 07:36:41Z, License: CC BY-SA 3.0","('101',)","('100800579',)",This fails when the URL has a port.,"('\n                \n                <span class=""comment-copy"">This fails when the URL has a port.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1289167/wedava"" title=""1,201 reputation"" class=""comment-user"">Wedava</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment100800579_49849482"" aria-label=""Link to comment""><span title=""2019-07-22 09:15:45Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 22, 2019 at 9:15</span></a></span>\n            ',)","Jul 22, 2019 at 9:15","('2',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
48,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49849482.0,"I am using below function to validate URL with or without http/https:
function isValidURL(string) {
  var res = string.match(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g);
  return (res !== null)
};

var testCase1 = ""http://en.wikipedia.org/wiki/Procter_&_Gamble"";
console.log(isValidURL(testCase1)); // return true

var testCase2 = ""http://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&docid=nIv5rk2GyP3hXM&tbnid=isiOkMe3nCtexM:&ved=0CAUQjRw&url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&ei=ygZXU_2fGKbMsQTf4YLgAQ&bvm=bv.65177938,d.aWc&psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&ust=1398298682009707"";
console.log(isValidURL(testCase2)); // return true

var testCase3 = ""https://sdfasd"";
console.log(isValidURL(testCase3)); // return false

var testCase4 = ""dfdsfdsfdfdsfsdfs"";
console.log(isValidURL(testCase4)); // return false

var testCase5 = ""magnet:?xt=urn:btih:123"";
console.log(isValidURL(testCase5)); // return false

var testCase6 = ""https://stackoverflow.com/"";
console.log(isValidURL(testCase6)); // return true

var testCase7 = ""https://w"";
console.log(isValidURL(testCase7)); // return false

var testCase8 = ""https://sdfasdp.ppppppppppp"";
console.log(isValidURL(testCase8)); // return false
Run code snippetExpand snippet","('\n<p>I am using below function to validate URL with or without <code>http/https</code>:</p>\n\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">string</span>) {\n  <span class=""hljs-keyword"">var</span> res = string.<span class=""hljs-title function_"">match</span>(<span class=""hljs-regexp"">/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)/g</span>);\n  <span class=""hljs-keyword"">return</span> (res !== <span class=""hljs-literal"">null</span>)\n};\n\n<span class=""hljs-keyword"">var</span> testCase1 = <span class=""hljs-string"">""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase1)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase2 = <span class=""hljs-string"">""http://www.google.com/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;docid=nIv5rk2GyP3hXM&amp;tbnid=isiOkMe3nCtexM:&amp;ved=0CAUQjRw&amp;url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&amp;ei=ygZXU_2fGKbMsQTf4YLgAQ&amp;bvm=bv.65177938,d.aWc&amp;psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&amp;ust=1398298682009707""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase2)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase3 = <span class=""hljs-string"">""https://sdfasd""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase3)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase4 = <span class=""hljs-string"">""dfdsfdsfdfdsfsdfs""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase4)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase5 = <span class=""hljs-string"">""magnet:?xt=urn:btih:123""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase5)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase6 = <span class=""hljs-string"">""https://stackoverflow.com/""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase6)); <span class=""hljs-comment"">// return true</span>\n\n<span class=""hljs-keyword"">var</span> testCase7 = <span class=""hljs-string"">""https://w""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase7)); <span class=""hljs-comment"">// return false</span>\n\n<span class=""hljs-keyword"">var</span> testCase8 = <span class=""hljs-string"">""https://sdfasdp.ppppppppppp""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(testCase8)); <span class=""hljs-comment"">// return false</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2018-04-16 07:36:41Z, License: CC BY-SA 3.0","('101',)","('110378492',)",this code is not validating protocol See your self url = 'htt1ps://googl1e.com' console.log(url + ' -> ' + isValidURL(url)),"('\n                \n                <span class=""comment-copy"">this code is not validating protocol  See your self url = \'htt1ps://googl1e.com\' console.log(url + \' -&gt; \' + isValidURL(url))</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/853598/chirag-visavadiya"" title=""527 reputation"" class=""comment-user"">Chirag Visavadiya</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment110378492_49849482"" aria-label=""Link to comment""><span title=""2020-06-16 14:22:43Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jun 16, 2020 at 14:22</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jun 16, 2020 at 14:22","('1',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
49,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,30229098.0,"To Validate Url using javascript is shown below
function ValidURL(str) {
  var regex = /(?:https?):\/\/(\w+:?\w*)?(\S+)(:\d+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/;
  if(!regex .test(str)) {
    alert(""Please enter valid URL."");
    return false;
  } else {
    return true;
  }
}","('\n<p>To Validate Url using javascript is shown below</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">ValidURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> regex = <span class=""hljs-regexp"">/(?:https?):\\/\\/(\\w+:?\\w*)?(\\S+)(:\\d+)?(\\/|\\/([\\w#!:.?+=&amp;%!\\-\\/]))?/</span>;\n  <span class=""hljs-keyword"">if</span>(!regex .<span class=""hljs-title function_"">test</span>(str)) {\n    <span class=""hljs-title function_"">alert</span>(<span class=""hljs-string"">""Please enter valid URL.""</span>);\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  } <span class=""hljs-keyword"">else</span> {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">true</span>;\n  }\n}\n</code></pre>\n    ',)","2022-04-20 16:52:25Z, License: CC BY-SA 4.0","('51',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
50,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,30229098.0,"To Validate Url using javascript is shown below
function ValidURL(str) {
  var regex = /(?:https?):\/\/(\w+:?\w*)?(\S+)(:\d+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/;
  if(!regex .test(str)) {
    alert(""Please enter valid URL."");
    return false;
  } else {
    return true;
  }
}","('\n<p>To Validate Url using javascript is shown below</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">ValidURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> regex = <span class=""hljs-regexp"">/(?:https?):\\/\\/(\\w+:?\\w*)?(\\S+)(:\\d+)?(\\/|\\/([\\w#!:.?+=&amp;%!\\-\\/]))?/</span>;\n  <span class=""hljs-keyword"">if</span>(!regex .<span class=""hljs-title function_"">test</span>(str)) {\n    <span class=""hljs-title function_"">alert</span>(<span class=""hljs-string"">""Please enter valid URL.""</span>);\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  } <span class=""hljs-keyword"">else</span> {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">true</span>;\n  }\n}\n</code></pre>\n    ',)","2022-04-20 16:52:25Z, License: CC BY-SA 4.0","('51',)","('127127054',)","""mailto:regaltheme@email.com"" this is a link but ur code is not work. How can I fix?","('\n                \n                <span class=""comment-copy"">""mailto:regaltheme@email.com"" this is a link but ur code is not work. How can I fix?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/15302054/tu-le-anh"" title=""109 reputation"" class=""comment-user"">Tu Le Anh</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment127127054_30229098"" aria-label=""Link to comment""><span title=""2022-04-20 16:52:25Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Apr 20, 2022 at 16:52</span></a></span>\n            ',)","Apr 20, 2022 at 16:52","('',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
51,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,30229098.0,"To Validate Url using javascript is shown below
function ValidURL(str) {
  var regex = /(?:https?):\/\/(\w+:?\w*)?(\S+)(:\d+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/;
  if(!regex .test(str)) {
    alert(""Please enter valid URL."");
    return false;
  } else {
    return true;
  }
}","('\n<p>To Validate Url using javascript is shown below</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">ValidURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> regex = <span class=""hljs-regexp"">/(?:https?):\\/\\/(\\w+:?\\w*)?(\\S+)(:\\d+)?(\\/|\\/([\\w#!:.?+=&amp;%!\\-\\/]))?/</span>;\n  <span class=""hljs-keyword"">if</span>(!regex .<span class=""hljs-title function_"">test</span>(str)) {\n    <span class=""hljs-title function_"">alert</span>(<span class=""hljs-string"">""Please enter valid URL.""</span>);\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  } <span class=""hljs-keyword"">else</span> {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">true</span>;\n  }\n}\n</code></pre>\n    ',)","2022-04-20 16:52:25Z, License: CC BY-SA 4.0","('51',)","('127428362',)",URLs that use http or https are only for web addresses. There are a multitude of others that do not use those schemes and they are valid also.,"('\n                \n                <span class=""comment-copy"">URLs that use <code>http</code> or <code>https</code> are only for web addresses. There are a multitude of others that do not use those schemes and they are valid also.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1307074/suncat2000"" title=""946 reputation"" class=""comment-user"">Suncat2000</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment127428362_30229098"" aria-label=""Link to comment""><span title=""2022-05-04 21:25:39Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">May 4, 2022 at 21:25</span></a></span>\n            ',)","May 4, 2022 at 21:25","('',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
52,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,40144504.0,"Rely on a library: https://www.npmjs.com/package/valid-url
import { isWebUri } from 'valid-url';
// ...
if (!isWebUri(url)) {
    return ""Not a valid url."";
}","('\n<p>Rely on a library:\n<a href=""https://www.npmjs.com/package/valid-url"" rel=""noreferrer"">https://www.npmjs.com/package/valid-url</a></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">import</span> { isWebUri } <span class=""hljs-keyword"">from</span> <span class=""hljs-string"">\'valid-url\'</span>;\n<span class=""hljs-comment"">// ...</span>\n<span class=""hljs-keyword"">if</span> (!<span class=""hljs-title function_"">isWebUri</span>(url)) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-string"">""Not a valid url.""</span>;\n}\n</code></pre>\n    ',)","2020-06-19 08:56:20Z, License: CC BY-SA 4.0","('30',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
53,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,40144504.0,"Rely on a library: https://www.npmjs.com/package/valid-url
import { isWebUri } from 'valid-url';
// ...
if (!isWebUri(url)) {
    return ""Not a valid url."";
}","('\n<p>Rely on a library:\n<a href=""https://www.npmjs.com/package/valid-url"" rel=""noreferrer"">https://www.npmjs.com/package/valid-url</a></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">import</span> { isWebUri } <span class=""hljs-keyword"">from</span> <span class=""hljs-string"">\'valid-url\'</span>;\n<span class=""hljs-comment"">// ...</span>\n<span class=""hljs-keyword"">if</span> (!<span class=""hljs-title function_"">isWebUri</span>(url)) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-string"">""Not a valid url.""</span>;\n}\n</code></pre>\n    ',)","2020-06-19 08:56:20Z, License: CC BY-SA 4.0","('30',)","('110473700',)","this one gives me a lot of trouble with weird urls that are actually parsed by the browser, e.g.: having a { in the url","('\n                \n                <span class=""comment-copy"">this one gives me a lot of trouble with weird urls that are actually parsed by the browser, e.g.: having a <code>{</code> in the url</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/842262/willyfrog"" title=""467 reputation"" class=""comment-user"">Willyfrog</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment110473700_40144504"" aria-label=""Link to comment""><span title=""2020-06-19 08:56:20Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jun 19, 2020 at 8:56</span></a></span>\n            ',)","Jun 19, 2020 at 8:56","('2',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
54,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,45567717.0,"Improvement on the accepted answer...
Check for ftp/ftps as protocol
Has double escaping for backslashes (\\)
Ensures that domains have a dot and an extension (.com .io .xyz)
Allows full colon (:) in the path e.g. http://thingiverse.com/download:1894343
Allows ampersand (&) in path e.g http://en.wikipedia.org/wiki/Procter_&_Gamble
Allows @ symbol in path e.g. https://medium.com/@techytimo
isURL(str) {
  var pattern = new RegExp('^((ft|htt)ps?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name and extension
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?'+ // port
  '(\\/[-a-z\\d%@_.~+&:]*)*'+ // path
  '(\\?[;&a-z\\d%@_.,~+&:=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<p>Improvement on the accepted answer...</p>\n\n<ul>\n<li>Check for ftp/ftps as protocol</li>\n<li>Has double escaping for backslashes (\\\\)</li>\n<li>Ensures that domains have a dot and an extension (.com .io .xyz)</li>\n<li>Allows full colon (:) in the path e.g. <a href=""http://thingiverse.com/download:1894343"" rel=""noreferrer"">http://thingiverse.com/download:1894343</a></li>\n<li>Allows ampersand (&amp;) in path e.g <a href=""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Procter_&amp;_Gamble</a></li>\n<li><p>Allows @ symbol in path e.g. <a href=""https://medium.com/@techytimo"" rel=""noreferrer"">https://medium.com/@techytimo</a></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^((ft|htt)ps?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name and extension</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?\'</span>+ <span class=""hljs-comment"">// port</span>\n  <span class=""hljs-string"">\'(\\\\/[-a-z\\\\d%@_.~+&amp;:]*)*\'</span>+ <span class=""hljs-comment"">// path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%@_.,~+&amp;:=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre></li>\n</ul>\n    ',)","2018-04-16 16:23:06Z, License: CC BY-SA 3.0","('27',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
55,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,45567717.0,"Improvement on the accepted answer...
Check for ftp/ftps as protocol
Has double escaping for backslashes (\\)
Ensures that domains have a dot and an extension (.com .io .xyz)
Allows full colon (:) in the path e.g. http://thingiverse.com/download:1894343
Allows ampersand (&) in path e.g http://en.wikipedia.org/wiki/Procter_&_Gamble
Allows @ symbol in path e.g. https://medium.com/@techytimo
isURL(str) {
  var pattern = new RegExp('^((ft|htt)ps?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name and extension
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?'+ // port
  '(\\/[-a-z\\d%@_.~+&:]*)*'+ // path
  '(\\?[;&a-z\\d%@_.,~+&:=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<p>Improvement on the accepted answer...</p>\n\n<ul>\n<li>Check for ftp/ftps as protocol</li>\n<li>Has double escaping for backslashes (\\\\)</li>\n<li>Ensures that domains have a dot and an extension (.com .io .xyz)</li>\n<li>Allows full colon (:) in the path e.g. <a href=""http://thingiverse.com/download:1894343"" rel=""noreferrer"">http://thingiverse.com/download:1894343</a></li>\n<li>Allows ampersand (&amp;) in path e.g <a href=""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Procter_&amp;_Gamble</a></li>\n<li><p>Allows @ symbol in path e.g. <a href=""https://medium.com/@techytimo"" rel=""noreferrer"">https://medium.com/@techytimo</a></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^((ft|htt)ps?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name and extension</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?\'</span>+ <span class=""hljs-comment"">// port</span>\n  <span class=""hljs-string"">\'(\\\\/[-a-z\\\\d%@_.~+&amp;:]*)*\'</span>+ <span class=""hljs-comment"">// path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%@_.,~+&amp;:=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre></li>\n</ul>\n    ',)","2018-04-16 16:23:06Z, License: CC BY-SA 3.0","('27',)","('86739065',)",No it shouldn't be the accepted answer. Like some of the others it hangs on a mere 33 character string: isURL('123456789012345678901234567890123') and fails many edge case tests: foo.com/blah_blah_(wikipedia)_(again) //incorrectly returns false.,"('\n                \n                <span class=""comment-copy"">No it shouldn\'t be the accepted answer. Like some of the others it hangs on a mere 33 character string: isURL(\'123456789012345678901234567890123\') and fails many edge case tests: <a href=""http://foo.com/blah_blah_(wikipedia)_(again)"" rel=""nofollow noreferrer"">foo.com/blah_blah_(wikipedia)_(again)</a> //incorrectly returns false.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3736602/aamarks"" title=""882 reputation"" class=""comment-user"">aamarks</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86739065_45567717"" aria-label=""Link to comment""><span title=""2018-04-16 16:23:06Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 16, 2018 at 16:23</span></a></span>\n            ',)","Apr 16, 2018 at 16:23","('6',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
56,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,45567717.0,"Improvement on the accepted answer...
Check for ftp/ftps as protocol
Has double escaping for backslashes (\\)
Ensures that domains have a dot and an extension (.com .io .xyz)
Allows full colon (:) in the path e.g. http://thingiverse.com/download:1894343
Allows ampersand (&) in path e.g http://en.wikipedia.org/wiki/Procter_&_Gamble
Allows @ symbol in path e.g. https://medium.com/@techytimo
isURL(str) {
  var pattern = new RegExp('^((ft|htt)ps?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name and extension
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?'+ // port
  '(\\/[-a-z\\d%@_.~+&:]*)*'+ // path
  '(\\?[;&a-z\\d%@_.,~+&:=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<p>Improvement on the accepted answer...</p>\n\n<ul>\n<li>Check for ftp/ftps as protocol</li>\n<li>Has double escaping for backslashes (\\\\)</li>\n<li>Ensures that domains have a dot and an extension (.com .io .xyz)</li>\n<li>Allows full colon (:) in the path e.g. <a href=""http://thingiverse.com/download:1894343"" rel=""noreferrer"">http://thingiverse.com/download:1894343</a></li>\n<li>Allows ampersand (&amp;) in path e.g <a href=""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Procter_&amp;_Gamble</a></li>\n<li><p>Allows @ symbol in path e.g. <a href=""https://medium.com/@techytimo"" rel=""noreferrer"">https://medium.com/@techytimo</a></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^((ft|htt)ps?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name and extension</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?\'</span>+ <span class=""hljs-comment"">// port</span>\n  <span class=""hljs-string"">\'(\\\\/[-a-z\\\\d%@_.~+&amp;:]*)*\'</span>+ <span class=""hljs-comment"">// path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%@_.,~+&amp;:=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre></li>\n</ul>\n    ',)","2018-04-16 16:23:06Z, License: CC BY-SA 3.0","('27',)","('92492488',)",That is because localhost:8080 isn't a valid URL.,"('\n                \n                <span class=""comment-copy"">That is because localhost:8080 isn\'t a valid URL.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1158844/shanerk"" title=""4,987 reputation"" class=""comment-user"">Shanerk</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment92492488_45567717"" aria-label=""Link to comment""><span title=""2018-10-12 18:56:35Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Oct 12, 2018 at 18:56</span></a></span>\n            ',)","Oct 12, 2018 at 18:56","('2',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
57,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,45567717.0,"Improvement on the accepted answer...
Check for ftp/ftps as protocol
Has double escaping for backslashes (\\)
Ensures that domains have a dot and an extension (.com .io .xyz)
Allows full colon (:) in the path e.g. http://thingiverse.com/download:1894343
Allows ampersand (&) in path e.g http://en.wikipedia.org/wiki/Procter_&_Gamble
Allows @ symbol in path e.g. https://medium.com/@techytimo
isURL(str) {
  var pattern = new RegExp('^((ft|htt)ps?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name and extension
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?'+ // port
  '(\\/[-a-z\\d%@_.~+&:]*)*'+ // path
  '(\\?[;&a-z\\d%@_.,~+&:=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<p>Improvement on the accepted answer...</p>\n\n<ul>\n<li>Check for ftp/ftps as protocol</li>\n<li>Has double escaping for backslashes (\\\\)</li>\n<li>Ensures that domains have a dot and an extension (.com .io .xyz)</li>\n<li>Allows full colon (:) in the path e.g. <a href=""http://thingiverse.com/download:1894343"" rel=""noreferrer"">http://thingiverse.com/download:1894343</a></li>\n<li>Allows ampersand (&amp;) in path e.g <a href=""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Procter_&amp;_Gamble</a></li>\n<li><p>Allows @ symbol in path e.g. <a href=""https://medium.com/@techytimo"" rel=""noreferrer"">https://medium.com/@techytimo</a></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^((ft|htt)ps?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name and extension</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?\'</span>+ <span class=""hljs-comment"">// port</span>\n  <span class=""hljs-string"">\'(\\\\/[-a-z\\\\d%@_.~+&amp;:]*)*\'</span>+ <span class=""hljs-comment"">// path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%@_.,~+&amp;:=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre></li>\n</ul>\n    ',)","2018-04-16 16:23:06Z, License: CC BY-SA 3.0","('27',)","('92492766',)",Working sample: runkit.com/shanekenyon87/5bc0e57263c77b0012db05dc,"('\n                \n                <span class=""comment-copy"">Working sample: <a href=""https://runkit.com/shanekenyon87/5bc0e57263c77b0012db05dc"" rel=""nofollow noreferrer"">runkit.com/shanekenyon87/5bc0e57263c77b0012db05dc</a></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1158844/shanerk"" title=""4,987 reputation"" class=""comment-user"">Shanerk</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment92492766_45567717"" aria-label=""Link to comment""><span title=""2018-10-12 19:07:10Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Oct 12, 2018 at 19:07</span></a></span>\n            ',)","Oct 12, 2018 at 19:07","('1',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
58,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,45567717.0,"Improvement on the accepted answer...
Check for ftp/ftps as protocol
Has double escaping for backslashes (\\)
Ensures that domains have a dot and an extension (.com .io .xyz)
Allows full colon (:) in the path e.g. http://thingiverse.com/download:1894343
Allows ampersand (&) in path e.g http://en.wikipedia.org/wiki/Procter_&_Gamble
Allows @ symbol in path e.g. https://medium.com/@techytimo
isURL(str) {
  var pattern = new RegExp('^((ft|htt)ps?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name and extension
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?'+ // port
  '(\\/[-a-z\\d%@_.~+&:]*)*'+ // path
  '(\\?[;&a-z\\d%@_.,~+&:=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<p>Improvement on the accepted answer...</p>\n\n<ul>\n<li>Check for ftp/ftps as protocol</li>\n<li>Has double escaping for backslashes (\\\\)</li>\n<li>Ensures that domains have a dot and an extension (.com .io .xyz)</li>\n<li>Allows full colon (:) in the path e.g. <a href=""http://thingiverse.com/download:1894343"" rel=""noreferrer"">http://thingiverse.com/download:1894343</a></li>\n<li>Allows ampersand (&amp;) in path e.g <a href=""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Procter_&amp;_Gamble</a></li>\n<li><p>Allows @ symbol in path e.g. <a href=""https://medium.com/@techytimo"" rel=""noreferrer"">https://medium.com/@techytimo</a></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^((ft|htt)ps?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name and extension</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?\'</span>+ <span class=""hljs-comment"">// port</span>\n  <span class=""hljs-string"">\'(\\\\/[-a-z\\\\d%@_.~+&amp;:]*)*\'</span>+ <span class=""hljs-comment"">// path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%@_.,~+&amp;:=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre></li>\n</ul>\n    ',)","2018-04-16 16:23:06Z, License: CC BY-SA 3.0","('27',)","('96035035',)",Should be ftps://localhost:8080 =),"('\n                \n                <span class=""comment-copy"">Should be ftps://localhost:8080 =)</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2110496/vp-arth"" title=""14,353 reputation"" class=""comment-user"">vp_arth</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment96035035_45567717"" aria-label=""Link to comment""><span title=""2019-02-10 21:22:28Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Feb 10, 2019 at 21:22</span></a></span>\n            ',)","Feb 10, 2019 at 21:22","('',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
59,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,45567717.0,"Improvement on the accepted answer...
Check for ftp/ftps as protocol
Has double escaping for backslashes (\\)
Ensures that domains have a dot and an extension (.com .io .xyz)
Allows full colon (:) in the path e.g. http://thingiverse.com/download:1894343
Allows ampersand (&) in path e.g http://en.wikipedia.org/wiki/Procter_&_Gamble
Allows @ symbol in path e.g. https://medium.com/@techytimo
isURL(str) {
  var pattern = new RegExp('^((ft|htt)ps?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name and extension
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?'+ // port
  '(\\/[-a-z\\d%@_.~+&:]*)*'+ // path
  '(\\?[;&a-z\\d%@_.,~+&:=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}","('\n<p>Improvement on the accepted answer...</p>\n\n<ul>\n<li>Check for ftp/ftps as protocol</li>\n<li>Has double escaping for backslashes (\\\\)</li>\n<li>Ensures that domains have a dot and an extension (.com .io .xyz)</li>\n<li>Allows full colon (:) in the path e.g. <a href=""http://thingiverse.com/download:1894343"" rel=""noreferrer"">http://thingiverse.com/download:1894343</a></li>\n<li>Allows ampersand (&amp;) in path e.g <a href=""http://en.wikipedia.org/wiki/Procter_&amp;_Gamble"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Procter_&amp;_Gamble</a></li>\n<li><p>Allows @ symbol in path e.g. <a href=""https://medium.com/@techytimo"" rel=""noreferrer"">https://medium.com/@techytimo</a></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^((ft|htt)ps?:\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n  <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name and extension</span>\n  <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n  <span class=""hljs-string"">\'(\\\\:\\\\d+)?\'</span>+ <span class=""hljs-comment"">// port</span>\n  <span class=""hljs-string"">\'(\\\\/[-a-z\\\\d%@_.~+&amp;:]*)*\'</span>+ <span class=""hljs-comment"">// path</span>\n  <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%@_.,~+&amp;:=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n  <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locator</span>\n  <span class=""hljs-keyword"">return</span> pattern.<span class=""hljs-title function_"">test</span>(str);\n}\n</code></pre></li>\n</ul>\n    ',)","2018-04-16 16:23:06Z, License: CC BY-SA 3.0","('27',)","('97526448',)",It doesn't seem to work: hangs on long input (like @aanmarks said),"('\n                \n                <span class=""comment-copy"">It doesn\'t seem to work: hangs on long input (like @aanmarks said)</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1092608/cecemel"" title=""606 reputation"" class=""comment-user"">cecemel</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment97526448_45567717"" aria-label=""Link to comment""><span title=""2019-03-28 16:50:41Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Mar 28, 2019 at 16:50</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Mar 28, 2019 at 16:50","('1',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
60,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49283749.0,"You can use the URL native API:
  const isUrl = string => {
      try { return Boolean(new URL(string)); }
      catch(e){ return false; }
  }","('\n<p>You can use the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer"">URL native API</a>:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">isUrl</span> = string =&gt; {\n      <span class=""hljs-keyword"">try</span> { <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Boolean</span>(<span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">URL</span>(string)); }\n      <span class=""hljs-keyword"">catch</span>(e){ <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>; }\n  }\n</code></pre>\n    ',)","2018-04-16 21:28:26Z, License: CC BY-SA 3.0","('24',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
61,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49283749.0,"You can use the URL native API:
  const isUrl = string => {
      try { return Boolean(new URL(string)); }
      catch(e){ return false; }
  }","('\n<p>You can use the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer"">URL native API</a>:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">isUrl</span> = string =&gt; {\n      <span class=""hljs-keyword"">try</span> { <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Boolean</span>(<span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">URL</span>(string)); }\n      <span class=""hljs-keyword"">catch</span>(e){ <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>; }\n  }\n</code></pre>\n    ',)","2018-04-16 21:28:26Z, License: CC BY-SA 3.0","('24',)","('86748480',)","Looks very similar to the answer provided by @pavlo, only variable names changed ;)","('\n                \n                <span class=""comment-copy"">Looks very similar to the answer provided by @pavlo, only variable names changed ;)</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/9276329/munim-munna"" title=""17,240 reputation"" class=""comment-user"">Munim Munna</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86748480_49283749"" aria-label=""Link to comment""><span title=""2018-04-16 21:28:26Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 16, 2018 at 21:28</span></a></span>\n            ',)","Apr 16, 2018 at 21:28","('4',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
62,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49283749.0,"You can use the URL native API:
  const isUrl = string => {
      try { return Boolean(new URL(string)); }
      catch(e){ return false; }
  }","('\n<p>You can use the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer"">URL native API</a>:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">isUrl</span> = string =&gt; {\n      <span class=""hljs-keyword"">try</span> { <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Boolean</span>(<span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">URL</span>(string)); }\n      <span class=""hljs-keyword"">catch</span>(e){ <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>; }\n  }\n</code></pre>\n    ',)","2018-04-16 21:28:26Z, License: CC BY-SA 3.0","('24',)","('91344233',)",there should really be a simple native method to check for this by now - this answer looked very promising but it returns true early as @Basj mentioned above.,"('\n                \n                <span class=""comment-copy"">there should really be a simple native method to check for this by now - this answer looked very promising but it returns true early as @Basj mentioned above.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1220243/zero-cool"" title=""3,870 reputation"" class=""comment-user"">zero_cool</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment91344233_49283749"" aria-label=""Link to comment""><span title=""2018-09-06 06:11:40Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Sep 6, 2018 at 6:11</span></a></span>\n            ',)","Sep 6, 2018 at 6:11","('2',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
63,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,56715630.0,"Use validator.js
ES6
import isURL from 'validator/lib/isURL'

isURL(string)
No ES6
var validator = require('validator');

validator.isURL(string)
You can also fine tune this function's behavior by passing optional options object as the second argument of isURL
Here is the default options object:
let options = {
    protocols: [
        'http',
        'https',
        'ftp'
    ],
    require_tld: true,
    require_protocol: false,
    require_host: true,
    require_valid_protocol: true,
    allow_underscores: false,
    host_whitelist: false,
    host_blacklist: false,
    allow_trailing_dot: false,
    allow_protocol_relative_urls: false,
    disallow_auth: false
}

isURL(string, options)
host_whitelist and host_blacklist can be arrays of hosts. They also support regular expressions.
let options = {
    host_blacklist: ['foo.com', 'bar.com'],
}

isURL('http://foobar.com', options) // => true
isURL('http://foo.bar.com/', options) // => true
isURL('http://qux.com', options) // => true

isURL('http://bar.com/', options) // => false
isURL('http://foo.com/', options) // => false


options = {
    host_blacklist: ['bar.com', 'foo.com', /\.foo\.com$/],
}

isURL('http://foobar.com', options) // => true
isURL('http://foo.bar.com/', options) // => true
isURL('http://qux.com', options) // => true

isURL('http://bar.com/', options) // => false
isURL('http://foo.com/', options) // => false
isURL('http://images.foo.com/', options) // => false
isURL('http://cdn.foo.com/', options) // => false
isURL('http://a.b.c.foo.com/', options) // => false","('\n<p>Use <a href=""https://github.com/chriso/validator.js"" rel=""noreferrer"">validator.js</a></p>\n\n<p><strong>ES6</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">import</span> isURL <span class=""hljs-keyword"">from</span> <span class=""hljs-string"">\'validator/lib/isURL\'</span>\n\n<span class=""hljs-title function_"">isURL</span>(string)\n</code></pre>\n\n<p><strong>No ES6</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> validator = <span class=""hljs-built_in"">require</span>(<span class=""hljs-string"">\'validator\'</span>);\n\nvalidator.<span class=""hljs-title function_"">isURL</span>(string)\n</code></pre>\n\n<p>You can also fine tune this function\'s behavior by passing optional <code>options</code> object as the second argument of <code>isURL</code></p>\n\n<p>Here is the default <code>options</code> object:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> options = {\n    <span class=""hljs-attr"">protocols</span>: [\n        <span class=""hljs-string"">\'http\'</span>,\n        <span class=""hljs-string"">\'https\'</span>,\n        <span class=""hljs-string"">\'ftp\'</span>\n    ],\n    <span class=""hljs-attr"">require_tld</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">require_protocol</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">require_host</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">require_valid_protocol</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">allow_underscores</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">host_whitelist</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">host_blacklist</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">allow_trailing_dot</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">allow_protocol_relative_urls</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">disallow_auth</span>: <span class=""hljs-literal"">false</span>\n}\n\n<span class=""hljs-title function_"">isURL</span>(string, options)\n</code></pre>\n\n<p><code>host_whitelist</code> and <code>host_blacklist</code> can be arrays of hosts. They also support regular expressions.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> options = {\n    <span class=""hljs-attr"">host_blacklist</span>: [<span class=""hljs-string"">\'foo.com\'</span>, <span class=""hljs-string"">\'bar.com\'</span>],\n}\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foobar.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://qux.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n\n\noptions = {\n    <span class=""hljs-attr"">host_blacklist</span>: [<span class=""hljs-string"">\'bar.com\'</span>, <span class=""hljs-string"">\'foo.com\'</span>, <span class=""hljs-regexp"">/\\.foo\\.com$/</span>],\n}\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foobar.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://qux.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://images.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://cdn.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://a.b.c.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n</code></pre>\n    ',)","2020-03-26 02:07:15Z, License: CC BY-SA 4.0","('16',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
64,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,56715630.0,"Use validator.js
ES6
import isURL from 'validator/lib/isURL'

isURL(string)
No ES6
var validator = require('validator');

validator.isURL(string)
You can also fine tune this function's behavior by passing optional options object as the second argument of isURL
Here is the default options object:
let options = {
    protocols: [
        'http',
        'https',
        'ftp'
    ],
    require_tld: true,
    require_protocol: false,
    require_host: true,
    require_valid_protocol: true,
    allow_underscores: false,
    host_whitelist: false,
    host_blacklist: false,
    allow_trailing_dot: false,
    allow_protocol_relative_urls: false,
    disallow_auth: false
}

isURL(string, options)
host_whitelist and host_blacklist can be arrays of hosts. They also support regular expressions.
let options = {
    host_blacklist: ['foo.com', 'bar.com'],
}

isURL('http://foobar.com', options) // => true
isURL('http://foo.bar.com/', options) // => true
isURL('http://qux.com', options) // => true

isURL('http://bar.com/', options) // => false
isURL('http://foo.com/', options) // => false


options = {
    host_blacklist: ['bar.com', 'foo.com', /\.foo\.com$/],
}

isURL('http://foobar.com', options) // => true
isURL('http://foo.bar.com/', options) // => true
isURL('http://qux.com', options) // => true

isURL('http://bar.com/', options) // => false
isURL('http://foo.com/', options) // => false
isURL('http://images.foo.com/', options) // => false
isURL('http://cdn.foo.com/', options) // => false
isURL('http://a.b.c.foo.com/', options) // => false","('\n<p>Use <a href=""https://github.com/chriso/validator.js"" rel=""noreferrer"">validator.js</a></p>\n\n<p><strong>ES6</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">import</span> isURL <span class=""hljs-keyword"">from</span> <span class=""hljs-string"">\'validator/lib/isURL\'</span>\n\n<span class=""hljs-title function_"">isURL</span>(string)\n</code></pre>\n\n<p><strong>No ES6</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> validator = <span class=""hljs-built_in"">require</span>(<span class=""hljs-string"">\'validator\'</span>);\n\nvalidator.<span class=""hljs-title function_"">isURL</span>(string)\n</code></pre>\n\n<p>You can also fine tune this function\'s behavior by passing optional <code>options</code> object as the second argument of <code>isURL</code></p>\n\n<p>Here is the default <code>options</code> object:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> options = {\n    <span class=""hljs-attr"">protocols</span>: [\n        <span class=""hljs-string"">\'http\'</span>,\n        <span class=""hljs-string"">\'https\'</span>,\n        <span class=""hljs-string"">\'ftp\'</span>\n    ],\n    <span class=""hljs-attr"">require_tld</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">require_protocol</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">require_host</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">require_valid_protocol</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">allow_underscores</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">host_whitelist</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">host_blacklist</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">allow_trailing_dot</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">allow_protocol_relative_urls</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">disallow_auth</span>: <span class=""hljs-literal"">false</span>\n}\n\n<span class=""hljs-title function_"">isURL</span>(string, options)\n</code></pre>\n\n<p><code>host_whitelist</code> and <code>host_blacklist</code> can be arrays of hosts. They also support regular expressions.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> options = {\n    <span class=""hljs-attr"">host_blacklist</span>: [<span class=""hljs-string"">\'foo.com\'</span>, <span class=""hljs-string"">\'bar.com\'</span>],\n}\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foobar.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://qux.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n\n\noptions = {\n    <span class=""hljs-attr"">host_blacklist</span>: [<span class=""hljs-string"">\'bar.com\'</span>, <span class=""hljs-string"">\'foo.com\'</span>, <span class=""hljs-regexp"">/\\.foo\\.com$/</span>],\n}\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foobar.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://qux.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://images.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://cdn.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://a.b.c.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n</code></pre>\n    ',)","2020-03-26 02:07:15Z, License: CC BY-SA 4.0","('16',)","('107677837',)","Nice! Small library (less than 40k minified), popular library (over 3M weekly downloads on npm), gives you tons of flexibility on specifying the validity of the URLs for your particular use case, and has a number of other validators besides URL. This is by far the best answer, IMHO.","('\n                \n                <span class=""comment-copy"">Nice! Small library (less than 40k minified), popular library (over 3M weekly downloads on npm), gives you tons of flexibility on specifying the validity of the URLs for your particular use case, and has a number of other validators besides URL. This is by far the best answer, IMHO.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/254046/javid-jamae"" title=""8,683 reputation"" class=""comment-user"">Javid Jamae</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment107677837_56715630"" aria-label=""Link to comment""><span title=""2020-03-26 02:07:15Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Mar 26, 2020 at 2:07</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Mar 26, 2020 at 2:07","('4',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
65,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,56715630.0,"Use validator.js
ES6
import isURL from 'validator/lib/isURL'

isURL(string)
No ES6
var validator = require('validator');

validator.isURL(string)
You can also fine tune this function's behavior by passing optional options object as the second argument of isURL
Here is the default options object:
let options = {
    protocols: [
        'http',
        'https',
        'ftp'
    ],
    require_tld: true,
    require_protocol: false,
    require_host: true,
    require_valid_protocol: true,
    allow_underscores: false,
    host_whitelist: false,
    host_blacklist: false,
    allow_trailing_dot: false,
    allow_protocol_relative_urls: false,
    disallow_auth: false
}

isURL(string, options)
host_whitelist and host_blacklist can be arrays of hosts. They also support regular expressions.
let options = {
    host_blacklist: ['foo.com', 'bar.com'],
}

isURL('http://foobar.com', options) // => true
isURL('http://foo.bar.com/', options) // => true
isURL('http://qux.com', options) // => true

isURL('http://bar.com/', options) // => false
isURL('http://foo.com/', options) // => false


options = {
    host_blacklist: ['bar.com', 'foo.com', /\.foo\.com$/],
}

isURL('http://foobar.com', options) // => true
isURL('http://foo.bar.com/', options) // => true
isURL('http://qux.com', options) // => true

isURL('http://bar.com/', options) // => false
isURL('http://foo.com/', options) // => false
isURL('http://images.foo.com/', options) // => false
isURL('http://cdn.foo.com/', options) // => false
isURL('http://a.b.c.foo.com/', options) // => false","('\n<p>Use <a href=""https://github.com/chriso/validator.js"" rel=""noreferrer"">validator.js</a></p>\n\n<p><strong>ES6</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">import</span> isURL <span class=""hljs-keyword"">from</span> <span class=""hljs-string"">\'validator/lib/isURL\'</span>\n\n<span class=""hljs-title function_"">isURL</span>(string)\n</code></pre>\n\n<p><strong>No ES6</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> validator = <span class=""hljs-built_in"">require</span>(<span class=""hljs-string"">\'validator\'</span>);\n\nvalidator.<span class=""hljs-title function_"">isURL</span>(string)\n</code></pre>\n\n<p>You can also fine tune this function\'s behavior by passing optional <code>options</code> object as the second argument of <code>isURL</code></p>\n\n<p>Here is the default <code>options</code> object:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> options = {\n    <span class=""hljs-attr"">protocols</span>: [\n        <span class=""hljs-string"">\'http\'</span>,\n        <span class=""hljs-string"">\'https\'</span>,\n        <span class=""hljs-string"">\'ftp\'</span>\n    ],\n    <span class=""hljs-attr"">require_tld</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">require_protocol</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">require_host</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">require_valid_protocol</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">allow_underscores</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">host_whitelist</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">host_blacklist</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">allow_trailing_dot</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">allow_protocol_relative_urls</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">disallow_auth</span>: <span class=""hljs-literal"">false</span>\n}\n\n<span class=""hljs-title function_"">isURL</span>(string, options)\n</code></pre>\n\n<p><code>host_whitelist</code> and <code>host_blacklist</code> can be arrays of hosts. They also support regular expressions.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> options = {\n    <span class=""hljs-attr"">host_blacklist</span>: [<span class=""hljs-string"">\'foo.com\'</span>, <span class=""hljs-string"">\'bar.com\'</span>],\n}\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foobar.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://qux.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n\n\noptions = {\n    <span class=""hljs-attr"">host_blacklist</span>: [<span class=""hljs-string"">\'bar.com\'</span>, <span class=""hljs-string"">\'foo.com\'</span>, <span class=""hljs-regexp"">/\\.foo\\.com$/</span>],\n}\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foobar.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://qux.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://images.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://cdn.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://a.b.c.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n</code></pre>\n    ',)","2020-03-26 02:07:15Z, License: CC BY-SA 4.0","('16',)","('115103331',)",Nice library. It can validate URL but also many other things.,"('\n                \n                <span class=""comment-copy"">Nice library. It can validate URL but also many other things.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1423806/bemipefe"" title=""1,357 reputation"" class=""comment-user"">Bemipefe</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment115103331_56715630"" aria-label=""Link to comment""><span title=""2020-12-02 11:09:31Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Dec 2, 2020 at 11:09</span></a></span>\n            ',)","Dec 2, 2020 at 11:09","('1',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
66,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,56715630.0,"Use validator.js
ES6
import isURL from 'validator/lib/isURL'

isURL(string)
No ES6
var validator = require('validator');

validator.isURL(string)
You can also fine tune this function's behavior by passing optional options object as the second argument of isURL
Here is the default options object:
let options = {
    protocols: [
        'http',
        'https',
        'ftp'
    ],
    require_tld: true,
    require_protocol: false,
    require_host: true,
    require_valid_protocol: true,
    allow_underscores: false,
    host_whitelist: false,
    host_blacklist: false,
    allow_trailing_dot: false,
    allow_protocol_relative_urls: false,
    disallow_auth: false
}

isURL(string, options)
host_whitelist and host_blacklist can be arrays of hosts. They also support regular expressions.
let options = {
    host_blacklist: ['foo.com', 'bar.com'],
}

isURL('http://foobar.com', options) // => true
isURL('http://foo.bar.com/', options) // => true
isURL('http://qux.com', options) // => true

isURL('http://bar.com/', options) // => false
isURL('http://foo.com/', options) // => false


options = {
    host_blacklist: ['bar.com', 'foo.com', /\.foo\.com$/],
}

isURL('http://foobar.com', options) // => true
isURL('http://foo.bar.com/', options) // => true
isURL('http://qux.com', options) // => true

isURL('http://bar.com/', options) // => false
isURL('http://foo.com/', options) // => false
isURL('http://images.foo.com/', options) // => false
isURL('http://cdn.foo.com/', options) // => false
isURL('http://a.b.c.foo.com/', options) // => false","('\n<p>Use <a href=""https://github.com/chriso/validator.js"" rel=""noreferrer"">validator.js</a></p>\n\n<p><strong>ES6</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">import</span> isURL <span class=""hljs-keyword"">from</span> <span class=""hljs-string"">\'validator/lib/isURL\'</span>\n\n<span class=""hljs-title function_"">isURL</span>(string)\n</code></pre>\n\n<p><strong>No ES6</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> validator = <span class=""hljs-built_in"">require</span>(<span class=""hljs-string"">\'validator\'</span>);\n\nvalidator.<span class=""hljs-title function_"">isURL</span>(string)\n</code></pre>\n\n<p>You can also fine tune this function\'s behavior by passing optional <code>options</code> object as the second argument of <code>isURL</code></p>\n\n<p>Here is the default <code>options</code> object:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> options = {\n    <span class=""hljs-attr"">protocols</span>: [\n        <span class=""hljs-string"">\'http\'</span>,\n        <span class=""hljs-string"">\'https\'</span>,\n        <span class=""hljs-string"">\'ftp\'</span>\n    ],\n    <span class=""hljs-attr"">require_tld</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">require_protocol</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">require_host</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">require_valid_protocol</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">allow_underscores</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">host_whitelist</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">host_blacklist</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">allow_trailing_dot</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">allow_protocol_relative_urls</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">disallow_auth</span>: <span class=""hljs-literal"">false</span>\n}\n\n<span class=""hljs-title function_"">isURL</span>(string, options)\n</code></pre>\n\n<p><code>host_whitelist</code> and <code>host_blacklist</code> can be arrays of hosts. They also support regular expressions.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> options = {\n    <span class=""hljs-attr"">host_blacklist</span>: [<span class=""hljs-string"">\'foo.com\'</span>, <span class=""hljs-string"">\'bar.com\'</span>],\n}\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foobar.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://qux.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n\n\noptions = {\n    <span class=""hljs-attr"">host_blacklist</span>: [<span class=""hljs-string"">\'bar.com\'</span>, <span class=""hljs-string"">\'foo.com\'</span>, <span class=""hljs-regexp"">/\\.foo\\.com$/</span>],\n}\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foobar.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://qux.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://images.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://cdn.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://a.b.c.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n</code></pre>\n    ',)","2020-03-26 02:07:15Z, License: CC BY-SA 4.0","('16',)","('119507627',)",This worked for me when creating a New Relic Synthetics script. Very useful.,"('\n                \n                <span class=""comment-copy"">This worked for me when creating a New Relic Synthetics script. Very useful.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1167354/paul-wenzel"" title=""1,836 reputation"" class=""comment-user"">Paul Wenzel</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment119507627_56715630"" aria-label=""Link to comment""><span title=""2021-05-19 23:19:46Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">May 19, 2021 at 23:19</span></a></span>\n            ',)","May 19, 2021 at 23:19","('1',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
67,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,56715630.0,"Use validator.js
ES6
import isURL from 'validator/lib/isURL'

isURL(string)
No ES6
var validator = require('validator');

validator.isURL(string)
You can also fine tune this function's behavior by passing optional options object as the second argument of isURL
Here is the default options object:
let options = {
    protocols: [
        'http',
        'https',
        'ftp'
    ],
    require_tld: true,
    require_protocol: false,
    require_host: true,
    require_valid_protocol: true,
    allow_underscores: false,
    host_whitelist: false,
    host_blacklist: false,
    allow_trailing_dot: false,
    allow_protocol_relative_urls: false,
    disallow_auth: false
}

isURL(string, options)
host_whitelist and host_blacklist can be arrays of hosts. They also support regular expressions.
let options = {
    host_blacklist: ['foo.com', 'bar.com'],
}

isURL('http://foobar.com', options) // => true
isURL('http://foo.bar.com/', options) // => true
isURL('http://qux.com', options) // => true

isURL('http://bar.com/', options) // => false
isURL('http://foo.com/', options) // => false


options = {
    host_blacklist: ['bar.com', 'foo.com', /\.foo\.com$/],
}

isURL('http://foobar.com', options) // => true
isURL('http://foo.bar.com/', options) // => true
isURL('http://qux.com', options) // => true

isURL('http://bar.com/', options) // => false
isURL('http://foo.com/', options) // => false
isURL('http://images.foo.com/', options) // => false
isURL('http://cdn.foo.com/', options) // => false
isURL('http://a.b.c.foo.com/', options) // => false","('\n<p>Use <a href=""https://github.com/chriso/validator.js"" rel=""noreferrer"">validator.js</a></p>\n\n<p><strong>ES6</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">import</span> isURL <span class=""hljs-keyword"">from</span> <span class=""hljs-string"">\'validator/lib/isURL\'</span>\n\n<span class=""hljs-title function_"">isURL</span>(string)\n</code></pre>\n\n<p><strong>No ES6</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> validator = <span class=""hljs-built_in"">require</span>(<span class=""hljs-string"">\'validator\'</span>);\n\nvalidator.<span class=""hljs-title function_"">isURL</span>(string)\n</code></pre>\n\n<p>You can also fine tune this function\'s behavior by passing optional <code>options</code> object as the second argument of <code>isURL</code></p>\n\n<p>Here is the default <code>options</code> object:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> options = {\n    <span class=""hljs-attr"">protocols</span>: [\n        <span class=""hljs-string"">\'http\'</span>,\n        <span class=""hljs-string"">\'https\'</span>,\n        <span class=""hljs-string"">\'ftp\'</span>\n    ],\n    <span class=""hljs-attr"">require_tld</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">require_protocol</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">require_host</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">require_valid_protocol</span>: <span class=""hljs-literal"">true</span>,\n    <span class=""hljs-attr"">allow_underscores</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">host_whitelist</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">host_blacklist</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">allow_trailing_dot</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">allow_protocol_relative_urls</span>: <span class=""hljs-literal"">false</span>,\n    <span class=""hljs-attr"">disallow_auth</span>: <span class=""hljs-literal"">false</span>\n}\n\n<span class=""hljs-title function_"">isURL</span>(string, options)\n</code></pre>\n\n<p><code>host_whitelist</code> and <code>host_blacklist</code> can be arrays of hosts. They also support regular expressions.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> options = {\n    <span class=""hljs-attr"">host_blacklist</span>: [<span class=""hljs-string"">\'foo.com\'</span>, <span class=""hljs-string"">\'bar.com\'</span>],\n}\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foobar.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://qux.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n\n\noptions = {\n    <span class=""hljs-attr"">host_blacklist</span>: [<span class=""hljs-string"">\'bar.com\'</span>, <span class=""hljs-string"">\'foo.com\'</span>, <span class=""hljs-regexp"">/\\.foo\\.com$/</span>],\n}\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foobar.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://qux.com\'</span>, options) <span class=""hljs-comment"">// =&gt; true</span>\n\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://bar.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://images.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://cdn.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">\'http://a.b.c.foo.com/\'</span>, options) <span class=""hljs-comment"">// =&gt; false</span>\n</code></pre>\n    ',)","2020-03-26 02:07:15Z, License: CC BY-SA 4.0","('16',)","('121099923',)",The best solution by far,"('\n                \n                <span class=""comment-copy"">The best solution by far</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1320415/luciano-fantuzzi"" title=""906 reputation"" class=""comment-user"">Luciano Fantuzzi</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment121099923_56715630"" aria-label=""Link to comment""><span title=""2021-07-25 22:15:06Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 25, 2021 at 22:15</span></a></span>\n            ',)","Jul 25, 2021 at 22:15","('1',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
68,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49909903.0,"Here is yet another method.
// ***note***: if the incoming value is empty(""""), the function returns true

var elm;
function isValidURL(u){
  //A precaution/solution for the problem written in the ***note***
  if(u!==""""){  
      if(!elm){
      elm = document.createElement('input');
      elm.setAttribute('type', 'url');
      }
  elm.value = u;
  return elm.validity.valid;
  }
  else{
      return false
  }
}

console.log(isValidURL(''));
console.log(isValidURL('http://www.google.com/'));
console.log(isValidURL('//google.com'));
console.log(isValidURL('google.com'));
console.log(isValidURL('localhost:8000'));
Run code snippetExpand snippet","('\n<p>Here is yet another method.</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// ***note***: if the incoming value is empty(""""), the function returns true</span>\n\n<span class=""hljs-keyword"">var</span> elm;\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">u</span>){\n  <span class=""hljs-comment"">//A precaution/solution for the problem written in the ***note***</span>\n  <span class=""hljs-keyword"">if</span>(u!==<span class=""hljs-string"">""""</span>){  \n      <span class=""hljs-keyword"">if</span>(!elm){\n      elm = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'input\'</span>);\n      elm.<span class=""hljs-title function_"">setAttribute</span>(<span class=""hljs-string"">\'type\'</span>, <span class=""hljs-string"">\'url\'</span>);\n      }\n  elm.<span class=""hljs-property"">value</span> = u;\n  <span class=""hljs-keyword"">return</span> elm.<span class=""hljs-property"">validity</span>.<span class=""hljs-property"">valid</span>;\n  }\n  <span class=""hljs-keyword"">else</span>{\n      <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>\n  }\n}\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'http://www.google.com/\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'//google.com\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'google.com\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'localhost:8000\'</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif3"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2018-04-23 22:05:42Z, License: CC BY-SA 3.0","('15',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
69,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49909903.0,"Here is yet another method.
// ***note***: if the incoming value is empty(""""), the function returns true

var elm;
function isValidURL(u){
  //A precaution/solution for the problem written in the ***note***
  if(u!==""""){  
      if(!elm){
      elm = document.createElement('input');
      elm.setAttribute('type', 'url');
      }
  elm.value = u;
  return elm.validity.valid;
  }
  else{
      return false
  }
}

console.log(isValidURL(''));
console.log(isValidURL('http://www.google.com/'));
console.log(isValidURL('//google.com'));
console.log(isValidURL('google.com'));
console.log(isValidURL('localhost:8000'));
Run code snippetExpand snippet","('\n<p>Here is yet another method.</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// ***note***: if the incoming value is empty(""""), the function returns true</span>\n\n<span class=""hljs-keyword"">var</span> elm;\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">u</span>){\n  <span class=""hljs-comment"">//A precaution/solution for the problem written in the ***note***</span>\n  <span class=""hljs-keyword"">if</span>(u!==<span class=""hljs-string"">""""</span>){  \n      <span class=""hljs-keyword"">if</span>(!elm){\n      elm = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'input\'</span>);\n      elm.<span class=""hljs-title function_"">setAttribute</span>(<span class=""hljs-string"">\'type\'</span>, <span class=""hljs-string"">\'url\'</span>);\n      }\n  elm.<span class=""hljs-property"">value</span> = u;\n  <span class=""hljs-keyword"">return</span> elm.<span class=""hljs-property"">validity</span>.<span class=""hljs-property"">valid</span>;\n  }\n  <span class=""hljs-keyword"">else</span>{\n      <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>\n  }\n}\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'http://www.google.com/\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'//google.com\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'google.com\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'localhost:8000\'</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif3"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2018-04-23 22:05:42Z, License: CC BY-SA 3.0","('15',)","('86997785',)","Educational code! The mechanism here is probably identical to how new URL(string) in Pavlo's code works. Both tests have identical results with all the edge cases I tested. I like his code because it is simpler and doesn't involve creating elements, but yours is a few times faster (probably because it doesn't create the el after the first use).","('\n                \n                <span class=""comment-copy"">Educational code! The mechanism here is probably identical to how <code>new URL(string)</code> in Pavlo\'s code works. Both tests have identical results with all the edge cases I tested. I like his code because it is simpler and doesn\'t involve creating elements, but yours is a few times faster (probably because it doesn\'t create the el after the first use).</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3736602/aamarks"" title=""882 reputation"" class=""comment-user"">aamarks</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86997785_49909903"" aria-label=""Link to comment""><span title=""2018-04-23 22:05:42Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 23, 2018 at 22:05</span></a></span>\n            ',)","Apr 23, 2018 at 22:05","('',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
70,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49909903.0,"Here is yet another method.
// ***note***: if the incoming value is empty(""""), the function returns true

var elm;
function isValidURL(u){
  //A precaution/solution for the problem written in the ***note***
  if(u!==""""){  
      if(!elm){
      elm = document.createElement('input');
      elm.setAttribute('type', 'url');
      }
  elm.value = u;
  return elm.validity.valid;
  }
  else{
      return false
  }
}

console.log(isValidURL(''));
console.log(isValidURL('http://www.google.com/'));
console.log(isValidURL('//google.com'));
console.log(isValidURL('google.com'));
console.log(isValidURL('localhost:8000'));
Run code snippetExpand snippet","('\n<p>Here is yet another method.</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// ***note***: if the incoming value is empty(""""), the function returns true</span>\n\n<span class=""hljs-keyword"">var</span> elm;\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">u</span>){\n  <span class=""hljs-comment"">//A precaution/solution for the problem written in the ***note***</span>\n  <span class=""hljs-keyword"">if</span>(u!==<span class=""hljs-string"">""""</span>){  \n      <span class=""hljs-keyword"">if</span>(!elm){\n      elm = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'input\'</span>);\n      elm.<span class=""hljs-title function_"">setAttribute</span>(<span class=""hljs-string"">\'type\'</span>, <span class=""hljs-string"">\'url\'</span>);\n      }\n  elm.<span class=""hljs-property"">value</span> = u;\n  <span class=""hljs-keyword"">return</span> elm.<span class=""hljs-property"">validity</span>.<span class=""hljs-property"">valid</span>;\n  }\n  <span class=""hljs-keyword"">else</span>{\n      <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>\n  }\n}\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'http://www.google.com/\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'//google.com\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'google.com\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'localhost:8000\'</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif3"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2018-04-23 22:05:42Z, License: CC BY-SA 3.0","('15',)","('94201972',)",Thank you! I implemented your advice. Be aware however: Older browsers and/or mobile device WebView may have not implemented the <input type =url> element; thus the input value would be treated just like a regular text (no URL validation). REF: developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url,"('\n                \n                <span class=""comment-copy"">Thank you! I implemented your advice. Be aware however: Older browsers and/or mobile device WebView may have not implemented the &lt;input type =url&gt; element; thus the input value would be treated just like a regular text (no URL validation). REF: <a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url"" rel=""nofollow noreferrer"">developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url</a></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1938686/panini-luncher"" title=""629 reputation"" class=""comment-user"">Panini Luncher</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment94201972_49909903"" aria-label=""Link to comment""><span title=""2018-12-07 15:17:32Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Dec 7, 2018 at 15:17</span></a></span>\n            ',)","Dec 7, 2018 at 15:17","('1',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
71,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49909903.0,"Here is yet another method.
// ***note***: if the incoming value is empty(""""), the function returns true

var elm;
function isValidURL(u){
  //A precaution/solution for the problem written in the ***note***
  if(u!==""""){  
      if(!elm){
      elm = document.createElement('input');
      elm.setAttribute('type', 'url');
      }
  elm.value = u;
  return elm.validity.valid;
  }
  else{
      return false
  }
}

console.log(isValidURL(''));
console.log(isValidURL('http://www.google.com/'));
console.log(isValidURL('//google.com'));
console.log(isValidURL('google.com'));
console.log(isValidURL('localhost:8000'));
Run code snippetExpand snippet","('\n<p>Here is yet another method.</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// ***note***: if the incoming value is empty(""""), the function returns true</span>\n\n<span class=""hljs-keyword"">var</span> elm;\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">u</span>){\n  <span class=""hljs-comment"">//A precaution/solution for the problem written in the ***note***</span>\n  <span class=""hljs-keyword"">if</span>(u!==<span class=""hljs-string"">""""</span>){  \n      <span class=""hljs-keyword"">if</span>(!elm){\n      elm = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">createElement</span>(<span class=""hljs-string"">\'input\'</span>);\n      elm.<span class=""hljs-title function_"">setAttribute</span>(<span class=""hljs-string"">\'type\'</span>, <span class=""hljs-string"">\'url\'</span>);\n      }\n  elm.<span class=""hljs-property"">value</span> = u;\n  <span class=""hljs-keyword"">return</span> elm.<span class=""hljs-property"">validity</span>.<span class=""hljs-property"">valid</span>;\n  }\n  <span class=""hljs-keyword"">else</span>{\n      <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>\n  }\n}\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'http://www.google.com/\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'//google.com\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'google.com\'</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-string"">\'localhost:8000\'</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif3"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2018-04-23 22:05:42Z, License: CC BY-SA 3.0","('15',)","('127042563',)","To avoid empty values from returning true using the Constrain validation API, you also have to set required to true on the input field.","('\n                \n                <span class=""comment-copy"">To avoid empty values from returning true using the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Constraint_validation"" rel=""nofollow noreferrer"">Constrain validation API</a>, you also have to set <code>required</code> to <code>true</code> on the input field.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/10304804/christopher"" title=""3,014 reputation"" class=""comment-user"">Christopher</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment127042563_49909903"" aria-label=""Link to comment""><span title=""2022-04-16 13:00:12Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Apr 16, 2022 at 13:00</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 16, 2022 at 13:00","('',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
72,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49185442.0,"As has been noted the perfect regex is elusive but still seems to be a reasonable approach (alternatives are server side tests or the new experimental URL API). However the high ranking answers are often returning false for common URLs but even worse will freeze your app/page for minutes on even as simple a string as isURL('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'). It's been pointed out in some of the comments, but most probably haven't entered a bad value to see it. Hanging like that makes that code unusable in any serious application. I think it's due to the repeated case insensitive sets in code like ((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' .... Take out the 'i' and it doesn't hang but will of course not work as desired. But even with the ignore case flag those tests reject high unicode values that are allowed.
The best already mentioned is:
function isURL(str) {
  return /^(?:\w+:)?\/\/([^\s\.]+\.\S{2}|localhost[\:?\d]*)\S*$/.test(str); 
}
That comes from Github segmentio/is-url. The good thing about a code repository is you can see the testing and any issues and also the test strings run through it. There's a branch that would allow strings missing protocol like google.com, though you're probably making too many assumptions then. The repository has been updated and I'm not planning on trying to keep up a mirror here. It's been broken up into separate tests to avoid RegEx redos which can be exploited for DOS attacks (I don't think you have to worry about that with client side js, but you do have to worry about your page hanging for so long that your visitor leaves your site).
There is one other repository I've seen that may even be better for isURL at dperini/regex-weburl.js, but it is highly complex. It has a bigger test list of valid and invalid URLs. The simple one above still passes all the positives and only fails to block a few odd negatives like http://a.b--c.de/ as well as the special ips.
Whichever you choose, run it through this function which I've adapted from the tests on dperini/regex-weburl.js, while using your browser's Developer Tools inpector.
function testIsURL() {
//should match
console.assert(isURL(""http://foo.com/blah_blah""));
console.assert(isURL(""http://foo.com/blah_blah/""));
console.assert(isURL(""http://foo.com/blah_blah_(wikipedia)""));
console.assert(isURL(""http://foo.com/blah_blah_(wikipedia)_(again)""));
console.assert(isURL(""http://www.example.com/wpstyle/?p=364""));
console.assert(isURL(""https://www.example.com/foo/?bar=baz&inga=42&quux""));
console.assert(isURL(""http://✪df.ws/123""));
console.assert(isURL(""http://userid:password@example.com:8080""));
console.assert(isURL(""http://userid:password@example.com:8080/""));
console.assert(isURL(""http://userid@example.com""));
console.assert(isURL(""http://userid@example.com/""));
console.assert(isURL(""http://userid@example.com:8080""));
console.assert(isURL(""http://userid@example.com:8080/""));
console.assert(isURL(""http://userid:password@example.com""));
console.assert(isURL(""http://userid:password@example.com/""));
console.assert(isURL(""http://142.42.1.1/""));
console.assert(isURL(""http://142.42.1.1:8080/""));
console.assert(isURL(""http://➡.ws/䨹""));
console.assert(isURL(""http://⌘.ws""));
console.assert(isURL(""http://⌘.ws/""));
console.assert(isURL(""http://foo.com/blah_(wikipedia)#cite-1""));
console.assert(isURL(""http://foo.com/blah_(wikipedia)_blah#cite-1""));
console.assert(isURL(""http://foo.com/unicode_(✪)_in_parens""));
console.assert(isURL(""http://foo.com/(something)?after=parens""));
console.assert(isURL(""http://☺.damowmow.com/""));
console.assert(isURL(""http://code.google.com/events/#&product=browser""));
console.assert(isURL(""http://j.mp""));
console.assert(isURL(""ftp://foo.bar/baz""));
console.assert(isURL(""http://foo.bar/?q=Test%20URL-encoded%20stuff""));
console.assert(isURL(""http://مثال.إختبار""));
console.assert(isURL(""http://例子.测试""));
console.assert(isURL(""http://उदाहरण.परीक्षा""));
console.assert(isURL(""http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com""));
console.assert(isURL(""http://1337.net""));
console.assert(isURL(""http://a.b-c.de""));
console.assert(isURL(""http://223.255.255.254""));
console.assert(isURL(""postgres://u:p@example.com:5702/db""));
console.assert(isURL(""https://d1f4470da51b49289906b3d6cbd65074@app.getsentry.com/13176""));

//SHOULD NOT MATCH:
console.assert(!isURL(""http://""));
console.assert(!isURL(""http://.""));
console.assert(!isURL(""http://..""));
console.assert(!isURL(""http://../""));
console.assert(!isURL(""http://?""));
console.assert(!isURL(""http://??""));
console.assert(!isURL(""http://??/""));
console.assert(!isURL(""http://#""));
console.assert(!isURL(""http://##""));
console.assert(!isURL(""http://##/""));
console.assert(!isURL(""http://foo.bar?q=Spaces should be encoded""));
console.assert(!isURL(""//""));
console.assert(!isURL(""//a""));
console.assert(!isURL(""///a""));
console.assert(!isURL(""///""));
console.assert(!isURL(""http:///a""));
console.assert(!isURL(""foo.com""));
console.assert(!isURL(""rdar://1234""));
console.assert(!isURL(""h://test""));
console.assert(!isURL(""http:// shouldfail.com""));
console.assert(!isURL("":// should fail""));
console.assert(!isURL(""http://foo.bar/foo(bar)baz quux""));
console.assert(!isURL(""ftps://foo.bar/""));
console.assert(!isURL(""http://-error-.invalid/""));
console.assert(!isURL(""http://a.b--c.de/""));
console.assert(!isURL(""http://-a.b.co""));
console.assert(!isURL(""http://a.b-.co""));
console.assert(!isURL(""http://0.0.0.0""));
console.assert(!isURL(""http://10.1.1.0""));
console.assert(!isURL(""http://10.1.1.255""));
console.assert(!isURL(""http://224.1.1.1""));
console.assert(!isURL(""http://1.1.1.1.1""));
console.assert(!isURL(""http://123.123.123""));
console.assert(!isURL(""http://3628126748""));
console.assert(!isURL(""http://.www.foo.bar/""));
console.assert(!isURL(""http://www.foo.bar./""));
console.assert(!isURL(""http://.www.foo.bar./""));
console.assert(!isURL(""http://10.1.1.1""));}
And then test that string of 'a's.
See this comparison of isURL regex by Mathias Bynens for more info before you post a seemingly great regex.","('\n<p>As has been noted the perfect regex is elusive but still seems to be a reasonable approach (alternatives are server side tests or the new experimental <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer"">URL API</a>). However the high ranking answers are often returning false for common URLs but even worse will freeze your app/page for minutes on even as simple a string as <code>isURL(\'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\')</code>. It\'s been pointed out in some of the comments, but most probably haven\'t entered a bad value to see it. Hanging like that makes that code unusable in any serious application. I think it\'s due to the repeated case insensitive sets in code like <code>((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|\' ...</code>. Take out the \'i\' and it doesn\'t hang but will of course not work as desired. But even with the ignore case flag those tests reject high unicode values that are allowed.</p>\n\n<p>The best already mentioned is:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-regexp"">/^(?:\\w+:)?\\/\\/([^\\s\\.]+\\.\\S{2}|localhost[\\:?\\d]*)\\S*$/</span>.<span class=""hljs-title function_"">test</span>(str); \n}\n</code></pre>\n\n<p>That comes from Github <a href=""https://github.com/segmentio/is-url/blob/master/index.js"" rel=""noreferrer"">segmentio/is-url</a>. The good thing about a code repository is you can see the testing and any issues and also the test strings run through it. There\'s a branch that would allow strings missing protocol like <code>google.com</code>, though you\'re probably making too many assumptions then. <em>The repository has been updated and I\'m not planning on trying to keep up a mirror here. It\'s been broken up into separate tests to avoid RegEx <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"" rel=""noreferrer"">redos</a> which can be exploited for DOS attacks (I don\'t think you have to worry about that with client side js, but you do have to worry about your page hanging for so long that your visitor leaves your site).</em></p>\n\n<p>There is one other repository I\'ve seen that <strong>may even be better for isURL at <a href=""https://gist.github.com/dperini/729294"" rel=""noreferrer"">dperini/regex-weburl.js</a></strong>, but it is highly complex. It has a bigger test list of valid and invalid URLs. The simple one above still passes all the positives and only fails to block a few odd negatives like <code>http://a.b--c.de/</code> as well as the special ips.</p>\n\n<p>Whichever you choose, run it through this function which I\'ve adapted from the tests on dperini/regex-weburl.js, while using your browser\'s Developer Tools inpector.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">testIsURL</span>(<span class=""hljs-params""></span>) {\n<span class=""hljs-comment"">//should match</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah_(wikipedia)""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah_(wikipedia)_(again)""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://www.example.com/wpstyle/?p=364""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""https://www.example.com/foo/?bar=baz&amp;inga=42&amp;quux""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://✪df.ws/123""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com:8080""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com:8080""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://142.42.1.1/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://142.42.1.1:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://➡.ws/䨹""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://⌘.ws""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://⌘.ws/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_(wikipedia)#cite-1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_(wikipedia)_blah#cite-1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/unicode_(✪)_in_parens""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/(something)?after=parens""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://☺.damowmow.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://code.google.com/events/#&amp;product=browser""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://j.mp""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""ftp://foo.bar/baz""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar/?q=Test%20URL-encoded%20stuff""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://مثال.إختبار""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://例子.测试""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://उदाहरण.परीक्षा""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-.~_!$&amp;\'()*+,;=:%40:80%2f::::::@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://1337.net""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b-c.de""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://223.255.255.254""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""postgres://u:p@example.com:5702/db""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""https://d1f4470da51b49289906b3d6cbd65074@app.getsentry.com/13176""</span>));\n\n<span class=""hljs-comment"">//SHOULD NOT MATCH:</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://..""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://../""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://?""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://??""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://??/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://#""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://##""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://##/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar?q=Spaces should be encoded""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""//""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""//a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""///a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""///""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http:///a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""foo.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""rdar://1234""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""h://test""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http:// shouldfail.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">"":// should fail""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar/foo(bar)baz quux""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""ftps://foo.bar/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-error-.invalid/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b--c.de/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-a.b.co""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b-.co""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://0.0.0.0""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.0""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.255""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://224.1.1.1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://1.1.1.1.1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://123.123.123""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://3628126748""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.www.foo.bar/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://www.foo.bar./""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.www.foo.bar./""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.1""</span>));}\n</code></pre>\n\n<p>And then test that string of \'a\'s.</p>\n\n<p>See this <a href=""https://mathiasbynens.be/demo/url-regex"" rel=""noreferrer"">comparison of isURL regex</a> by Mathias Bynens for more info before you post a seemingly great regex.</p>\n    ',)","2018-04-17 08:26:30Z, License: CC BY-SA 3.0","('14',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
73,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49185442.0,"As has been noted the perfect regex is elusive but still seems to be a reasonable approach (alternatives are server side tests or the new experimental URL API). However the high ranking answers are often returning false for common URLs but even worse will freeze your app/page for minutes on even as simple a string as isURL('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'). It's been pointed out in some of the comments, but most probably haven't entered a bad value to see it. Hanging like that makes that code unusable in any serious application. I think it's due to the repeated case insensitive sets in code like ((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' .... Take out the 'i' and it doesn't hang but will of course not work as desired. But even with the ignore case flag those tests reject high unicode values that are allowed.
The best already mentioned is:
function isURL(str) {
  return /^(?:\w+:)?\/\/([^\s\.]+\.\S{2}|localhost[\:?\d]*)\S*$/.test(str); 
}
That comes from Github segmentio/is-url. The good thing about a code repository is you can see the testing and any issues and also the test strings run through it. There's a branch that would allow strings missing protocol like google.com, though you're probably making too many assumptions then. The repository has been updated and I'm not planning on trying to keep up a mirror here. It's been broken up into separate tests to avoid RegEx redos which can be exploited for DOS attacks (I don't think you have to worry about that with client side js, but you do have to worry about your page hanging for so long that your visitor leaves your site).
There is one other repository I've seen that may even be better for isURL at dperini/regex-weburl.js, but it is highly complex. It has a bigger test list of valid and invalid URLs. The simple one above still passes all the positives and only fails to block a few odd negatives like http://a.b--c.de/ as well as the special ips.
Whichever you choose, run it through this function which I've adapted from the tests on dperini/regex-weburl.js, while using your browser's Developer Tools inpector.
function testIsURL() {
//should match
console.assert(isURL(""http://foo.com/blah_blah""));
console.assert(isURL(""http://foo.com/blah_blah/""));
console.assert(isURL(""http://foo.com/blah_blah_(wikipedia)""));
console.assert(isURL(""http://foo.com/blah_blah_(wikipedia)_(again)""));
console.assert(isURL(""http://www.example.com/wpstyle/?p=364""));
console.assert(isURL(""https://www.example.com/foo/?bar=baz&inga=42&quux""));
console.assert(isURL(""http://✪df.ws/123""));
console.assert(isURL(""http://userid:password@example.com:8080""));
console.assert(isURL(""http://userid:password@example.com:8080/""));
console.assert(isURL(""http://userid@example.com""));
console.assert(isURL(""http://userid@example.com/""));
console.assert(isURL(""http://userid@example.com:8080""));
console.assert(isURL(""http://userid@example.com:8080/""));
console.assert(isURL(""http://userid:password@example.com""));
console.assert(isURL(""http://userid:password@example.com/""));
console.assert(isURL(""http://142.42.1.1/""));
console.assert(isURL(""http://142.42.1.1:8080/""));
console.assert(isURL(""http://➡.ws/䨹""));
console.assert(isURL(""http://⌘.ws""));
console.assert(isURL(""http://⌘.ws/""));
console.assert(isURL(""http://foo.com/blah_(wikipedia)#cite-1""));
console.assert(isURL(""http://foo.com/blah_(wikipedia)_blah#cite-1""));
console.assert(isURL(""http://foo.com/unicode_(✪)_in_parens""));
console.assert(isURL(""http://foo.com/(something)?after=parens""));
console.assert(isURL(""http://☺.damowmow.com/""));
console.assert(isURL(""http://code.google.com/events/#&product=browser""));
console.assert(isURL(""http://j.mp""));
console.assert(isURL(""ftp://foo.bar/baz""));
console.assert(isURL(""http://foo.bar/?q=Test%20URL-encoded%20stuff""));
console.assert(isURL(""http://مثال.إختبار""));
console.assert(isURL(""http://例子.测试""));
console.assert(isURL(""http://उदाहरण.परीक्षा""));
console.assert(isURL(""http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com""));
console.assert(isURL(""http://1337.net""));
console.assert(isURL(""http://a.b-c.de""));
console.assert(isURL(""http://223.255.255.254""));
console.assert(isURL(""postgres://u:p@example.com:5702/db""));
console.assert(isURL(""https://d1f4470da51b49289906b3d6cbd65074@app.getsentry.com/13176""));

//SHOULD NOT MATCH:
console.assert(!isURL(""http://""));
console.assert(!isURL(""http://.""));
console.assert(!isURL(""http://..""));
console.assert(!isURL(""http://../""));
console.assert(!isURL(""http://?""));
console.assert(!isURL(""http://??""));
console.assert(!isURL(""http://??/""));
console.assert(!isURL(""http://#""));
console.assert(!isURL(""http://##""));
console.assert(!isURL(""http://##/""));
console.assert(!isURL(""http://foo.bar?q=Spaces should be encoded""));
console.assert(!isURL(""//""));
console.assert(!isURL(""//a""));
console.assert(!isURL(""///a""));
console.assert(!isURL(""///""));
console.assert(!isURL(""http:///a""));
console.assert(!isURL(""foo.com""));
console.assert(!isURL(""rdar://1234""));
console.assert(!isURL(""h://test""));
console.assert(!isURL(""http:// shouldfail.com""));
console.assert(!isURL("":// should fail""));
console.assert(!isURL(""http://foo.bar/foo(bar)baz quux""));
console.assert(!isURL(""ftps://foo.bar/""));
console.assert(!isURL(""http://-error-.invalid/""));
console.assert(!isURL(""http://a.b--c.de/""));
console.assert(!isURL(""http://-a.b.co""));
console.assert(!isURL(""http://a.b-.co""));
console.assert(!isURL(""http://0.0.0.0""));
console.assert(!isURL(""http://10.1.1.0""));
console.assert(!isURL(""http://10.1.1.255""));
console.assert(!isURL(""http://224.1.1.1""));
console.assert(!isURL(""http://1.1.1.1.1""));
console.assert(!isURL(""http://123.123.123""));
console.assert(!isURL(""http://3628126748""));
console.assert(!isURL(""http://.www.foo.bar/""));
console.assert(!isURL(""http://www.foo.bar./""));
console.assert(!isURL(""http://.www.foo.bar./""));
console.assert(!isURL(""http://10.1.1.1""));}
And then test that string of 'a's.
See this comparison of isURL regex by Mathias Bynens for more info before you post a seemingly great regex.","('\n<p>As has been noted the perfect regex is elusive but still seems to be a reasonable approach (alternatives are server side tests or the new experimental <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer"">URL API</a>). However the high ranking answers are often returning false for common URLs but even worse will freeze your app/page for minutes on even as simple a string as <code>isURL(\'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\')</code>. It\'s been pointed out in some of the comments, but most probably haven\'t entered a bad value to see it. Hanging like that makes that code unusable in any serious application. I think it\'s due to the repeated case insensitive sets in code like <code>((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|\' ...</code>. Take out the \'i\' and it doesn\'t hang but will of course not work as desired. But even with the ignore case flag those tests reject high unicode values that are allowed.</p>\n\n<p>The best already mentioned is:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-regexp"">/^(?:\\w+:)?\\/\\/([^\\s\\.]+\\.\\S{2}|localhost[\\:?\\d]*)\\S*$/</span>.<span class=""hljs-title function_"">test</span>(str); \n}\n</code></pre>\n\n<p>That comes from Github <a href=""https://github.com/segmentio/is-url/blob/master/index.js"" rel=""noreferrer"">segmentio/is-url</a>. The good thing about a code repository is you can see the testing and any issues and also the test strings run through it. There\'s a branch that would allow strings missing protocol like <code>google.com</code>, though you\'re probably making too many assumptions then. <em>The repository has been updated and I\'m not planning on trying to keep up a mirror here. It\'s been broken up into separate tests to avoid RegEx <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"" rel=""noreferrer"">redos</a> which can be exploited for DOS attacks (I don\'t think you have to worry about that with client side js, but you do have to worry about your page hanging for so long that your visitor leaves your site).</em></p>\n\n<p>There is one other repository I\'ve seen that <strong>may even be better for isURL at <a href=""https://gist.github.com/dperini/729294"" rel=""noreferrer"">dperini/regex-weburl.js</a></strong>, but it is highly complex. It has a bigger test list of valid and invalid URLs. The simple one above still passes all the positives and only fails to block a few odd negatives like <code>http://a.b--c.de/</code> as well as the special ips.</p>\n\n<p>Whichever you choose, run it through this function which I\'ve adapted from the tests on dperini/regex-weburl.js, while using your browser\'s Developer Tools inpector.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">testIsURL</span>(<span class=""hljs-params""></span>) {\n<span class=""hljs-comment"">//should match</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah_(wikipedia)""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah_(wikipedia)_(again)""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://www.example.com/wpstyle/?p=364""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""https://www.example.com/foo/?bar=baz&amp;inga=42&amp;quux""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://✪df.ws/123""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com:8080""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com:8080""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://142.42.1.1/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://142.42.1.1:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://➡.ws/䨹""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://⌘.ws""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://⌘.ws/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_(wikipedia)#cite-1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_(wikipedia)_blah#cite-1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/unicode_(✪)_in_parens""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/(something)?after=parens""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://☺.damowmow.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://code.google.com/events/#&amp;product=browser""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://j.mp""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""ftp://foo.bar/baz""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar/?q=Test%20URL-encoded%20stuff""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://مثال.إختبار""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://例子.测试""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://उदाहरण.परीक्षा""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-.~_!$&amp;\'()*+,;=:%40:80%2f::::::@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://1337.net""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b-c.de""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://223.255.255.254""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""postgres://u:p@example.com:5702/db""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""https://d1f4470da51b49289906b3d6cbd65074@app.getsentry.com/13176""</span>));\n\n<span class=""hljs-comment"">//SHOULD NOT MATCH:</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://..""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://../""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://?""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://??""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://??/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://#""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://##""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://##/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar?q=Spaces should be encoded""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""//""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""//a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""///a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""///""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http:///a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""foo.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""rdar://1234""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""h://test""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http:// shouldfail.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">"":// should fail""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar/foo(bar)baz quux""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""ftps://foo.bar/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-error-.invalid/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b--c.de/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-a.b.co""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b-.co""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://0.0.0.0""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.0""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.255""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://224.1.1.1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://1.1.1.1.1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://123.123.123""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://3628126748""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.www.foo.bar/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://www.foo.bar./""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.www.foo.bar./""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.1""</span>));}\n</code></pre>\n\n<p>And then test that string of \'a\'s.</p>\n\n<p>See this <a href=""https://mathiasbynens.be/demo/url-regex"" rel=""noreferrer"">comparison of isURL regex</a> by Mathias Bynens for more info before you post a seemingly great regex.</p>\n    ',)","2018-04-17 08:26:30Z, License: CC BY-SA 3.0","('14',)","('86761647',)",I checked your answer. Your answer is failing for sdfasdp.ppppppppppp i.e. returning true but expected is false,"('\n                \n                <span class=""comment-copy"">I checked your answer. Your answer is failing for <a href=""https://sdfasdp.ppppppppppp"" rel=""nofollow noreferrer"">sdfasdp.ppppppppppp</a> i.e. returning true but expected is false</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/631803/vikasdeep-singh"" title=""20,737 reputation"" class=""comment-user"">Vikasdeep Singh</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86761647_49185442"" aria-label=""Link to comment""><span title=""2018-04-17 08:26:30Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 17, 2018 at 8:26</span></a></span>\n            ',)","Apr 17, 2018 at 8:26","('1',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
74,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49185442.0,"As has been noted the perfect regex is elusive but still seems to be a reasonable approach (alternatives are server side tests or the new experimental URL API). However the high ranking answers are often returning false for common URLs but even worse will freeze your app/page for minutes on even as simple a string as isURL('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'). It's been pointed out in some of the comments, but most probably haven't entered a bad value to see it. Hanging like that makes that code unusable in any serious application. I think it's due to the repeated case insensitive sets in code like ((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' .... Take out the 'i' and it doesn't hang but will of course not work as desired. But even with the ignore case flag those tests reject high unicode values that are allowed.
The best already mentioned is:
function isURL(str) {
  return /^(?:\w+:)?\/\/([^\s\.]+\.\S{2}|localhost[\:?\d]*)\S*$/.test(str); 
}
That comes from Github segmentio/is-url. The good thing about a code repository is you can see the testing and any issues and also the test strings run through it. There's a branch that would allow strings missing protocol like google.com, though you're probably making too many assumptions then. The repository has been updated and I'm not planning on trying to keep up a mirror here. It's been broken up into separate tests to avoid RegEx redos which can be exploited for DOS attacks (I don't think you have to worry about that with client side js, but you do have to worry about your page hanging for so long that your visitor leaves your site).
There is one other repository I've seen that may even be better for isURL at dperini/regex-weburl.js, but it is highly complex. It has a bigger test list of valid and invalid URLs. The simple one above still passes all the positives and only fails to block a few odd negatives like http://a.b--c.de/ as well as the special ips.
Whichever you choose, run it through this function which I've adapted from the tests on dperini/regex-weburl.js, while using your browser's Developer Tools inpector.
function testIsURL() {
//should match
console.assert(isURL(""http://foo.com/blah_blah""));
console.assert(isURL(""http://foo.com/blah_blah/""));
console.assert(isURL(""http://foo.com/blah_blah_(wikipedia)""));
console.assert(isURL(""http://foo.com/blah_blah_(wikipedia)_(again)""));
console.assert(isURL(""http://www.example.com/wpstyle/?p=364""));
console.assert(isURL(""https://www.example.com/foo/?bar=baz&inga=42&quux""));
console.assert(isURL(""http://✪df.ws/123""));
console.assert(isURL(""http://userid:password@example.com:8080""));
console.assert(isURL(""http://userid:password@example.com:8080/""));
console.assert(isURL(""http://userid@example.com""));
console.assert(isURL(""http://userid@example.com/""));
console.assert(isURL(""http://userid@example.com:8080""));
console.assert(isURL(""http://userid@example.com:8080/""));
console.assert(isURL(""http://userid:password@example.com""));
console.assert(isURL(""http://userid:password@example.com/""));
console.assert(isURL(""http://142.42.1.1/""));
console.assert(isURL(""http://142.42.1.1:8080/""));
console.assert(isURL(""http://➡.ws/䨹""));
console.assert(isURL(""http://⌘.ws""));
console.assert(isURL(""http://⌘.ws/""));
console.assert(isURL(""http://foo.com/blah_(wikipedia)#cite-1""));
console.assert(isURL(""http://foo.com/blah_(wikipedia)_blah#cite-1""));
console.assert(isURL(""http://foo.com/unicode_(✪)_in_parens""));
console.assert(isURL(""http://foo.com/(something)?after=parens""));
console.assert(isURL(""http://☺.damowmow.com/""));
console.assert(isURL(""http://code.google.com/events/#&product=browser""));
console.assert(isURL(""http://j.mp""));
console.assert(isURL(""ftp://foo.bar/baz""));
console.assert(isURL(""http://foo.bar/?q=Test%20URL-encoded%20stuff""));
console.assert(isURL(""http://مثال.إختبار""));
console.assert(isURL(""http://例子.测试""));
console.assert(isURL(""http://उदाहरण.परीक्षा""));
console.assert(isURL(""http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com""));
console.assert(isURL(""http://1337.net""));
console.assert(isURL(""http://a.b-c.de""));
console.assert(isURL(""http://223.255.255.254""));
console.assert(isURL(""postgres://u:p@example.com:5702/db""));
console.assert(isURL(""https://d1f4470da51b49289906b3d6cbd65074@app.getsentry.com/13176""));

//SHOULD NOT MATCH:
console.assert(!isURL(""http://""));
console.assert(!isURL(""http://.""));
console.assert(!isURL(""http://..""));
console.assert(!isURL(""http://../""));
console.assert(!isURL(""http://?""));
console.assert(!isURL(""http://??""));
console.assert(!isURL(""http://??/""));
console.assert(!isURL(""http://#""));
console.assert(!isURL(""http://##""));
console.assert(!isURL(""http://##/""));
console.assert(!isURL(""http://foo.bar?q=Spaces should be encoded""));
console.assert(!isURL(""//""));
console.assert(!isURL(""//a""));
console.assert(!isURL(""///a""));
console.assert(!isURL(""///""));
console.assert(!isURL(""http:///a""));
console.assert(!isURL(""foo.com""));
console.assert(!isURL(""rdar://1234""));
console.assert(!isURL(""h://test""));
console.assert(!isURL(""http:// shouldfail.com""));
console.assert(!isURL("":// should fail""));
console.assert(!isURL(""http://foo.bar/foo(bar)baz quux""));
console.assert(!isURL(""ftps://foo.bar/""));
console.assert(!isURL(""http://-error-.invalid/""));
console.assert(!isURL(""http://a.b--c.de/""));
console.assert(!isURL(""http://-a.b.co""));
console.assert(!isURL(""http://a.b-.co""));
console.assert(!isURL(""http://0.0.0.0""));
console.assert(!isURL(""http://10.1.1.0""));
console.assert(!isURL(""http://10.1.1.255""));
console.assert(!isURL(""http://224.1.1.1""));
console.assert(!isURL(""http://1.1.1.1.1""));
console.assert(!isURL(""http://123.123.123""));
console.assert(!isURL(""http://3628126748""));
console.assert(!isURL(""http://.www.foo.bar/""));
console.assert(!isURL(""http://www.foo.bar./""));
console.assert(!isURL(""http://.www.foo.bar./""));
console.assert(!isURL(""http://10.1.1.1""));}
And then test that string of 'a's.
See this comparison of isURL regex by Mathias Bynens for more info before you post a seemingly great regex.","('\n<p>As has been noted the perfect regex is elusive but still seems to be a reasonable approach (alternatives are server side tests or the new experimental <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer"">URL API</a>). However the high ranking answers are often returning false for common URLs but even worse will freeze your app/page for minutes on even as simple a string as <code>isURL(\'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\')</code>. It\'s been pointed out in some of the comments, but most probably haven\'t entered a bad value to see it. Hanging like that makes that code unusable in any serious application. I think it\'s due to the repeated case insensitive sets in code like <code>((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|\' ...</code>. Take out the \'i\' and it doesn\'t hang but will of course not work as desired. But even with the ignore case flag those tests reject high unicode values that are allowed.</p>\n\n<p>The best already mentioned is:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-regexp"">/^(?:\\w+:)?\\/\\/([^\\s\\.]+\\.\\S{2}|localhost[\\:?\\d]*)\\S*$/</span>.<span class=""hljs-title function_"">test</span>(str); \n}\n</code></pre>\n\n<p>That comes from Github <a href=""https://github.com/segmentio/is-url/blob/master/index.js"" rel=""noreferrer"">segmentio/is-url</a>. The good thing about a code repository is you can see the testing and any issues and also the test strings run through it. There\'s a branch that would allow strings missing protocol like <code>google.com</code>, though you\'re probably making too many assumptions then. <em>The repository has been updated and I\'m not planning on trying to keep up a mirror here. It\'s been broken up into separate tests to avoid RegEx <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"" rel=""noreferrer"">redos</a> which can be exploited for DOS attacks (I don\'t think you have to worry about that with client side js, but you do have to worry about your page hanging for so long that your visitor leaves your site).</em></p>\n\n<p>There is one other repository I\'ve seen that <strong>may even be better for isURL at <a href=""https://gist.github.com/dperini/729294"" rel=""noreferrer"">dperini/regex-weburl.js</a></strong>, but it is highly complex. It has a bigger test list of valid and invalid URLs. The simple one above still passes all the positives and only fails to block a few odd negatives like <code>http://a.b--c.de/</code> as well as the special ips.</p>\n\n<p>Whichever you choose, run it through this function which I\'ve adapted from the tests on dperini/regex-weburl.js, while using your browser\'s Developer Tools inpector.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">testIsURL</span>(<span class=""hljs-params""></span>) {\n<span class=""hljs-comment"">//should match</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah_(wikipedia)""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah_(wikipedia)_(again)""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://www.example.com/wpstyle/?p=364""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""https://www.example.com/foo/?bar=baz&amp;inga=42&amp;quux""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://✪df.ws/123""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com:8080""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com:8080""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://142.42.1.1/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://142.42.1.1:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://➡.ws/䨹""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://⌘.ws""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://⌘.ws/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_(wikipedia)#cite-1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_(wikipedia)_blah#cite-1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/unicode_(✪)_in_parens""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/(something)?after=parens""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://☺.damowmow.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://code.google.com/events/#&amp;product=browser""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://j.mp""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""ftp://foo.bar/baz""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar/?q=Test%20URL-encoded%20stuff""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://مثال.إختبار""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://例子.测试""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://उदाहरण.परीक्षा""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-.~_!$&amp;\'()*+,;=:%40:80%2f::::::@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://1337.net""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b-c.de""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://223.255.255.254""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""postgres://u:p@example.com:5702/db""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""https://d1f4470da51b49289906b3d6cbd65074@app.getsentry.com/13176""</span>));\n\n<span class=""hljs-comment"">//SHOULD NOT MATCH:</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://..""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://../""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://?""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://??""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://??/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://#""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://##""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://##/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar?q=Spaces should be encoded""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""//""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""//a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""///a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""///""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http:///a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""foo.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""rdar://1234""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""h://test""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http:// shouldfail.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">"":// should fail""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar/foo(bar)baz quux""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""ftps://foo.bar/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-error-.invalid/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b--c.de/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-a.b.co""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b-.co""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://0.0.0.0""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.0""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.255""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://224.1.1.1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://1.1.1.1.1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://123.123.123""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://3628126748""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.www.foo.bar/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://www.foo.bar./""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.www.foo.bar./""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.1""</span>));}\n</code></pre>\n\n<p>And then test that string of \'a\'s.</p>\n\n<p>See this <a href=""https://mathiasbynens.be/demo/url-regex"" rel=""noreferrer"">comparison of isURL regex</a> by Mathias Bynens for more info before you post a seemingly great regex.</p>\n    ',)","2018-04-17 08:26:30Z, License: CC BY-SA 3.0","('14',)","('86792563',)","I think that's a valid URL, structurally. Not an expert on the standard but I don't think there's a limit on the length of the .com portion (I know .online is legit).","('\n                \n                <span class=""comment-copy"">I think that\'s a valid URL, structurally. Not an expert on the standard but I don\'t think there\'s a limit on the length of the .com portion (I know .online is legit).</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3736602/aamarks"" title=""882 reputation"" class=""comment-user"">aamarks</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86792563_49185442"" aria-label=""Link to comment""><span title=""2018-04-17 22:12:08Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 17, 2018 at 22:12</span></a></span>\n            ',)","Apr 17, 2018 at 22:12","('2',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
75,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,49185442.0,"As has been noted the perfect regex is elusive but still seems to be a reasonable approach (alternatives are server side tests or the new experimental URL API). However the high ranking answers are often returning false for common URLs but even worse will freeze your app/page for minutes on even as simple a string as isURL('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'). It's been pointed out in some of the comments, but most probably haven't entered a bad value to see it. Hanging like that makes that code unusable in any serious application. I think it's due to the repeated case insensitive sets in code like ((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' .... Take out the 'i' and it doesn't hang but will of course not work as desired. But even with the ignore case flag those tests reject high unicode values that are allowed.
The best already mentioned is:
function isURL(str) {
  return /^(?:\w+:)?\/\/([^\s\.]+\.\S{2}|localhost[\:?\d]*)\S*$/.test(str); 
}
That comes from Github segmentio/is-url. The good thing about a code repository is you can see the testing and any issues and also the test strings run through it. There's a branch that would allow strings missing protocol like google.com, though you're probably making too many assumptions then. The repository has been updated and I'm not planning on trying to keep up a mirror here. It's been broken up into separate tests to avoid RegEx redos which can be exploited for DOS attacks (I don't think you have to worry about that with client side js, but you do have to worry about your page hanging for so long that your visitor leaves your site).
There is one other repository I've seen that may even be better for isURL at dperini/regex-weburl.js, but it is highly complex. It has a bigger test list of valid and invalid URLs. The simple one above still passes all the positives and only fails to block a few odd negatives like http://a.b--c.de/ as well as the special ips.
Whichever you choose, run it through this function which I've adapted from the tests on dperini/regex-weburl.js, while using your browser's Developer Tools inpector.
function testIsURL() {
//should match
console.assert(isURL(""http://foo.com/blah_blah""));
console.assert(isURL(""http://foo.com/blah_blah/""));
console.assert(isURL(""http://foo.com/blah_blah_(wikipedia)""));
console.assert(isURL(""http://foo.com/blah_blah_(wikipedia)_(again)""));
console.assert(isURL(""http://www.example.com/wpstyle/?p=364""));
console.assert(isURL(""https://www.example.com/foo/?bar=baz&inga=42&quux""));
console.assert(isURL(""http://✪df.ws/123""));
console.assert(isURL(""http://userid:password@example.com:8080""));
console.assert(isURL(""http://userid:password@example.com:8080/""));
console.assert(isURL(""http://userid@example.com""));
console.assert(isURL(""http://userid@example.com/""));
console.assert(isURL(""http://userid@example.com:8080""));
console.assert(isURL(""http://userid@example.com:8080/""));
console.assert(isURL(""http://userid:password@example.com""));
console.assert(isURL(""http://userid:password@example.com/""));
console.assert(isURL(""http://142.42.1.1/""));
console.assert(isURL(""http://142.42.1.1:8080/""));
console.assert(isURL(""http://➡.ws/䨹""));
console.assert(isURL(""http://⌘.ws""));
console.assert(isURL(""http://⌘.ws/""));
console.assert(isURL(""http://foo.com/blah_(wikipedia)#cite-1""));
console.assert(isURL(""http://foo.com/blah_(wikipedia)_blah#cite-1""));
console.assert(isURL(""http://foo.com/unicode_(✪)_in_parens""));
console.assert(isURL(""http://foo.com/(something)?after=parens""));
console.assert(isURL(""http://☺.damowmow.com/""));
console.assert(isURL(""http://code.google.com/events/#&product=browser""));
console.assert(isURL(""http://j.mp""));
console.assert(isURL(""ftp://foo.bar/baz""));
console.assert(isURL(""http://foo.bar/?q=Test%20URL-encoded%20stuff""));
console.assert(isURL(""http://مثال.إختبار""));
console.assert(isURL(""http://例子.测试""));
console.assert(isURL(""http://उदाहरण.परीक्षा""));
console.assert(isURL(""http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com""));
console.assert(isURL(""http://1337.net""));
console.assert(isURL(""http://a.b-c.de""));
console.assert(isURL(""http://223.255.255.254""));
console.assert(isURL(""postgres://u:p@example.com:5702/db""));
console.assert(isURL(""https://d1f4470da51b49289906b3d6cbd65074@app.getsentry.com/13176""));

//SHOULD NOT MATCH:
console.assert(!isURL(""http://""));
console.assert(!isURL(""http://.""));
console.assert(!isURL(""http://..""));
console.assert(!isURL(""http://../""));
console.assert(!isURL(""http://?""));
console.assert(!isURL(""http://??""));
console.assert(!isURL(""http://??/""));
console.assert(!isURL(""http://#""));
console.assert(!isURL(""http://##""));
console.assert(!isURL(""http://##/""));
console.assert(!isURL(""http://foo.bar?q=Spaces should be encoded""));
console.assert(!isURL(""//""));
console.assert(!isURL(""//a""));
console.assert(!isURL(""///a""));
console.assert(!isURL(""///""));
console.assert(!isURL(""http:///a""));
console.assert(!isURL(""foo.com""));
console.assert(!isURL(""rdar://1234""));
console.assert(!isURL(""h://test""));
console.assert(!isURL(""http:// shouldfail.com""));
console.assert(!isURL("":// should fail""));
console.assert(!isURL(""http://foo.bar/foo(bar)baz quux""));
console.assert(!isURL(""ftps://foo.bar/""));
console.assert(!isURL(""http://-error-.invalid/""));
console.assert(!isURL(""http://a.b--c.de/""));
console.assert(!isURL(""http://-a.b.co""));
console.assert(!isURL(""http://a.b-.co""));
console.assert(!isURL(""http://0.0.0.0""));
console.assert(!isURL(""http://10.1.1.0""));
console.assert(!isURL(""http://10.1.1.255""));
console.assert(!isURL(""http://224.1.1.1""));
console.assert(!isURL(""http://1.1.1.1.1""));
console.assert(!isURL(""http://123.123.123""));
console.assert(!isURL(""http://3628126748""));
console.assert(!isURL(""http://.www.foo.bar/""));
console.assert(!isURL(""http://www.foo.bar./""));
console.assert(!isURL(""http://.www.foo.bar./""));
console.assert(!isURL(""http://10.1.1.1""));}
And then test that string of 'a's.
See this comparison of isURL regex by Mathias Bynens for more info before you post a seemingly great regex.","('\n<p>As has been noted the perfect regex is elusive but still seems to be a reasonable approach (alternatives are server side tests or the new experimental <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URL"" rel=""noreferrer"">URL API</a>). However the high ranking answers are often returning false for common URLs but even worse will freeze your app/page for minutes on even as simple a string as <code>isURL(\'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\')</code>. It\'s been pointed out in some of the comments, but most probably haven\'t entered a bad value to see it. Hanging like that makes that code unusable in any serious application. I think it\'s due to the repeated case insensitive sets in code like <code>((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|\' ...</code>. Take out the \'i\' and it doesn\'t hang but will of course not work as desired. But even with the ignore case flag those tests reject high unicode values that are allowed.</p>\n\n<p>The best already mentioned is:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isURL</span>(<span class=""hljs-params"">str</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-regexp"">/^(?:\\w+:)?\\/\\/([^\\s\\.]+\\.\\S{2}|localhost[\\:?\\d]*)\\S*$/</span>.<span class=""hljs-title function_"">test</span>(str); \n}\n</code></pre>\n\n<p>That comes from Github <a href=""https://github.com/segmentio/is-url/blob/master/index.js"" rel=""noreferrer"">segmentio/is-url</a>. The good thing about a code repository is you can see the testing and any issues and also the test strings run through it. There\'s a branch that would allow strings missing protocol like <code>google.com</code>, though you\'re probably making too many assumptions then. <em>The repository has been updated and I\'m not planning on trying to keep up a mirror here. It\'s been broken up into separate tests to avoid RegEx <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"" rel=""noreferrer"">redos</a> which can be exploited for DOS attacks (I don\'t think you have to worry about that with client side js, but you do have to worry about your page hanging for so long that your visitor leaves your site).</em></p>\n\n<p>There is one other repository I\'ve seen that <strong>may even be better for isURL at <a href=""https://gist.github.com/dperini/729294"" rel=""noreferrer"">dperini/regex-weburl.js</a></strong>, but it is highly complex. It has a bigger test list of valid and invalid URLs. The simple one above still passes all the positives and only fails to block a few odd negatives like <code>http://a.b--c.de/</code> as well as the special ips.</p>\n\n<p>Whichever you choose, run it through this function which I\'ve adapted from the tests on dperini/regex-weburl.js, while using your browser\'s Developer Tools inpector.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">testIsURL</span>(<span class=""hljs-params""></span>) {\n<span class=""hljs-comment"">//should match</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah_(wikipedia)""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_blah_(wikipedia)_(again)""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://www.example.com/wpstyle/?p=364""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""https://www.example.com/foo/?bar=baz&amp;inga=42&amp;quux""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://✪df.ws/123""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com:8080""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com:8080""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid@example.com:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://userid:password@example.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://142.42.1.1/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://142.42.1.1:8080/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://➡.ws/䨹""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://⌘.ws""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://⌘.ws/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_(wikipedia)#cite-1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/blah_(wikipedia)_blah#cite-1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/unicode_(✪)_in_parens""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.com/(something)?after=parens""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://☺.damowmow.com/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://code.google.com/events/#&amp;product=browser""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://j.mp""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""ftp://foo.bar/baz""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar/?q=Test%20URL-encoded%20stuff""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://مثال.إختبار""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://例子.测试""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://उदाहरण.परीक्षा""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-.~_!$&amp;\'()*+,;=:%40:80%2f::::::@example.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://1337.net""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b-c.de""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://223.255.255.254""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""postgres://u:p@example.com:5702/db""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""https://d1f4470da51b49289906b3d6cbd65074@app.getsentry.com/13176""</span>));\n\n<span class=""hljs-comment"">//SHOULD NOT MATCH:</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://..""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://../""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://?""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://??""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://??/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://#""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://##""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://##/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar?q=Spaces should be encoded""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""//""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""//a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""///a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""///""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http:///a""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""foo.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""rdar://1234""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""h://test""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http:// shouldfail.com""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">"":// should fail""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://foo.bar/foo(bar)baz quux""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""ftps://foo.bar/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-error-.invalid/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b--c.de/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://-a.b.co""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://a.b-.co""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://0.0.0.0""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.0""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.255""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://224.1.1.1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://1.1.1.1.1""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://123.123.123""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://3628126748""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.www.foo.bar/""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://www.foo.bar./""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://.www.foo.bar./""</span>));\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">assert</span>(!<span class=""hljs-title function_"">isURL</span>(<span class=""hljs-string"">""http://10.1.1.1""</span>));}\n</code></pre>\n\n<p>And then test that string of \'a\'s.</p>\n\n<p>See this <a href=""https://mathiasbynens.be/demo/url-regex"" rel=""noreferrer"">comparison of isURL regex</a> by Mathias Bynens for more info before you post a seemingly great regex.</p>\n    ',)","2018-04-17 08:26:30Z, License: CC BY-SA 3.0","('14',)","('86995347',)",I barely knew how to write a regex a couple of months ago. The problem is severe. Both of the regex I quoted can complete isURL('a'.repeat(100)) millions of times/sec (the more complex one from dperini is actually faster). Some of the high ranking answers of the form ([a-zA-Z]+)* would take hours to complete that once. Look up RegEx redos for more information.,"('\n                \n                <span class=""comment-copy"">I barely knew how to write a regex a couple of months ago. The problem is severe. Both of the regex I quoted can complete <code>isURL(\'a\'.repeat(100))</code> millions of times/sec (the more complex one from dperini is actually faster). Some of the high ranking answers of the form ([a-zA-Z]+)* would take hours to complete that once. Look up RegEx redos for more information.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3736602/aamarks"" title=""882 reputation"" class=""comment-user"">aamarks</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86995347_49185442"" aria-label=""Link to comment""><span title=""2018-04-23 20:27:57Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 23, 2018 at 20:27</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 23, 2018 at 20:27","('1',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
76,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,63309110.0,"This function disallows localhost and only allows URLs for web pages (ie, only allows http or https protocol).
It also only allows safe characters as defined here: https://www.urlencoder.io/learn/
function isValidWebUrl(url) {
   let regEx = /^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/gm;
   return regEx.test(url);
}","('\n<p>This function disallows localhost and only allows URLs for web pages (ie, only allows http or https protocol).</p>\n<p>It also only allows safe characters as defined here: <a href=""https://www.urlencoder.io/learn/"" rel=""noreferrer"">https://www.urlencoder.io/learn/</a></p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidWebUrl</span>(<span class=""hljs-params"">url</span>) {\n   <span class=""hljs-keyword"">let</span> regEx = <span class=""hljs-regexp"">/^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&amp;//=]*)$/gm</span>;\n   <span class=""hljs-keyword"">return</span> regEx.<span class=""hljs-title function_"">test</span>(url);\n}\n</code></pre>\n    ',)","2021-04-19 19:09:58Z, License: CC BY-SA 4.0","('14',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
77,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,63309110.0,"This function disallows localhost and only allows URLs for web pages (ie, only allows http or https protocol).
It also only allows safe characters as defined here: https://www.urlencoder.io/learn/
function isValidWebUrl(url) {
   let regEx = /^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/gm;
   return regEx.test(url);
}","('\n<p>This function disallows localhost and only allows URLs for web pages (ie, only allows http or https protocol).</p>\n<p>It also only allows safe characters as defined here: <a href=""https://www.urlencoder.io/learn/"" rel=""noreferrer"">https://www.urlencoder.io/learn/</a></p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidWebUrl</span>(<span class=""hljs-params"">url</span>) {\n   <span class=""hljs-keyword"">let</span> regEx = <span class=""hljs-regexp"">/^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&amp;//=]*)$/gm</span>;\n   <span class=""hljs-keyword"">return</span> regEx.<span class=""hljs-title function_"">test</span>(url);\n}\n</code></pre>\n    ',)","2021-04-19 19:09:58Z, License: CC BY-SA 4.0","('14',)","('118725517',)","This best met my use case. Does the /g make any sense, though, since you can't match more than one and wouldn't want to?","('\n                \n                <span class=""comment-copy"">This best met my use case. Does the /g make any sense, though, since you can\'t match more than one and wouldn\'t want to?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3991211/garr-godfrey"" title=""7,924 reputation"" class=""comment-user"">Garr Godfrey</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment118725517_63309110"" aria-label=""Link to comment""><span title=""2021-04-19 19:09:58Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Apr 19, 2021 at 19:09</span></a></span>\n            ',)","Apr 19, 2021 at 19:09","('',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
78,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,45044740.0,"(I don't have reps to comment on ValidURL example; hence post this as an answer.)
While use of protocol relative URLs is not encouraged (The Protocol-relative URL), they do get employed sometimes. To validate such an URL with a regular expression the protocol part could be optional, e.g.:
function isValidURL(str) {
    var pattern = new RegExp('^((https?:)?\\/\\/)?'+ // protocol
        '(?:\\S+(?::\\S*)?@)?' + // authentication
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
        '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
        '(\\#[-a-z\\d_]*)?$','i'); // fragment locater
    if (!pattern.test(str)) {
        return false;
    } else {
        return true;
    }
}
As others noted, regular expression does not seem to be the best suited approach for validating URLs, though.","('\n<p>(I don\'t have reps to comment on <a href=""https://stackoverflow.com/a/5717133/7639741"">ValidURL</a> example; hence post this as an answer.)</p>\n\n<p>While use of protocol relative URLs is not encouraged (<a href=""https://www.paulirish.com/2010/the-protocol-relative-url/"" rel=""noreferrer"">The Protocol-relative URL</a>), they do get employed sometimes. To validate such an URL with a regular expression the protocol part could be optional, e.g.:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">str</span>) {\n    <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^((https?:)?\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n        <span class=""hljs-string"">\'(?:\\\\S+(?::\\\\S*)?@)?\'</span> + <span class=""hljs-comment"">// authentication</span>\n        <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n        <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n        <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n        <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n        <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locater</span>\n    <span class=""hljs-keyword"">if</span> (!pattern.<span class=""hljs-title function_"">test</span>(str)) {\n        <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n    } <span class=""hljs-keyword"">else</span> {\n        <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">true</span>;\n    }\n}\n</code></pre>\n\n<p>As others noted, regular expression does not seem to be the best suited approach for validating URLs, though. </p>\n    ',)","2018-04-23 21:21:06Z, License: CC BY-SA 3.0","('11',)",,,,,,answer,5717093,Check if a JavaScript string is a URL,47,58,85
79,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,45044740.0,"(I don't have reps to comment on ValidURL example; hence post this as an answer.)
While use of protocol relative URLs is not encouraged (The Protocol-relative URL), they do get employed sometimes. To validate such an URL with a regular expression the protocol part could be optional, e.g.:
function isValidURL(str) {
    var pattern = new RegExp('^((https?:)?\\/\\/)?'+ // protocol
        '(?:\\S+(?::\\S*)?@)?' + // authentication
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
        '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
        '(\\#[-a-z\\d_]*)?$','i'); // fragment locater
    if (!pattern.test(str)) {
        return false;
    } else {
        return true;
    }
}
As others noted, regular expression does not seem to be the best suited approach for validating URLs, though.","('\n<p>(I don\'t have reps to comment on <a href=""https://stackoverflow.com/a/5717133/7639741"">ValidURL</a> example; hence post this as an answer.)</p>\n\n<p>While use of protocol relative URLs is not encouraged (<a href=""https://www.paulirish.com/2010/the-protocol-relative-url/"" rel=""noreferrer"">The Protocol-relative URL</a>), they do get employed sometimes. To validate such an URL with a regular expression the protocol part could be optional, e.g.:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">str</span>) {\n    <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^((https?:)?\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n        <span class=""hljs-string"">\'(?:\\\\S+(?::\\\\S*)?@)?\'</span> + <span class=""hljs-comment"">// authentication</span>\n        <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n        <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n        <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n        <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n        <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locater</span>\n    <span class=""hljs-keyword"">if</span> (!pattern.<span class=""hljs-title function_"">test</span>(str)) {\n        <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n    } <span class=""hljs-keyword"">else</span> {\n        <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">true</span>;\n    }\n}\n</code></pre>\n\n<p>As others noted, regular expression does not seem to be the best suited approach for validating URLs, though. </p>\n    ',)","2018-04-23 21:21:06Z, License: CC BY-SA 3.0","('11',)","('86996777',)","I thought at first this was pretty good but it fails many of the tests at mathiasbynens.be/demo/url-regex, and then it hangs on isValidURL(""https://d1f4470da51b49289906b3d6cbd65074@app.getsentry.com/13176"")","('\n                \n                <span class=""comment-copy"">I thought at first this was pretty good but it fails many of the tests at <a href=""https://mathiasbynens.be/demo/url-regex"" rel=""nofollow noreferrer"">mathiasbynens.be/demo/url-regex</a>, and then it hangs on <code>isValidURL(""https://d1f4470da51b49289906b3d6cbd65074@app.getsentry.com/13176"")</code></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3736602/aamarks"" title=""882 reputation"" class=""comment-user"">aamarks</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment86996777_45044740"" aria-label=""Link to comment""><span title=""2018-04-23 21:21:06Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 23, 2018 at 21:21</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 23, 2018 at 21:21","('',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
80,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,45044740.0,"(I don't have reps to comment on ValidURL example; hence post this as an answer.)
While use of protocol relative URLs is not encouraged (The Protocol-relative URL), they do get employed sometimes. To validate such an URL with a regular expression the protocol part could be optional, e.g.:
function isValidURL(str) {
    var pattern = new RegExp('^((https?:)?\\/\\/)?'+ // protocol
        '(?:\\S+(?::\\S*)?@)?' + // authentication
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
        '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
        '(\\#[-a-z\\d_]*)?$','i'); // fragment locater
    if (!pattern.test(str)) {
        return false;
    } else {
        return true;
    }
}
As others noted, regular expression does not seem to be the best suited approach for validating URLs, though.","('\n<p>(I don\'t have reps to comment on <a href=""https://stackoverflow.com/a/5717133/7639741"">ValidURL</a> example; hence post this as an answer.)</p>\n\n<p>While use of protocol relative URLs is not encouraged (<a href=""https://www.paulirish.com/2010/the-protocol-relative-url/"" rel=""noreferrer"">The Protocol-relative URL</a>), they do get employed sometimes. To validate such an URL with a regular expression the protocol part could be optional, e.g.:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">str</span>) {\n    <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^((https?:)?\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n        <span class=""hljs-string"">\'(?:\\\\S+(?::\\\\S*)?@)?\'</span> + <span class=""hljs-comment"">// authentication</span>\n        <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n        <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n        <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n        <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n        <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locater</span>\n    <span class=""hljs-keyword"">if</span> (!pattern.<span class=""hljs-title function_"">test</span>(str)) {\n        <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n    } <span class=""hljs-keyword"">else</span> {\n        <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">true</span>;\n    }\n}\n</code></pre>\n\n<p>As others noted, regular expression does not seem to be the best suited approach for validating URLs, though. </p>\n    ',)","2018-04-23 21:21:06Z, License: CC BY-SA 3.0","('11',)","('87043473',)","Yes, like I said, I merely commented on the protocol part. I added the authentication clause to handle @. It doesn't hang in my browsers.","('\n                \n                <span class=""comment-copy"">Yes, like I said, I merely commented on the protocol part. I added the authentication clause to handle <code>@</code>. It doesn\'t hang in my <i>browsers</i>.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/7639741/ko-la"" title=""411 reputation"" class=""comment-user"">ko la</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment87043473_45044740"" aria-label=""Link to comment""><span title=""2018-04-25 03:23:13Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 25, 2018 at 3:23</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 25, 2018 at 3:23","('',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
81,5717093,https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url,Check if a JavaScript string is a URL,"
                
<p>Is there a way in JavaScript to check if a string is a URL?</p>

<p>RegExes are excluded because the URL is most likely written like <code>stackoverflow</code>; that is to say that it might not have a <code>.com</code>, <code>www</code> or <code>http</code>.</p>
    ","('2011-04-19 13:26:55Z',)","('529',)",,,,,,45044740.0,"(I don't have reps to comment on ValidURL example; hence post this as an answer.)
While use of protocol relative URLs is not encouraged (The Protocol-relative URL), they do get employed sometimes. To validate such an URL with a regular expression the protocol part could be optional, e.g.:
function isValidURL(str) {
    var pattern = new RegExp('^((https?:)?\\/\\/)?'+ // protocol
        '(?:\\S+(?::\\S*)?@)?' + // authentication
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
        '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
        '(\\#[-a-z\\d_]*)?$','i'); // fragment locater
    if (!pattern.test(str)) {
        return false;
    } else {
        return true;
    }
}
As others noted, regular expression does not seem to be the best suited approach for validating URLs, though.","('\n<p>(I don\'t have reps to comment on <a href=""https://stackoverflow.com/a/5717133/7639741"">ValidURL</a> example; hence post this as an answer.)</p>\n\n<p>While use of protocol relative URLs is not encouraged (<a href=""https://www.paulirish.com/2010/the-protocol-relative-url/"" rel=""noreferrer"">The Protocol-relative URL</a>), they do get employed sometimes. To validate such an URL with a regular expression the protocol part could be optional, e.g.:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isValidURL</span>(<span class=""hljs-params"">str</span>) {\n    <span class=""hljs-keyword"">var</span> pattern = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">RegExp</span>(<span class=""hljs-string"">\'^((https?:)?\\\\/\\\\/)?\'</span>+ <span class=""hljs-comment"">// protocol</span>\n        <span class=""hljs-string"">\'(?:\\\\S+(?::\\\\S*)?@)?\'</span> + <span class=""hljs-comment"">// authentication</span>\n        <span class=""hljs-string"">\'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\'</span>+ <span class=""hljs-comment"">// domain name</span>\n        <span class=""hljs-string"">\'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\'</span>+ <span class=""hljs-comment"">// OR ip (v4) address</span>\n        <span class=""hljs-string"">\'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\'</span>+ <span class=""hljs-comment"">// port and path</span>\n        <span class=""hljs-string"">\'(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?\'</span>+ <span class=""hljs-comment"">// query string</span>\n        <span class=""hljs-string"">\'(\\\\#[-a-z\\\\d_]*)?$\'</span>,<span class=""hljs-string"">\'i\'</span>); <span class=""hljs-comment"">// fragment locater</span>\n    <span class=""hljs-keyword"">if</span> (!pattern.<span class=""hljs-title function_"">test</span>(str)) {\n        <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n    } <span class=""hljs-keyword"">else</span> {\n        <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">true</span>;\n    }\n}\n</code></pre>\n\n<p>As others noted, regular expression does not seem to be the best suited approach for validating URLs, though. </p>\n    ',)","2018-04-23 21:21:06Z, License: CC BY-SA 3.0","('11',)","('87044546',)","Sorry, I was going through several of these to evaluate them and missed that yours was commenting on the given answer. I think your correction even helped me get started on these when I first visited this page. Not hanging now.","('\n                \n                <span class=""comment-copy"">Sorry, I was going through several of these to evaluate them and missed that yours was commenting on the given answer. I think your correction even helped me get started on these when I first visited this page. Not hanging now.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3736602/aamarks"" title=""882 reputation"" class=""comment-user"">aamarks</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment87044546_45044740"" aria-label=""Link to comment""><span title=""2018-04-25 04:42:36Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 25, 2018 at 4:42</span></a></span>\n            ',)","Apr 25, 2018 at 4:42","('',)",answer_comment,5717093,Check if a JavaScript string is a URL,47,58,85
82,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,,,,,,,,,,,post,4059147,Check if a variable is a string in JavaScript,65,63,81
83,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,9436948.0,"This is what works for me:
if (typeof myVar === 'string' || myVar instanceof String)
// it's a string
else
// it's something else","('\n<p>This is what works for me:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> myVar === <span class=""hljs-string"">\'string\'</span> || myVar <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n<span class=""hljs-comment"">// it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n<span class=""hljs-comment"">// it\'s something else</span>\n</code></pre>\n    ',)","2012-04-25 13:59:56Z, License: CC BY-SA 3.0","('2745',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
84,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,9436948.0,"This is what works for me:
if (typeof myVar === 'string' || myVar instanceof String)
// it's a string
else
// it's something else","('\n<p>This is what works for me:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> myVar === <span class=""hljs-string"">\'string\'</span> || myVar <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n<span class=""hljs-comment"">// it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n<span class=""hljs-comment"">// it\'s something else</span>\n</code></pre>\n    ',)","2012-04-25 13:59:56Z, License: CC BY-SA 3.0","('2745',)","('13281080',)","Does ""myVar instanceof String"" do anything above and beyond ""typeof myVar == 'string'"" ?","('\n                \n                <span class=""comment-copy"">Does ""myVar instanceof String"" do anything above and beyond ""typeof myVar == \'string\'"" ?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/481073/svth"" title=""1,303 reputation"" class=""comment-user"">svth</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment13281080_9436948"" aria-label=""Link to comment""><span title=""2012-04-25 13:59:56Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 25, 2012 at 13:59</span></a></span>\n            ',)","Apr 25, 2012 at 13:59","('149',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
85,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,9436948.0,"This is what works for me:
if (typeof myVar === 'string' || myVar instanceof String)
// it's a string
else
// it's something else","('\n<p>This is what works for me:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> myVar === <span class=""hljs-string"">\'string\'</span> || myVar <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n<span class=""hljs-comment"">// it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n<span class=""hljs-comment"">// it\'s something else</span>\n</code></pre>\n    ',)","2012-04-25 13:59:56Z, License: CC BY-SA 3.0","('2745',)","('13303254',)",@svth I remembered. In JavaScript you can have variable type of string or type of object which is class of String (same thing - both are strings - but defined differently) thats why is double checked.,"('\n                \n                <span class=""comment-copy"">@svth I remembered. In JavaScript you can have variable type of string or type of object which is class of String (same thing - both are strings - but defined differently) thats why is double checked.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1221512/drax"" title=""29,943 reputation"" class=""comment-user"">DRAX</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment13303254_9436948"" aria-label=""Link to comment""><span title=""2012-04-26 10:04:13Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 26, 2012 at 10:04</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 26, 2012 at 10:04","('119',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
86,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,9436948.0,"This is what works for me:
if (typeof myVar === 'string' || myVar instanceof String)
// it's a string
else
// it's something else","('\n<p>This is what works for me:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> myVar === <span class=""hljs-string"">\'string\'</span> || myVar <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n<span class=""hljs-comment"">// it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n<span class=""hljs-comment"">// it\'s something else</span>\n</code></pre>\n    ',)","2012-04-25 13:59:56Z, License: CC BY-SA 3.0","('2745',)","('25516559',)",var somevar = new String('somestring') console.log(typeof somevar) // object,"('\n                \n                <span class=""comment-copy"">var somevar = new String(\'somestring\')  console.log(typeof somevar) // object</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/531954/danubian-sailor"" title=""22,416 reputation"" class=""comment-user"">Danubian Sailor</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment25516559_9436948"" aria-label=""Link to comment""><span title=""2013-07-09 08:52:33Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jul 9, 2013 at 8:52</span></a></span>\n            ',)","Jul 9, 2013 at 8:52","('54',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
87,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,9436948.0,"This is what works for me:
if (typeof myVar === 'string' || myVar instanceof String)
// it's a string
else
// it's something else","('\n<p>This is what works for me:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> myVar === <span class=""hljs-string"">\'string\'</span> || myVar <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n<span class=""hljs-comment"">// it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n<span class=""hljs-comment"">// it\'s something else</span>\n</code></pre>\n    ',)","2012-04-25 13:59:56Z, License: CC BY-SA 3.0","('2745',)","('51976839',)","-1 because the instanceof check here is pointless noise unless you're following some very unusual coding practices, and this answer does nothing to explain what it does or why you might use it. The only reason you'd ever need it is if you use object-wrapped strings, but object-wrapped strings are a worthless feature that nobody uses and Google and Crockford both condemn as bad practice (google-styleguide.googlecode.com/svn/trunk/…, crockford.com/javascript/recommend.html).","('\n                \n                <span class=""comment-copy"">-1 because the <code>instanceof</code> check here is pointless noise unless you\'re following some <i>very unusual</i> coding practices, and this answer does nothing to explain what it does or why you might use it. The only reason you\'d ever need it is if you use object-wrapped strings, but object-wrapped strings are a worthless feature that nobody uses and Google and Crockford both condemn as bad practice (<a href=""https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Wrapper_objects_for_primitive_types#Wrapper_objects_for_primitive_types"" rel=""nofollow noreferrer"">google-styleguide.googlecode.com/svn/trunk/…</a>, <a href=""http://www.crockford.com/javascript/recommend.html"" rel=""nofollow noreferrer"">crockford.com/javascript/recommend.html</a>).</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1709587/mark-amery"" title=""139,771 reputation"" class=""comment-user"">Mark Amery</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment51976839_9436948"" aria-label=""Link to comment""><span title=""2015-08-16 17:34:25Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Aug 16, 2015 at 17:34</span></a></span>\n            ',)","Aug 16, 2015 at 17:34","('144',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
88,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,9436948.0,"This is what works for me:
if (typeof myVar === 'string' || myVar instanceof String)
// it's a string
else
// it's something else","('\n<p>This is what works for me:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> myVar === <span class=""hljs-string"">\'string\'</span> || myVar <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n<span class=""hljs-comment"">// it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n<span class=""hljs-comment"">// it\'s something else</span>\n</code></pre>\n    ',)","2012-04-25 13:59:56Z, License: CC BY-SA 3.0","('2745',)","('52648861',)","I strenuously disagree that writing solid code which correctly handles unlikely cases is something to be avoided. Checking both typeof and instanceof feels like good advice if your code may be called by others'. @MarkAmery's postmessage edge case matters if you're asking ""what was I just postmessaged?"" - but you'd expect that to be handled at the interface and not allowed to propagate. Elsewhere, it seems correct to handle non-deprecated coding methods even if some JS aesthetes disapprove of them. NEVER comment your code as accepting String, unless it truly does!","('\n                \n                <span class=""comment-copy"">I strenuously disagree that writing solid code which correctly handles unlikely cases is something to be avoided. Checking both <code>typeof</code> and <code>instanceof</code> feels like good advice if your code may be called by others\'. @MarkAmery\'s <code>postmessage</code> edge case matters if you\'re asking ""what was I just <code>postmessage</code>d?"" - but you\'d expect that to be handled at the interface and not allowed to propagate.  Elsewhere, it seems correct to handle non-deprecated coding methods even if some JS aesthetes disapprove of them. NEVER comment your code as accepting String, unless it truly does!</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1316659/dewi-morgan"" title=""1,116 reputation"" class=""comment-user"">Dewi Morgan</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment52648861_9436948"" aria-label=""Link to comment""><span title=""2015-09-04 04:11:03Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Sep 4, 2015 at 4:11</span></a></span>\n            ',)","Sep 4, 2015 at 4:11","('204',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
89,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,4059166.0,"You can use typeof operator:
var booleanValue = true;
var numericalValue = 354;
var stringValue = ""This is a String"";
var stringObject = new String(""This is a String Object"");
console.log(typeof booleanValue) // displays ""boolean""
console.log(typeof numericalValue) // displays ""number""
console.log(typeof stringValue) // displays ""string""
console.log(typeof stringObject) // displays ""object""
Run code snippetExpand snippet
Example from this webpage. (Example was slightly modified though).
This won't work as expected in the case of strings created with new String(), but this is seldom used and recommended against[1][2]. See the other answers for how to handle these, if you so desire.
The Google JavaScript Style Guide says to never use primitive object wrappers.
Douglas Crockford recommended that primitive object wrappers be deprecated.","('\n<p>You can use <code>typeof</code> operator:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> booleanValue = <span class=""hljs-literal"">true</span>;\n<span class=""hljs-keyword"">var</span> numericalValue = <span class=""hljs-number"">354</span>;\n<span class=""hljs-keyword"">var</span> stringValue = <span class=""hljs-string"">""This is a String""</span>;\n<span class=""hljs-keyword"">var</span> stringObject = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""This is a String Object""</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> booleanValue) <span class=""hljs-comment"">// displays ""boolean""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> numericalValue) <span class=""hljs-comment"">// displays ""number""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringValue) <span class=""hljs-comment"">// displays ""string""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringObject) <span class=""hljs-comment"">// displays ""object""</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Example from <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"" rel=""noreferrer"">this webpage</a>. (Example was slightly modified though).</p>\n<p>This won\'t work as expected in the case of strings created with <code>new String()</code>, but this is seldom used and recommended against<sup>[1][2]</sup>. See the other answers for how to handle these, if you so desire.</p>\n<hr>\n<ol>\n<li>The Google JavaScript Style Guide <a href=""https://google.github.io/styleguide/jsguide.html#disallowed-features-wrapper-objects"" rel=""noreferrer"">says to never use primitive object wrappers</a>.</li>\n<li>Douglas Crockford <a href=""http://www.crockford.com/javascript/recommend.html"" rel=""noreferrer"">recommended that primitive object wrappers be deprecated</a>.</li>\n</ol>\n    ',)","2012-04-26 10:07:42Z, License: CC BY-SA 3.0","('2326',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
90,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,4059166.0,"You can use typeof operator:
var booleanValue = true;
var numericalValue = 354;
var stringValue = ""This is a String"";
var stringObject = new String(""This is a String Object"");
console.log(typeof booleanValue) // displays ""boolean""
console.log(typeof numericalValue) // displays ""number""
console.log(typeof stringValue) // displays ""string""
console.log(typeof stringObject) // displays ""object""
Run code snippetExpand snippet
Example from this webpage. (Example was slightly modified though).
This won't work as expected in the case of strings created with new String(), but this is seldom used and recommended against[1][2]. See the other answers for how to handle these, if you so desire.
The Google JavaScript Style Guide says to never use primitive object wrappers.
Douglas Crockford recommended that primitive object wrappers be deprecated.","('\n<p>You can use <code>typeof</code> operator:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> booleanValue = <span class=""hljs-literal"">true</span>;\n<span class=""hljs-keyword"">var</span> numericalValue = <span class=""hljs-number"">354</span>;\n<span class=""hljs-keyword"">var</span> stringValue = <span class=""hljs-string"">""This is a String""</span>;\n<span class=""hljs-keyword"">var</span> stringObject = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""This is a String Object""</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> booleanValue) <span class=""hljs-comment"">// displays ""boolean""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> numericalValue) <span class=""hljs-comment"">// displays ""number""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringValue) <span class=""hljs-comment"">// displays ""string""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringObject) <span class=""hljs-comment"">// displays ""object""</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Example from <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"" rel=""noreferrer"">this webpage</a>. (Example was slightly modified though).</p>\n<p>This won\'t work as expected in the case of strings created with <code>new String()</code>, but this is seldom used and recommended against<sup>[1][2]</sup>. See the other answers for how to handle these, if you so desire.</p>\n<hr>\n<ol>\n<li>The Google JavaScript Style Guide <a href=""https://google.github.io/styleguide/jsguide.html#disallowed-features-wrapper-objects"" rel=""noreferrer"">says to never use primitive object wrappers</a>.</li>\n<li>Douglas Crockford <a href=""http://www.crockford.com/javascript/recommend.html"" rel=""noreferrer"">recommended that primitive object wrappers be deprecated</a>.</li>\n</ol>\n    ',)","2012-04-26 10:07:42Z, License: CC BY-SA 3.0","('2326',)","('13303330',)","@Wolfy87 Please be advised that there are some cases that typeof stringValue might return ""object"" instead of ""string"". See comments on my answer.","('\n                \n                <span class=""comment-copy"">@Wolfy87 Please be advised that there are some cases that typeof stringValue might return ""object"" instead of ""string"". See comments on my answer.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1221512/drax"" title=""29,943 reputation"" class=""comment-user"">DRAX</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment13303330_4059166"" aria-label=""Link to comment""><span title=""2012-04-26 10:07:42Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 26, 2012 at 10:07</span></a></span>\n            ',)","Apr 26, 2012 at 10:07","('52',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
91,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,4059166.0,"You can use typeof operator:
var booleanValue = true;
var numericalValue = 354;
var stringValue = ""This is a String"";
var stringObject = new String(""This is a String Object"");
console.log(typeof booleanValue) // displays ""boolean""
console.log(typeof numericalValue) // displays ""number""
console.log(typeof stringValue) // displays ""string""
console.log(typeof stringObject) // displays ""object""
Run code snippetExpand snippet
Example from this webpage. (Example was slightly modified though).
This won't work as expected in the case of strings created with new String(), but this is seldom used and recommended against[1][2]. See the other answers for how to handle these, if you so desire.
The Google JavaScript Style Guide says to never use primitive object wrappers.
Douglas Crockford recommended that primitive object wrappers be deprecated.","('\n<p>You can use <code>typeof</code> operator:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> booleanValue = <span class=""hljs-literal"">true</span>;\n<span class=""hljs-keyword"">var</span> numericalValue = <span class=""hljs-number"">354</span>;\n<span class=""hljs-keyword"">var</span> stringValue = <span class=""hljs-string"">""This is a String""</span>;\n<span class=""hljs-keyword"">var</span> stringObject = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""This is a String Object""</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> booleanValue) <span class=""hljs-comment"">// displays ""boolean""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> numericalValue) <span class=""hljs-comment"">// displays ""number""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringValue) <span class=""hljs-comment"">// displays ""string""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringObject) <span class=""hljs-comment"">// displays ""object""</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Example from <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"" rel=""noreferrer"">this webpage</a>. (Example was slightly modified though).</p>\n<p>This won\'t work as expected in the case of strings created with <code>new String()</code>, but this is seldom used and recommended against<sup>[1][2]</sup>. See the other answers for how to handle these, if you so desire.</p>\n<hr>\n<ol>\n<li>The Google JavaScript Style Guide <a href=""https://google.github.io/styleguide/jsguide.html#disallowed-features-wrapper-objects"" rel=""noreferrer"">says to never use primitive object wrappers</a>.</li>\n<li>Douglas Crockford <a href=""http://www.crockford.com/javascript/recommend.html"" rel=""noreferrer"">recommended that primitive object wrappers be deprecated</a>.</li>\n</ol>\n    ',)","2012-04-26 10:07:42Z, License: CC BY-SA 3.0","('2326',)","('37156058',)","My preferred answer. The argument against it is that it 'fails' for object-wrapped strings like new String('foo'), but that doesn't matter because object-wrapped strings are a worthless feature that you shouldn't be using. The Google style guide forbids them, Douglas Crockford wants them deprecated, and no libraries use them. Pretend they don't exist, and use typeof without fear.","('\n                \n                <span class=""comment-copy"">My preferred answer. The argument against it is that it \'fails\' for object-wrapped strings like <code>new String(\'foo\')</code>, but that doesn\'t matter because object-wrapped strings are a worthless feature that you shouldn\'t be using. The Google style guide <a href=""https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Wrapper_objects_for_primitive_types#Wrapper_objects_for_primitive_types"" rel=""nofollow noreferrer"">forbids them</a>, Douglas Crockford <a href=""http://www.crockford.com/javascript/recommend.html"" rel=""nofollow noreferrer"">wants them deprecated</a>, and no libraries use them. Pretend they don\'t exist, and use <code>typeof</code> without fear.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1709587/mark-amery"" title=""139,771 reputation"" class=""comment-user"">Mark Amery</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment37156058_4059166"" aria-label=""Link to comment""><span title=""2014-06-06 21:13:05Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jun 6, 2014 at 21:13</span></a></span>\n                        <span title=""this comment was edited 5 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jun 6, 2014 at 21:13","('218',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
92,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,4059166.0,"You can use typeof operator:
var booleanValue = true;
var numericalValue = 354;
var stringValue = ""This is a String"";
var stringObject = new String(""This is a String Object"");
console.log(typeof booleanValue) // displays ""boolean""
console.log(typeof numericalValue) // displays ""number""
console.log(typeof stringValue) // displays ""string""
console.log(typeof stringObject) // displays ""object""
Run code snippetExpand snippet
Example from this webpage. (Example was slightly modified though).
This won't work as expected in the case of strings created with new String(), but this is seldom used and recommended against[1][2]. See the other answers for how to handle these, if you so desire.
The Google JavaScript Style Guide says to never use primitive object wrappers.
Douglas Crockford recommended that primitive object wrappers be deprecated.","('\n<p>You can use <code>typeof</code> operator:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> booleanValue = <span class=""hljs-literal"">true</span>;\n<span class=""hljs-keyword"">var</span> numericalValue = <span class=""hljs-number"">354</span>;\n<span class=""hljs-keyword"">var</span> stringValue = <span class=""hljs-string"">""This is a String""</span>;\n<span class=""hljs-keyword"">var</span> stringObject = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""This is a String Object""</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> booleanValue) <span class=""hljs-comment"">// displays ""boolean""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> numericalValue) <span class=""hljs-comment"">// displays ""number""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringValue) <span class=""hljs-comment"">// displays ""string""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringObject) <span class=""hljs-comment"">// displays ""object""</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Example from <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"" rel=""noreferrer"">this webpage</a>. (Example was slightly modified though).</p>\n<p>This won\'t work as expected in the case of strings created with <code>new String()</code>, but this is seldom used and recommended against<sup>[1][2]</sup>. See the other answers for how to handle these, if you so desire.</p>\n<hr>\n<ol>\n<li>The Google JavaScript Style Guide <a href=""https://google.github.io/styleguide/jsguide.html#disallowed-features-wrapper-objects"" rel=""noreferrer"">says to never use primitive object wrappers</a>.</li>\n<li>Douglas Crockford <a href=""http://www.crockford.com/javascript/recommend.html"" rel=""noreferrer"">recommended that primitive object wrappers be deprecated</a>.</li>\n</ol>\n    ',)","2012-04-26 10:07:42Z, License: CC BY-SA 3.0","('2326',)","('79999181',)",Didn't Douglas Crockford recommend that typeof be deprecated as well?,"('\n                \n                <span class=""comment-copy"">Didn\'t <a href=""http://www.crockford.com/javascript/recommend.html"" rel=""nofollow noreferrer"">Douglas Crockford recommend that <code>typeof</code> be deprecated</a> as well?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/571168/daniel-le"" title=""1,788 reputation"" class=""comment-user"">Daniel Le</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment79999181_4059166"" aria-label=""Link to comment""><span title=""2017-10-02 09:11:05Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Oct 2, 2017 at 9:11</span></a></span>\n            ',)","Oct 2, 2017 at 9:11","('8',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
93,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,4059166.0,"You can use typeof operator:
var booleanValue = true;
var numericalValue = 354;
var stringValue = ""This is a String"";
var stringObject = new String(""This is a String Object"");
console.log(typeof booleanValue) // displays ""boolean""
console.log(typeof numericalValue) // displays ""number""
console.log(typeof stringValue) // displays ""string""
console.log(typeof stringObject) // displays ""object""
Run code snippetExpand snippet
Example from this webpage. (Example was slightly modified though).
This won't work as expected in the case of strings created with new String(), but this is seldom used and recommended against[1][2]. See the other answers for how to handle these, if you so desire.
The Google JavaScript Style Guide says to never use primitive object wrappers.
Douglas Crockford recommended that primitive object wrappers be deprecated.","('\n<p>You can use <code>typeof</code> operator:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> booleanValue = <span class=""hljs-literal"">true</span>;\n<span class=""hljs-keyword"">var</span> numericalValue = <span class=""hljs-number"">354</span>;\n<span class=""hljs-keyword"">var</span> stringValue = <span class=""hljs-string"">""This is a String""</span>;\n<span class=""hljs-keyword"">var</span> stringObject = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""This is a String Object""</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> booleanValue) <span class=""hljs-comment"">// displays ""boolean""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> numericalValue) <span class=""hljs-comment"">// displays ""number""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringValue) <span class=""hljs-comment"">// displays ""string""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringObject) <span class=""hljs-comment"">// displays ""object""</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Example from <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"" rel=""noreferrer"">this webpage</a>. (Example was slightly modified though).</p>\n<p>This won\'t work as expected in the case of strings created with <code>new String()</code>, but this is seldom used and recommended against<sup>[1][2]</sup>. See the other answers for how to handle these, if you so desire.</p>\n<hr>\n<ol>\n<li>The Google JavaScript Style Guide <a href=""https://google.github.io/styleguide/jsguide.html#disallowed-features-wrapper-objects"" rel=""noreferrer"">says to never use primitive object wrappers</a>.</li>\n<li>Douglas Crockford <a href=""http://www.crockford.com/javascript/recommend.html"" rel=""noreferrer"">recommended that primitive object wrappers be deprecated</a>.</li>\n</ol>\n    ',)","2012-04-26 10:07:42Z, License: CC BY-SA 3.0","('2326',)","('82319563',)","@DanielLe, because he proposed a replacement that fixes some issues, not because he's against it in principle.","('\n                \n                <span class=""comment-copy"">@DanielLe, because he proposed a replacement that fixes some issues, not because he\'s against it in principle.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1341535/vsevolod-golovanov"" title=""3,966 reputation"" class=""comment-user"">Vsevolod Golovanov</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment82319563_4059166"" aria-label=""Link to comment""><span title=""2017-12-06 17:30:39Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Dec 6, 2017 at 17:30</span></a></span>\n            ',)","Dec 6, 2017 at 17:30","('11',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
94,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,4059166.0,"You can use typeof operator:
var booleanValue = true;
var numericalValue = 354;
var stringValue = ""This is a String"";
var stringObject = new String(""This is a String Object"");
console.log(typeof booleanValue) // displays ""boolean""
console.log(typeof numericalValue) // displays ""number""
console.log(typeof stringValue) // displays ""string""
console.log(typeof stringObject) // displays ""object""
Run code snippetExpand snippet
Example from this webpage. (Example was slightly modified though).
This won't work as expected in the case of strings created with new String(), but this is seldom used and recommended against[1][2]. See the other answers for how to handle these, if you so desire.
The Google JavaScript Style Guide says to never use primitive object wrappers.
Douglas Crockford recommended that primitive object wrappers be deprecated.","('\n<p>You can use <code>typeof</code> operator:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> booleanValue = <span class=""hljs-literal"">true</span>;\n<span class=""hljs-keyword"">var</span> numericalValue = <span class=""hljs-number"">354</span>;\n<span class=""hljs-keyword"">var</span> stringValue = <span class=""hljs-string"">""This is a String""</span>;\n<span class=""hljs-keyword"">var</span> stringObject = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""This is a String Object""</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> booleanValue) <span class=""hljs-comment"">// displays ""boolean""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> numericalValue) <span class=""hljs-comment"">// displays ""number""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringValue) <span class=""hljs-comment"">// displays ""string""</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-keyword"">typeof</span> stringObject) <span class=""hljs-comment"">// displays ""object""</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Example from <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"" rel=""noreferrer"">this webpage</a>. (Example was slightly modified though).</p>\n<p>This won\'t work as expected in the case of strings created with <code>new String()</code>, but this is seldom used and recommended against<sup>[1][2]</sup>. See the other answers for how to handle these, if you so desire.</p>\n<hr>\n<ol>\n<li>The Google JavaScript Style Guide <a href=""https://google.github.io/styleguide/jsguide.html#disallowed-features-wrapper-objects"" rel=""noreferrer"">says to never use primitive object wrappers</a>.</li>\n<li>Douglas Crockford <a href=""http://www.crockford.com/javascript/recommend.html"" rel=""noreferrer"">recommended that primitive object wrappers be deprecated</a>.</li>\n</ol>\n    ',)","2012-04-26 10:07:42Z, License: CC BY-SA 3.0","('2326',)","('92195158',)","If it causes you headaches, 99.99% of the time that's because you did not structure your code correctly. That's not NaN's fault for existing and doing what it does, that's something you should take note of, learn from, and bear in mind the next time you work with code that might yield it.","('\n                \n                <span class=""comment-copy"">If it causes you headaches, 99.99% of the time that\'s because you did not structure your code correctly. That\'s not NaN\'s fault for existing and doing what it does, that\'s something you should take note of, learn from, and bear in mind the next time you work with code that might yield it.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/740553/mike-pomax-kamermans"" title=""48,192 reputation"" class=""comment-user"">Mike \'Pomax\' Kamermans</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment92195158_4059166"" aria-label=""Link to comment""><span title=""2018-10-03 15:44:23Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Oct 3, 2018 at 15:44</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Oct 3, 2018 at 15:44","('6',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
95,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,17772086.0,"Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.
function isString(x) {
  return Object.prototype.toString.call(x) === ""[object String]""
}
Or, inline (I have an UltiSnip setup for this):
Object.prototype.toString.call(myVar) === ""[object String]""
FYI, Pablo Santa Cruz's answer is wrong, because typeof new String(""string"") is object
DRAX's answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won't argue against the popular vote.)
However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using lodash/underscore). disclaimer: I contributed to the lodash 4 codebase.
My original answer (which obviously flew right over a lot of heads) follows:
I transcoded this from underscore.js:
['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'].forEach( 
    function(name) { 
        window['is' + name] = function(obj) {
              return toString.call(obj) == '[object ' + name + ']';
    }; 
});
That will define isString, isNumber, etc.
In Node.js, this can be implemented as a module:
module.exports = [
  'Arguments',
  'Function', 
  'String', 
  'Number', 
  'Date', 
  'RegExp'
].reduce( (obj, name) => {
  obj[ 'is' + name ] = x => toString.call(x) == '[object ' + name + ']';
  return obj;
}, {});
[edit]: Object.prototype.toString.call(x) works to delineate between functions and async functions as well:
const fn1 = () => new Promise((resolve, reject) => setTimeout(() => resolve({}), 1000))
const fn2 = async () => ({})

console.log('fn1', Object.prototype.toString.call(fn1))
console.log('fn2', Object.prototype.toString.call(fn2))
Run code snippetExpand snippet","('\n<p>Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n</code></pre>\n<p>Or, inline (I have an UltiSnip setup for this):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(myVar) === <span class=""hljs-string"">""[object String]""</span>\n</code></pre>\n<p>FYI, Pablo Santa Cruz\'s answer is wrong, because <code>typeof new String(""string"")</code> is <code>object</code></p>\n<p>DRAX\'s answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won\'t argue against the popular vote.)</p>\n<p>However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using <a href=""https://lodash.com/"" rel=""noreferrer"">lodash</a>/<a href=""http://underscorejs.org/"" rel=""noreferrer"">underscore</a>). <em>disclaimer: I contributed to the lodash 4 codebase.</em></p>\n<p>My original answer (which obviously flew right over a lot of heads) follows:</p>\n<p>I transcoded this from underscore.js:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">[<span class=""hljs-string"">\'Arguments\'</span>, <span class=""hljs-string"">\'Function\'</span>, <span class=""hljs-string"">\'String\'</span>, <span class=""hljs-string"">\'Number\'</span>, <span class=""hljs-string"">\'Date\'</span>, <span class=""hljs-string"">\'RegExp\'</span>].<span class=""hljs-title function_"">forEach</span>( \n    <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">name</span>) { \n        <span class=""hljs-variable language_"">window</span>[<span class=""hljs-string"">\'is\'</span> + name] = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">obj</span>) {\n              <span class=""hljs-keyword"">return</span> toString.<span class=""hljs-title function_"">call</span>(obj) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n    }; \n});\n</code></pre>\n<p>That will define isString, isNumber, etc.</p>\n<hr>\n<p>In Node.js, this can be implemented as a module:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">module</span>.<span class=""hljs-property"">exports</span> = [\n  <span class=""hljs-string"">\'Arguments\'</span>,\n  <span class=""hljs-string"">\'Function\'</span>, \n  <span class=""hljs-string"">\'String\'</span>, \n  <span class=""hljs-string"">\'Number\'</span>, \n  <span class=""hljs-string"">\'Date\'</span>, \n  <span class=""hljs-string"">\'RegExp\'</span>\n].<span class=""hljs-title function_"">reduce</span>( <span class=""hljs-function"">(<span class=""hljs-params"">obj, name</span>) =&gt;</span> {\n  obj[ <span class=""hljs-string"">\'is\'</span> + name ] = <span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> toString.<span class=""hljs-title function_"">call</span>(x) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n  <span class=""hljs-keyword"">return</span> obj;\n}, {});\n</code></pre>\n<p>[edit]: <code>Object.prototype.toString.call(x)</code> works to delineate between functions and async functions as well:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn1</span> = (<span class=""hljs-params""></span>) =&gt; <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Promise</span>(<span class=""hljs-function"">(<span class=""hljs-params"">resolve, reject</span>) =&gt;</span> <span class=""hljs-built_in"">setTimeout</span>(<span class=""hljs-function"">() =&gt;</span> <span class=""hljs-title function_"">resolve</span>({}), <span class=""hljs-number"">1000</span>))\n<span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn2</span> = <span class=""hljs-keyword"">async</span> (<span class=""hljs-params""></span>) =&gt; ({})\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn1\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn1))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn2\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn2))</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2013-07-21 12:13:24Z, License: CC BY-SA 3.0","('251',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
96,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,17772086.0,"Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.
function isString(x) {
  return Object.prototype.toString.call(x) === ""[object String]""
}
Or, inline (I have an UltiSnip setup for this):
Object.prototype.toString.call(myVar) === ""[object String]""
FYI, Pablo Santa Cruz's answer is wrong, because typeof new String(""string"") is object
DRAX's answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won't argue against the popular vote.)
However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using lodash/underscore). disclaimer: I contributed to the lodash 4 codebase.
My original answer (which obviously flew right over a lot of heads) follows:
I transcoded this from underscore.js:
['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'].forEach( 
    function(name) { 
        window['is' + name] = function(obj) {
              return toString.call(obj) == '[object ' + name + ']';
    }; 
});
That will define isString, isNumber, etc.
In Node.js, this can be implemented as a module:
module.exports = [
  'Arguments',
  'Function', 
  'String', 
  'Number', 
  'Date', 
  'RegExp'
].reduce( (obj, name) => {
  obj[ 'is' + name ] = x => toString.call(x) == '[object ' + name + ']';
  return obj;
}, {});
[edit]: Object.prototype.toString.call(x) works to delineate between functions and async functions as well:
const fn1 = () => new Promise((resolve, reject) => setTimeout(() => resolve({}), 1000))
const fn2 = async () => ({})

console.log('fn1', Object.prototype.toString.call(fn1))
console.log('fn2', Object.prototype.toString.call(fn2))
Run code snippetExpand snippet","('\n<p>Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n</code></pre>\n<p>Or, inline (I have an UltiSnip setup for this):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(myVar) === <span class=""hljs-string"">""[object String]""</span>\n</code></pre>\n<p>FYI, Pablo Santa Cruz\'s answer is wrong, because <code>typeof new String(""string"")</code> is <code>object</code></p>\n<p>DRAX\'s answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won\'t argue against the popular vote.)</p>\n<p>However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using <a href=""https://lodash.com/"" rel=""noreferrer"">lodash</a>/<a href=""http://underscorejs.org/"" rel=""noreferrer"">underscore</a>). <em>disclaimer: I contributed to the lodash 4 codebase.</em></p>\n<p>My original answer (which obviously flew right over a lot of heads) follows:</p>\n<p>I transcoded this from underscore.js:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">[<span class=""hljs-string"">\'Arguments\'</span>, <span class=""hljs-string"">\'Function\'</span>, <span class=""hljs-string"">\'String\'</span>, <span class=""hljs-string"">\'Number\'</span>, <span class=""hljs-string"">\'Date\'</span>, <span class=""hljs-string"">\'RegExp\'</span>].<span class=""hljs-title function_"">forEach</span>( \n    <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">name</span>) { \n        <span class=""hljs-variable language_"">window</span>[<span class=""hljs-string"">\'is\'</span> + name] = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">obj</span>) {\n              <span class=""hljs-keyword"">return</span> toString.<span class=""hljs-title function_"">call</span>(obj) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n    }; \n});\n</code></pre>\n<p>That will define isString, isNumber, etc.</p>\n<hr>\n<p>In Node.js, this can be implemented as a module:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">module</span>.<span class=""hljs-property"">exports</span> = [\n  <span class=""hljs-string"">\'Arguments\'</span>,\n  <span class=""hljs-string"">\'Function\'</span>, \n  <span class=""hljs-string"">\'String\'</span>, \n  <span class=""hljs-string"">\'Number\'</span>, \n  <span class=""hljs-string"">\'Date\'</span>, \n  <span class=""hljs-string"">\'RegExp\'</span>\n].<span class=""hljs-title function_"">reduce</span>( <span class=""hljs-function"">(<span class=""hljs-params"">obj, name</span>) =&gt;</span> {\n  obj[ <span class=""hljs-string"">\'is\'</span> + name ] = <span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> toString.<span class=""hljs-title function_"">call</span>(x) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n  <span class=""hljs-keyword"">return</span> obj;\n}, {});\n</code></pre>\n<p>[edit]: <code>Object.prototype.toString.call(x)</code> works to delineate between functions and async functions as well:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn1</span> = (<span class=""hljs-params""></span>) =&gt; <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Promise</span>(<span class=""hljs-function"">(<span class=""hljs-params"">resolve, reject</span>) =&gt;</span> <span class=""hljs-built_in"">setTimeout</span>(<span class=""hljs-function"">() =&gt;</span> <span class=""hljs-title function_"">resolve</span>({}), <span class=""hljs-number"">1000</span>))\n<span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn2</span> = <span class=""hljs-keyword"">async</span> (<span class=""hljs-params""></span>) =&gt; ({})\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn1\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn1))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn2\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn2))</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2013-07-21 12:13:24Z, License: CC BY-SA 3.0","('251',)","('25920369',)",You recommend underscore.js (for what odd reason?) but you don't use it here. Moreover you pollute the global namespace with functions. In node.js you'd create a module that'd have all these functions (you can use global || window instead of window but that would be a bad approach to solve a problem you shouldn't have in the first place).,"('\n                \n                <span class=""comment-copy"">You recommend underscore.js (for what odd reason?) but you don\'t use it here. Moreover you pollute the global namespace with functions. In node.js you\'d create a module that\'d have all these functions (you <i>can</i> use <code>global || window</code> instead of <code>window</code> but that would be a bad approach to solve a problem you shouldn\'t have in the first place).</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1348195/benjamin-gruenbaum"" title=""268,691 reputation"" class=""comment-user"">Benjamin Gruenbaum</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment25920369_17772086"" aria-label=""Link to comment""><span title=""2013-07-21 12:13:24Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jul 21, 2013 at 12:13</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jul 21, 2013 at 12:13","('21',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
97,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,17772086.0,"Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.
function isString(x) {
  return Object.prototype.toString.call(x) === ""[object String]""
}
Or, inline (I have an UltiSnip setup for this):
Object.prototype.toString.call(myVar) === ""[object String]""
FYI, Pablo Santa Cruz's answer is wrong, because typeof new String(""string"") is object
DRAX's answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won't argue against the popular vote.)
However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using lodash/underscore). disclaimer: I contributed to the lodash 4 codebase.
My original answer (which obviously flew right over a lot of heads) follows:
I transcoded this from underscore.js:
['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'].forEach( 
    function(name) { 
        window['is' + name] = function(obj) {
              return toString.call(obj) == '[object ' + name + ']';
    }; 
});
That will define isString, isNumber, etc.
In Node.js, this can be implemented as a module:
module.exports = [
  'Arguments',
  'Function', 
  'String', 
  'Number', 
  'Date', 
  'RegExp'
].reduce( (obj, name) => {
  obj[ 'is' + name ] = x => toString.call(x) == '[object ' + name + ']';
  return obj;
}, {});
[edit]: Object.prototype.toString.call(x) works to delineate between functions and async functions as well:
const fn1 = () => new Promise((resolve, reject) => setTimeout(() => resolve({}), 1000))
const fn2 = async () => ({})

console.log('fn1', Object.prototype.toString.call(fn1))
console.log('fn2', Object.prototype.toString.call(fn2))
Run code snippetExpand snippet","('\n<p>Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n</code></pre>\n<p>Or, inline (I have an UltiSnip setup for this):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(myVar) === <span class=""hljs-string"">""[object String]""</span>\n</code></pre>\n<p>FYI, Pablo Santa Cruz\'s answer is wrong, because <code>typeof new String(""string"")</code> is <code>object</code></p>\n<p>DRAX\'s answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won\'t argue against the popular vote.)</p>\n<p>However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using <a href=""https://lodash.com/"" rel=""noreferrer"">lodash</a>/<a href=""http://underscorejs.org/"" rel=""noreferrer"">underscore</a>). <em>disclaimer: I contributed to the lodash 4 codebase.</em></p>\n<p>My original answer (which obviously flew right over a lot of heads) follows:</p>\n<p>I transcoded this from underscore.js:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">[<span class=""hljs-string"">\'Arguments\'</span>, <span class=""hljs-string"">\'Function\'</span>, <span class=""hljs-string"">\'String\'</span>, <span class=""hljs-string"">\'Number\'</span>, <span class=""hljs-string"">\'Date\'</span>, <span class=""hljs-string"">\'RegExp\'</span>].<span class=""hljs-title function_"">forEach</span>( \n    <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">name</span>) { \n        <span class=""hljs-variable language_"">window</span>[<span class=""hljs-string"">\'is\'</span> + name] = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">obj</span>) {\n              <span class=""hljs-keyword"">return</span> toString.<span class=""hljs-title function_"">call</span>(obj) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n    }; \n});\n</code></pre>\n<p>That will define isString, isNumber, etc.</p>\n<hr>\n<p>In Node.js, this can be implemented as a module:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">module</span>.<span class=""hljs-property"">exports</span> = [\n  <span class=""hljs-string"">\'Arguments\'</span>,\n  <span class=""hljs-string"">\'Function\'</span>, \n  <span class=""hljs-string"">\'String\'</span>, \n  <span class=""hljs-string"">\'Number\'</span>, \n  <span class=""hljs-string"">\'Date\'</span>, \n  <span class=""hljs-string"">\'RegExp\'</span>\n].<span class=""hljs-title function_"">reduce</span>( <span class=""hljs-function"">(<span class=""hljs-params"">obj, name</span>) =&gt;</span> {\n  obj[ <span class=""hljs-string"">\'is\'</span> + name ] = <span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> toString.<span class=""hljs-title function_"">call</span>(x) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n  <span class=""hljs-keyword"">return</span> obj;\n}, {});\n</code></pre>\n<p>[edit]: <code>Object.prototype.toString.call(x)</code> works to delineate between functions and async functions as well:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn1</span> = (<span class=""hljs-params""></span>) =&gt; <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Promise</span>(<span class=""hljs-function"">(<span class=""hljs-params"">resolve, reject</span>) =&gt;</span> <span class=""hljs-built_in"">setTimeout</span>(<span class=""hljs-function"">() =&gt;</span> <span class=""hljs-title function_"">resolve</span>({}), <span class=""hljs-number"">1000</span>))\n<span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn2</span> = <span class=""hljs-keyword"">async</span> (<span class=""hljs-params""></span>) =&gt; ({})\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn1\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn1))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn2\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn2))</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2013-07-21 12:13:24Z, License: CC BY-SA 3.0","('251',)","('26369354',)","@BenjaminGruenbaum I came looking for the answer to the OP's question, and didn't like any of the answers. So I checked what underscore did, and thought it was nifty enough to extract and modify a little (to avoid having to have the underscore library loaded). I'll clarify my post.","('\n                \n                <span class=""comment-copy"">@BenjaminGruenbaum I came looking for the answer to the OP\'s question, and didn\'t like any of the answers.  So I checked what underscore did, and thought it was nifty enough to extract and modify a little (to avoid having to have the underscore library loaded).  I\'ll clarify my post.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/912236/orwellophile"" title=""12,992 reputation"" class=""comment-user"">Orwellophile</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment26369354_17772086"" aria-label=""Link to comment""><span title=""2013-08-03 00:06:29Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Aug 3, 2013 at 0:06</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Aug 3, 2013 at 0:06","('24',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
98,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,17772086.0,"Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.
function isString(x) {
  return Object.prototype.toString.call(x) === ""[object String]""
}
Or, inline (I have an UltiSnip setup for this):
Object.prototype.toString.call(myVar) === ""[object String]""
FYI, Pablo Santa Cruz's answer is wrong, because typeof new String(""string"") is object
DRAX's answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won't argue against the popular vote.)
However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using lodash/underscore). disclaimer: I contributed to the lodash 4 codebase.
My original answer (which obviously flew right over a lot of heads) follows:
I transcoded this from underscore.js:
['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'].forEach( 
    function(name) { 
        window['is' + name] = function(obj) {
              return toString.call(obj) == '[object ' + name + ']';
    }; 
});
That will define isString, isNumber, etc.
In Node.js, this can be implemented as a module:
module.exports = [
  'Arguments',
  'Function', 
  'String', 
  'Number', 
  'Date', 
  'RegExp'
].reduce( (obj, name) => {
  obj[ 'is' + name ] = x => toString.call(x) == '[object ' + name + ']';
  return obj;
}, {});
[edit]: Object.prototype.toString.call(x) works to delineate between functions and async functions as well:
const fn1 = () => new Promise((resolve, reject) => setTimeout(() => resolve({}), 1000))
const fn2 = async () => ({})

console.log('fn1', Object.prototype.toString.call(fn1))
console.log('fn2', Object.prototype.toString.call(fn2))
Run code snippetExpand snippet","('\n<p>Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n</code></pre>\n<p>Or, inline (I have an UltiSnip setup for this):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(myVar) === <span class=""hljs-string"">""[object String]""</span>\n</code></pre>\n<p>FYI, Pablo Santa Cruz\'s answer is wrong, because <code>typeof new String(""string"")</code> is <code>object</code></p>\n<p>DRAX\'s answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won\'t argue against the popular vote.)</p>\n<p>However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using <a href=""https://lodash.com/"" rel=""noreferrer"">lodash</a>/<a href=""http://underscorejs.org/"" rel=""noreferrer"">underscore</a>). <em>disclaimer: I contributed to the lodash 4 codebase.</em></p>\n<p>My original answer (which obviously flew right over a lot of heads) follows:</p>\n<p>I transcoded this from underscore.js:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">[<span class=""hljs-string"">\'Arguments\'</span>, <span class=""hljs-string"">\'Function\'</span>, <span class=""hljs-string"">\'String\'</span>, <span class=""hljs-string"">\'Number\'</span>, <span class=""hljs-string"">\'Date\'</span>, <span class=""hljs-string"">\'RegExp\'</span>].<span class=""hljs-title function_"">forEach</span>( \n    <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">name</span>) { \n        <span class=""hljs-variable language_"">window</span>[<span class=""hljs-string"">\'is\'</span> + name] = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">obj</span>) {\n              <span class=""hljs-keyword"">return</span> toString.<span class=""hljs-title function_"">call</span>(obj) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n    }; \n});\n</code></pre>\n<p>That will define isString, isNumber, etc.</p>\n<hr>\n<p>In Node.js, this can be implemented as a module:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">module</span>.<span class=""hljs-property"">exports</span> = [\n  <span class=""hljs-string"">\'Arguments\'</span>,\n  <span class=""hljs-string"">\'Function\'</span>, \n  <span class=""hljs-string"">\'String\'</span>, \n  <span class=""hljs-string"">\'Number\'</span>, \n  <span class=""hljs-string"">\'Date\'</span>, \n  <span class=""hljs-string"">\'RegExp\'</span>\n].<span class=""hljs-title function_"">reduce</span>( <span class=""hljs-function"">(<span class=""hljs-params"">obj, name</span>) =&gt;</span> {\n  obj[ <span class=""hljs-string"">\'is\'</span> + name ] = <span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> toString.<span class=""hljs-title function_"">call</span>(x) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n  <span class=""hljs-keyword"">return</span> obj;\n}, {});\n</code></pre>\n<p>[edit]: <code>Object.prototype.toString.call(x)</code> works to delineate between functions and async functions as well:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn1</span> = (<span class=""hljs-params""></span>) =&gt; <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Promise</span>(<span class=""hljs-function"">(<span class=""hljs-params"">resolve, reject</span>) =&gt;</span> <span class=""hljs-built_in"">setTimeout</span>(<span class=""hljs-function"">() =&gt;</span> <span class=""hljs-title function_"">resolve</span>({}), <span class=""hljs-number"">1000</span>))\n<span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn2</span> = <span class=""hljs-keyword"">async</span> (<span class=""hljs-params""></span>) =&gt; ({})\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn1\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn1))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn2\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn2))</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2013-07-21 12:13:24Z, License: CC BY-SA 3.0","('251',)","('76309356',)","@Orwellophile, How is this better than DRAX's answer?","('\n                \n                <span class=""comment-copy"">@Orwellophile, <b>How is this better than DRAX\'s answer?</b></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/632951/pacerier"" title=""85,275 reputation"" class=""comment-user"">Pacerier</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment76309356_17772086"" aria-label=""Link to comment""><span title=""2017-06-20 19:53:14Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jun 20, 2017 at 19:53</span></a></span>\n            ',)","Jun 20, 2017 at 19:53","('35',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
99,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,17772086.0,"Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.
function isString(x) {
  return Object.prototype.toString.call(x) === ""[object String]""
}
Or, inline (I have an UltiSnip setup for this):
Object.prototype.toString.call(myVar) === ""[object String]""
FYI, Pablo Santa Cruz's answer is wrong, because typeof new String(""string"") is object
DRAX's answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won't argue against the popular vote.)
However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using lodash/underscore). disclaimer: I contributed to the lodash 4 codebase.
My original answer (which obviously flew right over a lot of heads) follows:
I transcoded this from underscore.js:
['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'].forEach( 
    function(name) { 
        window['is' + name] = function(obj) {
              return toString.call(obj) == '[object ' + name + ']';
    }; 
});
That will define isString, isNumber, etc.
In Node.js, this can be implemented as a module:
module.exports = [
  'Arguments',
  'Function', 
  'String', 
  'Number', 
  'Date', 
  'RegExp'
].reduce( (obj, name) => {
  obj[ 'is' + name ] = x => toString.call(x) == '[object ' + name + ']';
  return obj;
}, {});
[edit]: Object.prototype.toString.call(x) works to delineate between functions and async functions as well:
const fn1 = () => new Promise((resolve, reject) => setTimeout(() => resolve({}), 1000))
const fn2 = async () => ({})

console.log('fn1', Object.prototype.toString.call(fn1))
console.log('fn2', Object.prototype.toString.call(fn2))
Run code snippetExpand snippet","('\n<p>Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n</code></pre>\n<p>Or, inline (I have an UltiSnip setup for this):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(myVar) === <span class=""hljs-string"">""[object String]""</span>\n</code></pre>\n<p>FYI, Pablo Santa Cruz\'s answer is wrong, because <code>typeof new String(""string"")</code> is <code>object</code></p>\n<p>DRAX\'s answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won\'t argue against the popular vote.)</p>\n<p>However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using <a href=""https://lodash.com/"" rel=""noreferrer"">lodash</a>/<a href=""http://underscorejs.org/"" rel=""noreferrer"">underscore</a>). <em>disclaimer: I contributed to the lodash 4 codebase.</em></p>\n<p>My original answer (which obviously flew right over a lot of heads) follows:</p>\n<p>I transcoded this from underscore.js:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">[<span class=""hljs-string"">\'Arguments\'</span>, <span class=""hljs-string"">\'Function\'</span>, <span class=""hljs-string"">\'String\'</span>, <span class=""hljs-string"">\'Number\'</span>, <span class=""hljs-string"">\'Date\'</span>, <span class=""hljs-string"">\'RegExp\'</span>].<span class=""hljs-title function_"">forEach</span>( \n    <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">name</span>) { \n        <span class=""hljs-variable language_"">window</span>[<span class=""hljs-string"">\'is\'</span> + name] = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">obj</span>) {\n              <span class=""hljs-keyword"">return</span> toString.<span class=""hljs-title function_"">call</span>(obj) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n    }; \n});\n</code></pre>\n<p>That will define isString, isNumber, etc.</p>\n<hr>\n<p>In Node.js, this can be implemented as a module:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">module</span>.<span class=""hljs-property"">exports</span> = [\n  <span class=""hljs-string"">\'Arguments\'</span>,\n  <span class=""hljs-string"">\'Function\'</span>, \n  <span class=""hljs-string"">\'String\'</span>, \n  <span class=""hljs-string"">\'Number\'</span>, \n  <span class=""hljs-string"">\'Date\'</span>, \n  <span class=""hljs-string"">\'RegExp\'</span>\n].<span class=""hljs-title function_"">reduce</span>( <span class=""hljs-function"">(<span class=""hljs-params"">obj, name</span>) =&gt;</span> {\n  obj[ <span class=""hljs-string"">\'is\'</span> + name ] = <span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> toString.<span class=""hljs-title function_"">call</span>(x) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n  <span class=""hljs-keyword"">return</span> obj;\n}, {});\n</code></pre>\n<p>[edit]: <code>Object.prototype.toString.call(x)</code> works to delineate between functions and async functions as well:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn1</span> = (<span class=""hljs-params""></span>) =&gt; <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Promise</span>(<span class=""hljs-function"">(<span class=""hljs-params"">resolve, reject</span>) =&gt;</span> <span class=""hljs-built_in"">setTimeout</span>(<span class=""hljs-function"">() =&gt;</span> <span class=""hljs-title function_"">resolve</span>({}), <span class=""hljs-number"">1000</span>))\n<span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn2</span> = <span class=""hljs-keyword"">async</span> (<span class=""hljs-params""></span>) =&gt; ({})\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn1\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn1))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn2\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn2))</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2013-07-21 12:13:24Z, License: CC BY-SA 3.0","('251',)","('90027847',)","JS supports monkey patching, so it's possible to re-define the toString in the Object.prototype. So, I'd argue that relying on toString to check an object's type is, at best, a bad practice.","('\n                \n                <span class=""comment-copy"">JS supports monkey patching, so it\'s possible to re-define the <code>toString</code> in the <code>Object.prototype</code>.  So, I\'d argue that relying on <code>toString</code> to check an object\'s type is, at best, a bad practice.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/218618/andre-rodrigues"" title=""2,204 reputation"" class=""comment-user"">Andre Rodrigues</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment90027847_17772086"" aria-label=""Link to comment""><span title=""2018-07-26 01:44:28Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 26, 2018 at 1:44</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jul 26, 2018 at 1:44","('7',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
100,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,17772086.0,"Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.
function isString(x) {
  return Object.prototype.toString.call(x) === ""[object String]""
}
Or, inline (I have an UltiSnip setup for this):
Object.prototype.toString.call(myVar) === ""[object String]""
FYI, Pablo Santa Cruz's answer is wrong, because typeof new String(""string"") is object
DRAX's answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won't argue against the popular vote.)
However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using lodash/underscore). disclaimer: I contributed to the lodash 4 codebase.
My original answer (which obviously flew right over a lot of heads) follows:
I transcoded this from underscore.js:
['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'].forEach( 
    function(name) { 
        window['is' + name] = function(obj) {
              return toString.call(obj) == '[object ' + name + ']';
    }; 
});
That will define isString, isNumber, etc.
In Node.js, this can be implemented as a module:
module.exports = [
  'Arguments',
  'Function', 
  'String', 
  'Number', 
  'Date', 
  'RegExp'
].reduce( (obj, name) => {
  obj[ 'is' + name ] = x => toString.call(x) == '[object ' + name + ']';
  return obj;
}, {});
[edit]: Object.prototype.toString.call(x) works to delineate between functions and async functions as well:
const fn1 = () => new Promise((resolve, reject) => setTimeout(() => resolve({}), 1000))
const fn2 = async () => ({})

console.log('fn1', Object.prototype.toString.call(fn1))
console.log('fn2', Object.prototype.toString.call(fn2))
Run code snippetExpand snippet","('\n<p>Since 580+ people have voted for an incorrect answer, and 800+ have voted for a working but shotgun-style answer, I thought it might be worth redoing my answer in a simpler form that everybody can understand.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n</code></pre>\n<p>Or, inline (I have an UltiSnip setup for this):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(myVar) === <span class=""hljs-string"">""[object String]""</span>\n</code></pre>\n<p>FYI, Pablo Santa Cruz\'s answer is wrong, because <code>typeof new String(""string"")</code> is <code>object</code></p>\n<p>DRAX\'s answer is accurate and functional and should be the correct answer (since Pablo Santa Cruz is most definitely incorrect, and I won\'t argue against the popular vote.)</p>\n<p>However, this answer is also definitely correct, and actually the best answer (except, perhaps, for the suggestion of using <a href=""https://lodash.com/"" rel=""noreferrer"">lodash</a>/<a href=""http://underscorejs.org/"" rel=""noreferrer"">underscore</a>). <em>disclaimer: I contributed to the lodash 4 codebase.</em></p>\n<p>My original answer (which obviously flew right over a lot of heads) follows:</p>\n<p>I transcoded this from underscore.js:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">[<span class=""hljs-string"">\'Arguments\'</span>, <span class=""hljs-string"">\'Function\'</span>, <span class=""hljs-string"">\'String\'</span>, <span class=""hljs-string"">\'Number\'</span>, <span class=""hljs-string"">\'Date\'</span>, <span class=""hljs-string"">\'RegExp\'</span>].<span class=""hljs-title function_"">forEach</span>( \n    <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">name</span>) { \n        <span class=""hljs-variable language_"">window</span>[<span class=""hljs-string"">\'is\'</span> + name] = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">obj</span>) {\n              <span class=""hljs-keyword"">return</span> toString.<span class=""hljs-title function_"">call</span>(obj) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n    }; \n});\n</code></pre>\n<p>That will define isString, isNumber, etc.</p>\n<hr>\n<p>In Node.js, this can be implemented as a module:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">module</span>.<span class=""hljs-property"">exports</span> = [\n  <span class=""hljs-string"">\'Arguments\'</span>,\n  <span class=""hljs-string"">\'Function\'</span>, \n  <span class=""hljs-string"">\'String\'</span>, \n  <span class=""hljs-string"">\'Number\'</span>, \n  <span class=""hljs-string"">\'Date\'</span>, \n  <span class=""hljs-string"">\'RegExp\'</span>\n].<span class=""hljs-title function_"">reduce</span>( <span class=""hljs-function"">(<span class=""hljs-params"">obj, name</span>) =&gt;</span> {\n  obj[ <span class=""hljs-string"">\'is\'</span> + name ] = <span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> toString.<span class=""hljs-title function_"">call</span>(x) == <span class=""hljs-string"">\'[object \'</span> + name + <span class=""hljs-string"">\']\'</span>;\n  <span class=""hljs-keyword"">return</span> obj;\n}, {});\n</code></pre>\n<p>[edit]: <code>Object.prototype.toString.call(x)</code> works to delineate between functions and async functions as well:</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn1</span> = (<span class=""hljs-params""></span>) =&gt; <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Promise</span>(<span class=""hljs-function"">(<span class=""hljs-params"">resolve, reject</span>) =&gt;</span> <span class=""hljs-built_in"">setTimeout</span>(<span class=""hljs-function"">() =&gt;</span> <span class=""hljs-title function_"">resolve</span>({}), <span class=""hljs-number"">1000</span>))\n<span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">fn2</span> = <span class=""hljs-keyword"">async</span> (<span class=""hljs-params""></span>) =&gt; ({})\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn1\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn1))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'fn2\'</span>, <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(fn2))</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif2"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2013-07-21 12:13:24Z, License: CC BY-SA 3.0","('251',)","('104359708',)","i support having ""wrong answer"" and ""shotgun-style answer"" refer to post more specifically since the numbers of replies have aged, and then also explain why those answers are inferior as you present superior answer. my two-cents.","('\n                \n                <span class=""comment-copy"">i support having ""wrong answer"" and ""shotgun-style answer"" refer to post  more specifically since the numbers of replies have aged, and then also explain why those answers are inferior as you present superior answer.  my two-cents.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/7958667/smokeraven"" title=""111 reputation"" class=""comment-user"">SmokeRaven</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment104359708_17772086"" aria-label=""Link to comment""><span title=""2019-11-26 22:13:47Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Nov 26, 2019 at 22:13</span></a></span>\n            ',)","Nov 26, 2019 at 22:13","('10',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
101,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,20958909.0,"I recommend using the built-in functions from jQuery or lodash/Underscore. They're simpler to use and easier to read.
Either function will handle the case DRAX mentioned... that is, they both check if (A) the variable is a string literal or (B) it's an instance of the String object. In either case, these functions correctly identify the value as being a string.
lodash / Underscore.js
if(_.isString(myVar))
   //it's a string
else
   //it's something else
jQuery
if($.type(myVar) === ""string"")
   //it's a string
else
   //it's something else
See lodash Documentation for _.isString() for more details.
See jQuery Documentation for $.type() for more details.","('\n<p>I recommend using the built-in functions from <strong>jQuery</strong> or <strong>lodash/Underscore</strong>.  They\'re simpler to use and easier to read.</p>\n\n<p>Either function will handle the case DRAX mentioned...  that is, they <em>both</em> check if (A) the variable is a string literal or (B) it\'s an instance of the String object.  In either case, these functions correctly identify the value as being a string.</p>\n\n<p><strong>lodash / Underscore.js</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>(_.<span class=""hljs-title function_"">isString</span>(myVar))\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p><strong>jQuery</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>($.<span class=""hljs-title function_"">type</span>(myVar) === <span class=""hljs-string"">""string""</span>)\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p>See <a href=""https://lodash.com/docs#isString"">lodash Documentation for _.isString()</a> for more details.</p>\n\n<p>See <a href=""http://api.jquery.com/jQuery.type/"">jQuery Documentation for $.type()</a> for more details.</p>\n    ',)","2016-10-25 10:32:11Z, License: CC BY-SA 3.0","('97',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
102,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,20958909.0,"I recommend using the built-in functions from jQuery or lodash/Underscore. They're simpler to use and easier to read.
Either function will handle the case DRAX mentioned... that is, they both check if (A) the variable is a string literal or (B) it's an instance of the String object. In either case, these functions correctly identify the value as being a string.
lodash / Underscore.js
if(_.isString(myVar))
   //it's a string
else
   //it's something else
jQuery
if($.type(myVar) === ""string"")
   //it's a string
else
   //it's something else
See lodash Documentation for _.isString() for more details.
See jQuery Documentation for $.type() for more details.","('\n<p>I recommend using the built-in functions from <strong>jQuery</strong> or <strong>lodash/Underscore</strong>.  They\'re simpler to use and easier to read.</p>\n\n<p>Either function will handle the case DRAX mentioned...  that is, they <em>both</em> check if (A) the variable is a string literal or (B) it\'s an instance of the String object.  In either case, these functions correctly identify the value as being a string.</p>\n\n<p><strong>lodash / Underscore.js</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>(_.<span class=""hljs-title function_"">isString</span>(myVar))\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p><strong>jQuery</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>($.<span class=""hljs-title function_"">type</span>(myVar) === <span class=""hljs-string"">""string""</span>)\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p>See <a href=""https://lodash.com/docs#isString"">lodash Documentation for _.isString()</a> for more details.</p>\n\n<p>See <a href=""http://api.jquery.com/jQuery.type/"">jQuery Documentation for $.type()</a> for more details.</p>\n    ',)","2016-10-25 10:32:11Z, License: CC BY-SA 3.0","('97',)","('67737156',)","This is the essential of what is wrong with JS community - checking against primitive type is a one-liner and involves just language construction (one of the basic), but you recommend using external library. If someone already uses one of these libraries it might be a good idea, but downloading them just for that instead of simply checking the type is an overkill.","('\n                \n                <span class=""comment-copy"">This is the essential of what is wrong with JS community - checking against primitive type is a one-liner and involves just language construction (one of the basic), but you recommend using external library. If someone already uses one of these libraries it might be a good idea, but downloading them just for that instead of simply checking the type is an overkill.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2569801/rafa%c5%82-wrzeszcz"" title=""1,923 reputation"" class=""comment-user"">Rafał Wrzeszcz</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment67737156_20958909"" aria-label=""Link to comment""><span title=""2016-10-25 10:32:11Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Oct 25, 2016 at 10:32</span></a></span>\n            ',)","Oct 25, 2016 at 10:32","('156',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
103,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,20958909.0,"I recommend using the built-in functions from jQuery or lodash/Underscore. They're simpler to use and easier to read.
Either function will handle the case DRAX mentioned... that is, they both check if (A) the variable is a string literal or (B) it's an instance of the String object. In either case, these functions correctly identify the value as being a string.
lodash / Underscore.js
if(_.isString(myVar))
   //it's a string
else
   //it's something else
jQuery
if($.type(myVar) === ""string"")
   //it's a string
else
   //it's something else
See lodash Documentation for _.isString() for more details.
See jQuery Documentation for $.type() for more details.","('\n<p>I recommend using the built-in functions from <strong>jQuery</strong> or <strong>lodash/Underscore</strong>.  They\'re simpler to use and easier to read.</p>\n\n<p>Either function will handle the case DRAX mentioned...  that is, they <em>both</em> check if (A) the variable is a string literal or (B) it\'s an instance of the String object.  In either case, these functions correctly identify the value as being a string.</p>\n\n<p><strong>lodash / Underscore.js</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>(_.<span class=""hljs-title function_"">isString</span>(myVar))\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p><strong>jQuery</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>($.<span class=""hljs-title function_"">type</span>(myVar) === <span class=""hljs-string"">""string""</span>)\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p>See <a href=""https://lodash.com/docs#isString"">lodash Documentation for _.isString()</a> for more details.</p>\n\n<p>See <a href=""http://api.jquery.com/jQuery.type/"">jQuery Documentation for $.type()</a> for more details.</p>\n    ',)","2016-10-25 10:32:11Z, License: CC BY-SA 3.0","('97',)","('73590493',)","I'm going to agree with Rafal. I'm seeing everywhere that it improves ""readability"" to use one of these external libraries. If you know JavaScript, then that is easier to read than some external library you haven't used. _.every() is a little confusing to use at first, and something as simple as _.isBoolean() has confused devs at my company. A dev mistakenly thought it would be false if the value was a boolean and was false. English is easier to read than German for me, because I don't know German. Learn JavaScript and it will all make sense.","('\n                \n                <span class=""comment-copy"">I\'m going to agree with Rafal.  I\'m seeing everywhere that it improves ""readability"" to use one of these external libraries.  If you know JavaScript, then that is easier to read than some external library you haven\'t used.  <code>_.every()</code> is a little confusing to use at first, and something as simple as <code>_.isBoolean()</code> has confused devs at my company.  A dev mistakenly thought it would be false if the value was a boolean and was false.  English is easier to read than German for me, because I don\'t know German.  Learn JavaScript and it will all make sense.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/4792461/john-harding"" title=""438 reputation"" class=""comment-user"">John Harding</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment73590493_20958909"" aria-label=""Link to comment""><span title=""2017-04-06 16:33:13Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 6, 2017 at 16:33</span></a></span>\n                        <span title=""this comment was edited 5 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 6, 2017 at 16:33","('6',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
104,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,20958909.0,"I recommend using the built-in functions from jQuery or lodash/Underscore. They're simpler to use and easier to read.
Either function will handle the case DRAX mentioned... that is, they both check if (A) the variable is a string literal or (B) it's an instance of the String object. In either case, these functions correctly identify the value as being a string.
lodash / Underscore.js
if(_.isString(myVar))
   //it's a string
else
   //it's something else
jQuery
if($.type(myVar) === ""string"")
   //it's a string
else
   //it's something else
See lodash Documentation for _.isString() for more details.
See jQuery Documentation for $.type() for more details.","('\n<p>I recommend using the built-in functions from <strong>jQuery</strong> or <strong>lodash/Underscore</strong>.  They\'re simpler to use and easier to read.</p>\n\n<p>Either function will handle the case DRAX mentioned...  that is, they <em>both</em> check if (A) the variable is a string literal or (B) it\'s an instance of the String object.  In either case, these functions correctly identify the value as being a string.</p>\n\n<p><strong>lodash / Underscore.js</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>(_.<span class=""hljs-title function_"">isString</span>(myVar))\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p><strong>jQuery</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>($.<span class=""hljs-title function_"">type</span>(myVar) === <span class=""hljs-string"">""string""</span>)\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p>See <a href=""https://lodash.com/docs#isString"">lodash Documentation for _.isString()</a> for more details.</p>\n\n<p>See <a href=""http://api.jquery.com/jQuery.type/"">jQuery Documentation for $.type()</a> for more details.</p>\n    ',)","2016-10-25 10:32:11Z, License: CC BY-SA 3.0","('97',)","('75327889',)",@RafałWrzeszcz These libraries are fairly widely used and provide much useful (and tested) functionality. Especially lodash. I wouldn't recommend someone download the library only to use for this one solution.... but I would recommend every javascript developer download this library and see what they are missing out on. ;),"('\n                \n                <span class=""comment-copy"">@RafałWrzeszcz These libraries are fairly widely used and provide much useful (and tested) functionality.  Especially lodash.  I wouldn\'t recommend someone download the library only to use for this one solution.... but I would recommend every javascript developer download this library and see what they are missing out on.  ;)</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/940783/clearcloud8"" title=""4,940 reputation"" class=""comment-user"">ClearCloud8</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment75327889_20958909"" aria-label=""Link to comment""><span title=""2017-05-24 10:27:48Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">May 24, 2017 at 10:27</span></a></span>\n            ',)","May 24, 2017 at 10:27","('22',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
105,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,20958909.0,"I recommend using the built-in functions from jQuery or lodash/Underscore. They're simpler to use and easier to read.
Either function will handle the case DRAX mentioned... that is, they both check if (A) the variable is a string literal or (B) it's an instance of the String object. In either case, these functions correctly identify the value as being a string.
lodash / Underscore.js
if(_.isString(myVar))
   //it's a string
else
   //it's something else
jQuery
if($.type(myVar) === ""string"")
   //it's a string
else
   //it's something else
See lodash Documentation for _.isString() for more details.
See jQuery Documentation for $.type() for more details.","('\n<p>I recommend using the built-in functions from <strong>jQuery</strong> or <strong>lodash/Underscore</strong>.  They\'re simpler to use and easier to read.</p>\n\n<p>Either function will handle the case DRAX mentioned...  that is, they <em>both</em> check if (A) the variable is a string literal or (B) it\'s an instance of the String object.  In either case, these functions correctly identify the value as being a string.</p>\n\n<p><strong>lodash / Underscore.js</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>(_.<span class=""hljs-title function_"">isString</span>(myVar))\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p><strong>jQuery</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>($.<span class=""hljs-title function_"">type</span>(myVar) === <span class=""hljs-string"">""string""</span>)\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p>See <a href=""https://lodash.com/docs#isString"">lodash Documentation for _.isString()</a> for more details.</p>\n\n<p>See <a href=""http://api.jquery.com/jQuery.type/"">jQuery Documentation for $.type()</a> for more details.</p>\n    ',)","2016-10-25 10:32:11Z, License: CC BY-SA 3.0","('97',)","('80545599',)","All y'all are missing the point of a library like Lodash: not speed. Not ""ease of development"". The reason to use a library like Lodash provides ""defensiveness"" against issues that will blow up your js app. Fatal errors happen when you attempt to do string operations on an object (or vice versa), and Lodash provides tremendous value around preventing those errors.","('\n                \n                <span class=""comment-copy"">All y\'all are missing the point of a library like Lodash: not speed.  Not ""ease of development"".  <b>The reason</b> to use a library like Lodash provides ""defensiveness"" against issues that will blow up your js app.  Fatal errors happen when you attempt to do string operations on an object (or vice versa), and Lodash provides tremendous value around preventing those errors.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/870729/random-user-name"" title=""25,522 reputation"" class=""comment-user"">random_user_name</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment80545599_20958909"" aria-label=""Link to comment""><span title=""2017-10-17 21:15:12Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Oct 17, 2017 at 21:15</span></a></span>\n            ',)","Oct 17, 2017 at 21:15","('23',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
106,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,20958909.0,"I recommend using the built-in functions from jQuery or lodash/Underscore. They're simpler to use and easier to read.
Either function will handle the case DRAX mentioned... that is, they both check if (A) the variable is a string literal or (B) it's an instance of the String object. In either case, these functions correctly identify the value as being a string.
lodash / Underscore.js
if(_.isString(myVar))
   //it's a string
else
   //it's something else
jQuery
if($.type(myVar) === ""string"")
   //it's a string
else
   //it's something else
See lodash Documentation for _.isString() for more details.
See jQuery Documentation for $.type() for more details.","('\n<p>I recommend using the built-in functions from <strong>jQuery</strong> or <strong>lodash/Underscore</strong>.  They\'re simpler to use and easier to read.</p>\n\n<p>Either function will handle the case DRAX mentioned...  that is, they <em>both</em> check if (A) the variable is a string literal or (B) it\'s an instance of the String object.  In either case, these functions correctly identify the value as being a string.</p>\n\n<p><strong>lodash / Underscore.js</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>(_.<span class=""hljs-title function_"">isString</span>(myVar))\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p><strong>jQuery</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span>($.<span class=""hljs-title function_"">type</span>(myVar) === <span class=""hljs-string"">""string""</span>)\n   <span class=""hljs-comment"">//it\'s a string</span>\n<span class=""hljs-keyword"">else</span>\n   <span class=""hljs-comment"">//it\'s something else</span>\n</code></pre>\n\n<p>See <a href=""https://lodash.com/docs#isString"">lodash Documentation for _.isString()</a> for more details.</p>\n\n<p>See <a href=""http://api.jquery.com/jQuery.type/"">jQuery Documentation for $.type()</a> for more details.</p>\n    ',)","2016-10-25 10:32:11Z, License: CC BY-SA 3.0","('97',)","('115300380',)","All of these comments are valid but, man...only with JS would the suggestion of using a third-party library to check a type not get you laughed out of the dev room.","('\n                \n                <span class=""comment-copy"">All of these comments are valid but, man...only with JS would the suggestion of using a third-party library to <i>check a type</i> not get you laughed out of the dev room.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1291927/mickmalone1983"" title=""1,054 reputation"" class=""comment-user"">MickMalone1983</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment115300380_20958909"" aria-label=""Link to comment""><span title=""2020-12-09 14:50:03Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Dec 9, 2020 at 14:50</span></a></span>\n            ',)","Dec 9, 2020 at 14:50","('10',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
107,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,40569653.0,"Edit: The current way to do it is typeof value === 'string'. For example:
const str = 'hello';
if (typeof str === 'string') { ... }
Below has been deprecated since node v4.
If you work on the node.js environment, you can simply use the built-in function isString in utils.
const util = require('util');
if (util.isString(myVar)) {}","('\n<p>Edit: The current way to do it is <code>typeof value === \'string\'</code>. For example:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> str = <span class=""hljs-string"">\'hello\'</span>;\n<span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> str === <span class=""hljs-string"">\'string\'</span>) { ... }\n</code></pre>\n<h2>Below has been deprecated since node v4.</h2>\n<p>If you work on the node.js environment, you can simply use the built-in function isString in utils.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> util = <span class=""hljs-built_in"">require</span>(<span class=""hljs-string"">\'util\'</span>);\n<span class=""hljs-keyword"">if</span> (util.<span class=""hljs-title function_"">isString</span>(myVar)) {}\n</code></pre>\n    ',)","2017-11-09 23:09:32Z, License: CC BY-SA 3.0","('62',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
108,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,40569653.0,"Edit: The current way to do it is typeof value === 'string'. For example:
const str = 'hello';
if (typeof str === 'string') { ... }
Below has been deprecated since node v4.
If you work on the node.js environment, you can simply use the built-in function isString in utils.
const util = require('util');
if (util.isString(myVar)) {}","('\n<p>Edit: The current way to do it is <code>typeof value === \'string\'</code>. For example:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> str = <span class=""hljs-string"">\'hello\'</span>;\n<span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> str === <span class=""hljs-string"">\'string\'</span>) { ... }\n</code></pre>\n<h2>Below has been deprecated since node v4.</h2>\n<p>If you work on the node.js environment, you can simply use the built-in function isString in utils.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> util = <span class=""hljs-built_in"">require</span>(<span class=""hljs-string"">\'util\'</span>);\n<span class=""hljs-keyword"">if</span> (util.<span class=""hljs-title function_"">isString</span>(myVar)) {}\n</code></pre>\n    ',)","2017-11-09 23:09:32Z, License: CC BY-SA 3.0","('62',)","('81375845',)",Is there any replacement?,"('\n                \n                <span class=""comment-copy"">Is there any replacement?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/58129/anthony-kong"" title=""36,805 reputation"" class=""comment-user"">Anthony Kong</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment81375845_40569653"" aria-label=""Link to comment""><span title=""2017-11-09 23:09:32Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Nov 9, 2017 at 23:09</span></a></span>\n            ',)","Nov 9, 2017 at 23:09","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
109,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,40569653.0,"Edit: The current way to do it is typeof value === 'string'. For example:
const str = 'hello';
if (typeof str === 'string') { ... }
Below has been deprecated since node v4.
If you work on the node.js environment, you can simply use the built-in function isString in utils.
const util = require('util');
if (util.isString(myVar)) {}","('\n<p>Edit: The current way to do it is <code>typeof value === \'string\'</code>. For example:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> str = <span class=""hljs-string"">\'hello\'</span>;\n<span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> str === <span class=""hljs-string"">\'string\'</span>) { ... }\n</code></pre>\n<h2>Below has been deprecated since node v4.</h2>\n<p>If you work on the node.js environment, you can simply use the built-in function isString in utils.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> util = <span class=""hljs-built_in"">require</span>(<span class=""hljs-string"">\'util\'</span>);\n<span class=""hljs-keyword"">if</span> (util.<span class=""hljs-title function_"">isString</span>(myVar)) {}\n</code></pre>\n    ',)","2017-11-09 23:09:32Z, License: CC BY-SA 3.0","('62',)","('93046241',)","Documents say ""Use typeof value === 'string' instead.""","('\n                \n                <span class=""comment-copy"">Documents say ""Use <code>typeof value === \'string\'</code> instead.""</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3965/mr-rogers"" title=""6,061 reputation"" class=""comment-user"">Mr Rogers</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment93046241_40569653"" aria-label=""Link to comment""><span title=""2018-10-30 22:50:00Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Oct 30, 2018 at 22:50</span></a></span>\n            ',)","Oct 30, 2018 at 22:50","('4',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
110,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,40569653.0,"Edit: The current way to do it is typeof value === 'string'. For example:
const str = 'hello';
if (typeof str === 'string') { ... }
Below has been deprecated since node v4.
If you work on the node.js environment, you can simply use the built-in function isString in utils.
const util = require('util');
if (util.isString(myVar)) {}","('\n<p>Edit: The current way to do it is <code>typeof value === \'string\'</code>. For example:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> str = <span class=""hljs-string"">\'hello\'</span>;\n<span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> str === <span class=""hljs-string"">\'string\'</span>) { ... }\n</code></pre>\n<h2>Below has been deprecated since node v4.</h2>\n<p>If you work on the node.js environment, you can simply use the built-in function isString in utils.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> util = <span class=""hljs-built_in"">require</span>(<span class=""hljs-string"">\'util\'</span>);\n<span class=""hljs-keyword"">if</span> (util.<span class=""hljs-title function_"">isString</span>(myVar)) {}\n</code></pre>\n    ',)","2017-11-09 23:09:32Z, License: CC BY-SA 3.0","('62',)","('108383501',)",x = new String('x'); x.isString(x); returns false. There is util.types.isStringObject() but that returns false for x = 'x' type string. Two utility functions that provide absolutely no utility...,"('\n                \n                <span class=""comment-copy""><code>x = new String(\'x\'); x.isString(x);</code> returns <i>false</i>. There is <code>util.types.isStringObject()</code> but that returns false for <code>x = \'x\'</code> type string. Two utility functions that provide absolutely no utility...</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2038383/spinkus"" title=""7,381 reputation"" class=""comment-user"">spinkus</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment108383501_40569653"" aria-label=""Link to comment""><span title=""2020-04-17 07:29:43Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Apr 17, 2020 at 7:29</span></a></span>\n            ',)","Apr 17, 2020 at 7:29","('2',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
111,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,24941988.0,"function isString (obj) {
  return (Object.prototype.toString.call(obj) === '[object String]');
}
I saw that here:
http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span> (obj) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(obj) === <span class=""hljs-string"">\'[object String]\'</span>);\n}\n</code></pre>\n\n<p>I saw that here:</p>\n\n<p><a href=""http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/"">http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/</a></p>\n    ',)","2015-05-28 06:53:02Z, License: CC BY-SA 3.0","('47',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
112,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,24941988.0,"function isString (obj) {
  return (Object.prototype.toString.call(obj) === '[object String]');
}
I saw that here:
http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span> (obj) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(obj) === <span class=""hljs-string"">\'[object String]\'</span>);\n}\n</code></pre>\n\n<p>I saw that here:</p>\n\n<p><a href=""http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/"">http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/</a></p>\n    ',)","2015-05-28 06:53:02Z, License: CC BY-SA 3.0","('47',)","('49074950',)",I think this solution is the most robust since it handles cross-frame/cross-window reference scenarios as mentioned in the URL provided in the answer.,"('\n                \n                <span class=""comment-copy"">I think this solution is the most robust since it handles cross-frame/cross-window reference scenarios as mentioned in the URL provided in the answer.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/719934/ewh"" title=""984 reputation"" class=""comment-user"">ewh</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment49074950_24941988"" aria-label=""Link to comment""><span title=""2015-05-28 06:53:02Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">May 28, 2015 at 6:53</span></a></span>\n            ',)","May 28, 2015 at 6:53","('4',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
113,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,24941988.0,"function isString (obj) {
  return (Object.prototype.toString.call(obj) === '[object String]');
}
I saw that here:
http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span> (obj) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(obj) === <span class=""hljs-string"">\'[object String]\'</span>);\n}\n</code></pre>\n\n<p>I saw that here:</p>\n\n<p><a href=""http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/"">http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/</a></p>\n    ',)","2015-05-28 06:53:02Z, License: CC BY-SA 3.0","('47',)","('63722774',)","Great answer, it looks like Underscore.js also uses this method!","('\n                \n                <span class=""comment-copy"">Great answer, it looks like Underscore.js also uses this method!</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/987864/daan"" title=""7,585 reputation"" class=""comment-user"">Daan</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment63722774_24941988"" aria-label=""Link to comment""><span title=""2016-07-01 13:25:37Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jul 1, 2016 at 13:25</span></a></span>\n            ',)","Jul 1, 2016 at 13:25","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
114,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,24941988.0,"function isString (obj) {
  return (Object.prototype.toString.call(obj) === '[object String]');
}
I saw that here:
http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span> (obj) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(obj) === <span class=""hljs-string"">\'[object String]\'</span>);\n}\n</code></pre>\n\n<p>I saw that here:</p>\n\n<p><a href=""http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/"">http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/</a></p>\n    ',)","2015-05-28 06:53:02Z, License: CC BY-SA 3.0","('47',)","('69185943',)","@ling Just curious, why do you put parenthesis around Object.prototype.toString.call(obj) === '[object String]'?","('\n                \n                <span class=""comment-copy"">@ling Just curious, why do you put parenthesis around <code>Object.prototype.toString.call(obj) === \'[object String]\'</code>?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/5503323/stubbornshowaguy"" title=""249 reputation"" class=""comment-user"">StubbornShowaGuy</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment69185943_24941988"" aria-label=""Link to comment""><span title=""2016-12-06 05:37:40Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Dec 6, 2016 at 5:37</span></a></span>\n            ',)","Dec 6, 2016 at 5:37","('2',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
115,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,24941988.0,"function isString (obj) {
  return (Object.prototype.toString.call(obj) === '[object String]');
}
I saw that here:
http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span> (obj) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(obj) === <span class=""hljs-string"">\'[object String]\'</span>);\n}\n</code></pre>\n\n<p>I saw that here:</p>\n\n<p><a href=""http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/"">http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/</a></p>\n    ',)","2015-05-28 06:53:02Z, License: CC BY-SA 3.0","('47',)","('87460118',)",How is that different from @Orwellophile's answer?,"('\n                \n                <span class=""comment-copy"">How is that different from @Orwellophile\'s answer?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/472610/jonathan-h"" title=""7,471 reputation"" class=""comment-user"">Jonathan H</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment87460118_24941988"" aria-label=""Link to comment""><span title=""2018-05-07 19:45:53Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">May 7, 2018 at 19:45</span></a></span>\n            ',)","May 7, 2018 at 19:45","('2',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
116,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,24941988.0,"function isString (obj) {
  return (Object.prototype.toString.call(obj) === '[object String]');
}
I saw that here:
http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span> (obj) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(obj) === <span class=""hljs-string"">\'[object String]\'</span>);\n}\n</code></pre>\n\n<p>I saw that here:</p>\n\n<p><a href=""http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/"">http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/</a></p>\n    ',)","2015-05-28 06:53:02Z, License: CC BY-SA 3.0","('47',)","('120765934',)","@JonathanH - if you look at the edit history of Orwellophile's answer, at the time this answer was written, Orwellophile said something quite complex. It was only in 2016 that that answer was edited to include this. So ling should get the credit!","('\n                \n                <span class=""comment-copy"">@JonathanH - if you look at the edit history of Orwellophile\'s answer, at the time <i>this</i> answer was written, Orwellophile said something quite complex. It was only in 2016 that that answer was edited to include this. So ling should get the credit!</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/199364/toolmakersteve"" title=""16,317 reputation"" class=""comment-user"">ToolmakerSteve</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment120765934_24941988"" aria-label=""Link to comment""><span title=""2021-07-10 21:57:41Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 10, 2021 at 21:57</span></a></span>\n            ',)","Jul 10, 2021 at 21:57","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
117,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,16215800.0,"Best way:
var s = 'String';
var a = [1,2,3];
var o = {key: 'val'};

(s.constructor === String) && console.log('its a string');
(a.constructor === Array) && console.log('its an array');
(o.constructor === Object) && console.log('its an object');
(o.constructor === Number || s.constructor === Boolean) && console.log('this won\'t run');
Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.
Also, Duck-Typing: ""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array"" Meaning, check its properties.
Hope this helps.
Edit; 12/05/2016
Remember, you can always use combinations of approaches too. Here's an example of using an inline map of actions with typeof:
var type = { 'number': Math.sqrt.bind(Math), ... }[ typeof datum ];
Here's a more 'real world' example of using inline-maps:
function is(datum) {
    var isnt = !{ null: true, undefined: true, '': true, false: false, 0: false }[ datum ];
    return !isnt;
}
console.log( is(0), is(false), is(undefined), ... );  // >> true true false
This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between null & 0!
Many times you don't even care about its type. Another way to circumvent typing is combining Duck-Type sets:
this.id = ""998"";  // use a number or a string-equivalent
function get(id) {
    if (!id || !id.toString) return;
    if (id.toString() === this.id.toString()) http( id || +this.id );
    // if (+id === +this.id) ...;
}
Both Number.prototype and String.prototype have a .toString() method. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the http function as a Number. In other words, we didn't even care what its type was.
Hope that gives you more to work with :)","('\n<p>Best way:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> s = <span class=""hljs-string"">\'String\'</span>;\n<span class=""hljs-keyword"">var</span> a = [<span class=""hljs-number"">1</span>,<span class=""hljs-number"">2</span>,<span class=""hljs-number"">3</span>];\n<span class=""hljs-keyword"">var</span> o = {<span class=""hljs-attr"">key</span>: <span class=""hljs-string"">\'val\'</span>};\n\n(s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its a string\'</span>);\n(a.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Array</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an array\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Object</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an object\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Number</span> || s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Boolean</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'this won\\\'t run\'</span>);\n</code></pre>\n<p>Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.</p>\n<p>Also, Duck-Typing:\n""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array""\nMeaning, check its properties.</p>\n<p>Hope this helps.</p>\n<h3>Edit; 12/05/2016</h3>\n<p>Remember, you can always use combinations of approaches too. Here\'s an example of using an <em>inline map</em> of actions with <em>typeof</em>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> type = { <span class=""hljs-string"">\'number\'</span>: <span class=""hljs-title class_"">Math</span>.<span class=""hljs-property"">sqrt</span>.<span class=""hljs-title function_"">bind</span>(<span class=""hljs-title class_"">Math</span>), ... }[ <span class=""hljs-keyword"">typeof</span> datum ];\n</code></pre>\n<p>Here\'s a more \'real world\' example of using inline-maps:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">is</span>(<span class=""hljs-params"">datum</span>) {\n    <span class=""hljs-keyword"">var</span> isnt = !{ <span class=""hljs-attr"">null</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">undefined</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-string"">\'\'</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">false</span>: <span class=""hljs-literal"">false</span>, <span class=""hljs-number"">0</span>: <span class=""hljs-literal"">false</span> }[ datum ];\n    <span class=""hljs-keyword"">return</span> !isnt;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>( <span class=""hljs-title function_"">is</span>(<span class=""hljs-number"">0</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">false</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">undefined</span>), ... );  <span class=""hljs-comment"">// &gt;&gt; true true false</span>\n</code></pre>\n<p>This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between <code>null</code> &amp; <code>0</code>!</p>\n<p>Many times <em>you don\'t even care about its type</em>. Another way to circumvent typing is combining Duck-Type sets:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> = <span class=""hljs-string"">""998""</span>;  <span class=""hljs-comment"">// use a number or a string-equivalent</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">get</span>(<span class=""hljs-params"">id</span>) {\n    <span class=""hljs-keyword"">if</span> (!id || !id.<span class=""hljs-property"">toString</span>) <span class=""hljs-keyword"">return</span>;\n    <span class=""hljs-keyword"">if</span> (id.<span class=""hljs-title function_"">toString</span>() === <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span>.<span class=""hljs-title function_"">toString</span>()) <span class=""hljs-title function_"">http</span>( id || +<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> );\n    <span class=""hljs-comment"">// if (+id === +this.id) ...;</span>\n}\n</code></pre>\n<p>Both <code>Number.prototype</code> <strong>and</strong> <code>String.prototype</code> have a <code>.toString() method</code>. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the <code>http</code> function as a <code>Number</code>. In other words, we didn\'t even <em>care</em> what its type was.</p>\n<p>Hope that gives you more to work with :)</p>\n    ',)","2013-06-17 05:18:46Z, License: CC BY-SA 3.0","('38',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
118,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,16215800.0,"Best way:
var s = 'String';
var a = [1,2,3];
var o = {key: 'val'};

(s.constructor === String) && console.log('its a string');
(a.constructor === Array) && console.log('its an array');
(o.constructor === Object) && console.log('its an object');
(o.constructor === Number || s.constructor === Boolean) && console.log('this won\'t run');
Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.
Also, Duck-Typing: ""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array"" Meaning, check its properties.
Hope this helps.
Edit; 12/05/2016
Remember, you can always use combinations of approaches too. Here's an example of using an inline map of actions with typeof:
var type = { 'number': Math.sqrt.bind(Math), ... }[ typeof datum ];
Here's a more 'real world' example of using inline-maps:
function is(datum) {
    var isnt = !{ null: true, undefined: true, '': true, false: false, 0: false }[ datum ];
    return !isnt;
}
console.log( is(0), is(false), is(undefined), ... );  // >> true true false
This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between null & 0!
Many times you don't even care about its type. Another way to circumvent typing is combining Duck-Type sets:
this.id = ""998"";  // use a number or a string-equivalent
function get(id) {
    if (!id || !id.toString) return;
    if (id.toString() === this.id.toString()) http( id || +this.id );
    // if (+id === +this.id) ...;
}
Both Number.prototype and String.prototype have a .toString() method. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the http function as a Number. In other words, we didn't even care what its type was.
Hope that gives you more to work with :)","('\n<p>Best way:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> s = <span class=""hljs-string"">\'String\'</span>;\n<span class=""hljs-keyword"">var</span> a = [<span class=""hljs-number"">1</span>,<span class=""hljs-number"">2</span>,<span class=""hljs-number"">3</span>];\n<span class=""hljs-keyword"">var</span> o = {<span class=""hljs-attr"">key</span>: <span class=""hljs-string"">\'val\'</span>};\n\n(s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its a string\'</span>);\n(a.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Array</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an array\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Object</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an object\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Number</span> || s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Boolean</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'this won\\\'t run\'</span>);\n</code></pre>\n<p>Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.</p>\n<p>Also, Duck-Typing:\n""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array""\nMeaning, check its properties.</p>\n<p>Hope this helps.</p>\n<h3>Edit; 12/05/2016</h3>\n<p>Remember, you can always use combinations of approaches too. Here\'s an example of using an <em>inline map</em> of actions with <em>typeof</em>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> type = { <span class=""hljs-string"">\'number\'</span>: <span class=""hljs-title class_"">Math</span>.<span class=""hljs-property"">sqrt</span>.<span class=""hljs-title function_"">bind</span>(<span class=""hljs-title class_"">Math</span>), ... }[ <span class=""hljs-keyword"">typeof</span> datum ];\n</code></pre>\n<p>Here\'s a more \'real world\' example of using inline-maps:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">is</span>(<span class=""hljs-params"">datum</span>) {\n    <span class=""hljs-keyword"">var</span> isnt = !{ <span class=""hljs-attr"">null</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">undefined</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-string"">\'\'</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">false</span>: <span class=""hljs-literal"">false</span>, <span class=""hljs-number"">0</span>: <span class=""hljs-literal"">false</span> }[ datum ];\n    <span class=""hljs-keyword"">return</span> !isnt;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>( <span class=""hljs-title function_"">is</span>(<span class=""hljs-number"">0</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">false</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">undefined</span>), ... );  <span class=""hljs-comment"">// &gt;&gt; true true false</span>\n</code></pre>\n<p>This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between <code>null</code> &amp; <code>0</code>!</p>\n<p>Many times <em>you don\'t even care about its type</em>. Another way to circumvent typing is combining Duck-Type sets:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> = <span class=""hljs-string"">""998""</span>;  <span class=""hljs-comment"">// use a number or a string-equivalent</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">get</span>(<span class=""hljs-params"">id</span>) {\n    <span class=""hljs-keyword"">if</span> (!id || !id.<span class=""hljs-property"">toString</span>) <span class=""hljs-keyword"">return</span>;\n    <span class=""hljs-keyword"">if</span> (id.<span class=""hljs-title function_"">toString</span>() === <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span>.<span class=""hljs-title function_"">toString</span>()) <span class=""hljs-title function_"">http</span>( id || +<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> );\n    <span class=""hljs-comment"">// if (+id === +this.id) ...;</span>\n}\n</code></pre>\n<p>Both <code>Number.prototype</code> <strong>and</strong> <code>String.prototype</code> have a <code>.toString() method</code>. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the <code>http</code> function as a <code>Number</code>. In other words, we didn\'t even <em>care</em> what its type was.</p>\n<p>Hope that gives you more to work with :)</p>\n    ',)","2013-06-17 05:18:46Z, License: CC BY-SA 3.0","('38',)","('24807786',)","You would need some other check for plain old numbers, since trying to take their constructor property will fail:","('\n                \n                <span class=""comment-copy"">You would need some other check for plain old numbers, since trying to take their constructor property will fail:</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<span class=""comment-user"">user663031</span>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment24807786_16215800"" aria-label=""Link to comment""><span title=""2013-06-17 05:18:46Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jun 17, 2013 at 5:18</span></a></span>\n            ',)","Jun 17, 2013 at 5:18","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
119,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,16215800.0,"Best way:
var s = 'String';
var a = [1,2,3];
var o = {key: 'val'};

(s.constructor === String) && console.log('its a string');
(a.constructor === Array) && console.log('its an array');
(o.constructor === Object) && console.log('its an object');
(o.constructor === Number || s.constructor === Boolean) && console.log('this won\'t run');
Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.
Also, Duck-Typing: ""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array"" Meaning, check its properties.
Hope this helps.
Edit; 12/05/2016
Remember, you can always use combinations of approaches too. Here's an example of using an inline map of actions with typeof:
var type = { 'number': Math.sqrt.bind(Math), ... }[ typeof datum ];
Here's a more 'real world' example of using inline-maps:
function is(datum) {
    var isnt = !{ null: true, undefined: true, '': true, false: false, 0: false }[ datum ];
    return !isnt;
}
console.log( is(0), is(false), is(undefined), ... );  // >> true true false
This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between null & 0!
Many times you don't even care about its type. Another way to circumvent typing is combining Duck-Type sets:
this.id = ""998"";  // use a number or a string-equivalent
function get(id) {
    if (!id || !id.toString) return;
    if (id.toString() === this.id.toString()) http( id || +this.id );
    // if (+id === +this.id) ...;
}
Both Number.prototype and String.prototype have a .toString() method. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the http function as a Number. In other words, we didn't even care what its type was.
Hope that gives you more to work with :)","('\n<p>Best way:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> s = <span class=""hljs-string"">\'String\'</span>;\n<span class=""hljs-keyword"">var</span> a = [<span class=""hljs-number"">1</span>,<span class=""hljs-number"">2</span>,<span class=""hljs-number"">3</span>];\n<span class=""hljs-keyword"">var</span> o = {<span class=""hljs-attr"">key</span>: <span class=""hljs-string"">\'val\'</span>};\n\n(s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its a string\'</span>);\n(a.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Array</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an array\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Object</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an object\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Number</span> || s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Boolean</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'this won\\\'t run\'</span>);\n</code></pre>\n<p>Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.</p>\n<p>Also, Duck-Typing:\n""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array""\nMeaning, check its properties.</p>\n<p>Hope this helps.</p>\n<h3>Edit; 12/05/2016</h3>\n<p>Remember, you can always use combinations of approaches too. Here\'s an example of using an <em>inline map</em> of actions with <em>typeof</em>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> type = { <span class=""hljs-string"">\'number\'</span>: <span class=""hljs-title class_"">Math</span>.<span class=""hljs-property"">sqrt</span>.<span class=""hljs-title function_"">bind</span>(<span class=""hljs-title class_"">Math</span>), ... }[ <span class=""hljs-keyword"">typeof</span> datum ];\n</code></pre>\n<p>Here\'s a more \'real world\' example of using inline-maps:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">is</span>(<span class=""hljs-params"">datum</span>) {\n    <span class=""hljs-keyword"">var</span> isnt = !{ <span class=""hljs-attr"">null</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">undefined</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-string"">\'\'</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">false</span>: <span class=""hljs-literal"">false</span>, <span class=""hljs-number"">0</span>: <span class=""hljs-literal"">false</span> }[ datum ];\n    <span class=""hljs-keyword"">return</span> !isnt;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>( <span class=""hljs-title function_"">is</span>(<span class=""hljs-number"">0</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">false</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">undefined</span>), ... );  <span class=""hljs-comment"">// &gt;&gt; true true false</span>\n</code></pre>\n<p>This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between <code>null</code> &amp; <code>0</code>!</p>\n<p>Many times <em>you don\'t even care about its type</em>. Another way to circumvent typing is combining Duck-Type sets:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> = <span class=""hljs-string"">""998""</span>;  <span class=""hljs-comment"">// use a number or a string-equivalent</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">get</span>(<span class=""hljs-params"">id</span>) {\n    <span class=""hljs-keyword"">if</span> (!id || !id.<span class=""hljs-property"">toString</span>) <span class=""hljs-keyword"">return</span>;\n    <span class=""hljs-keyword"">if</span> (id.<span class=""hljs-title function_"">toString</span>() === <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span>.<span class=""hljs-title function_"">toString</span>()) <span class=""hljs-title function_"">http</span>( id || +<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> );\n    <span class=""hljs-comment"">// if (+id === +this.id) ...;</span>\n}\n</code></pre>\n<p>Both <code>Number.prototype</code> <strong>and</strong> <code>String.prototype</code> have a <code>.toString() method</code>. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the <code>http</code> function as a <code>Number</code>. In other words, we didn\'t even <em>care</em> what its type was.</p>\n<p>Hope that gives you more to work with :)</p>\n    ',)","2013-06-17 05:18:46Z, License: CC BY-SA 3.0","('38',)","('37155864',)",@torazaburo Worked fine for me just now in the Chrome console. What makes you think it won't work?,"('\n                \n                <span class=""comment-copy"">@torazaburo Worked fine for me just now in the Chrome console. What makes you think it won\'t work?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1709587/mark-amery"" title=""139,771 reputation"" class=""comment-user"">Mark Amery</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment37155864_16215800"" aria-label=""Link to comment""><span title=""2014-06-06 21:04:50Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jun 6, 2014 at 21:04</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jun 6, 2014 at 21:04","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
120,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,16215800.0,"Best way:
var s = 'String';
var a = [1,2,3];
var o = {key: 'val'};

(s.constructor === String) && console.log('its a string');
(a.constructor === Array) && console.log('its an array');
(o.constructor === Object) && console.log('its an object');
(o.constructor === Number || s.constructor === Boolean) && console.log('this won\'t run');
Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.
Also, Duck-Typing: ""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array"" Meaning, check its properties.
Hope this helps.
Edit; 12/05/2016
Remember, you can always use combinations of approaches too. Here's an example of using an inline map of actions with typeof:
var type = { 'number': Math.sqrt.bind(Math), ... }[ typeof datum ];
Here's a more 'real world' example of using inline-maps:
function is(datum) {
    var isnt = !{ null: true, undefined: true, '': true, false: false, 0: false }[ datum ];
    return !isnt;
}
console.log( is(0), is(false), is(undefined), ... );  // >> true true false
This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between null & 0!
Many times you don't even care about its type. Another way to circumvent typing is combining Duck-Type sets:
this.id = ""998"";  // use a number or a string-equivalent
function get(id) {
    if (!id || !id.toString) return;
    if (id.toString() === this.id.toString()) http( id || +this.id );
    // if (+id === +this.id) ...;
}
Both Number.prototype and String.prototype have a .toString() method. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the http function as a Number. In other words, we didn't even care what its type was.
Hope that gives you more to work with :)","('\n<p>Best way:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> s = <span class=""hljs-string"">\'String\'</span>;\n<span class=""hljs-keyword"">var</span> a = [<span class=""hljs-number"">1</span>,<span class=""hljs-number"">2</span>,<span class=""hljs-number"">3</span>];\n<span class=""hljs-keyword"">var</span> o = {<span class=""hljs-attr"">key</span>: <span class=""hljs-string"">\'val\'</span>};\n\n(s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its a string\'</span>);\n(a.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Array</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an array\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Object</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an object\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Number</span> || s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Boolean</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'this won\\\'t run\'</span>);\n</code></pre>\n<p>Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.</p>\n<p>Also, Duck-Typing:\n""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array""\nMeaning, check its properties.</p>\n<p>Hope this helps.</p>\n<h3>Edit; 12/05/2016</h3>\n<p>Remember, you can always use combinations of approaches too. Here\'s an example of using an <em>inline map</em> of actions with <em>typeof</em>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> type = { <span class=""hljs-string"">\'number\'</span>: <span class=""hljs-title class_"">Math</span>.<span class=""hljs-property"">sqrt</span>.<span class=""hljs-title function_"">bind</span>(<span class=""hljs-title class_"">Math</span>), ... }[ <span class=""hljs-keyword"">typeof</span> datum ];\n</code></pre>\n<p>Here\'s a more \'real world\' example of using inline-maps:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">is</span>(<span class=""hljs-params"">datum</span>) {\n    <span class=""hljs-keyword"">var</span> isnt = !{ <span class=""hljs-attr"">null</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">undefined</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-string"">\'\'</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">false</span>: <span class=""hljs-literal"">false</span>, <span class=""hljs-number"">0</span>: <span class=""hljs-literal"">false</span> }[ datum ];\n    <span class=""hljs-keyword"">return</span> !isnt;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>( <span class=""hljs-title function_"">is</span>(<span class=""hljs-number"">0</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">false</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">undefined</span>), ... );  <span class=""hljs-comment"">// &gt;&gt; true true false</span>\n</code></pre>\n<p>This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between <code>null</code> &amp; <code>0</code>!</p>\n<p>Many times <em>you don\'t even care about its type</em>. Another way to circumvent typing is combining Duck-Type sets:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> = <span class=""hljs-string"">""998""</span>;  <span class=""hljs-comment"">// use a number or a string-equivalent</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">get</span>(<span class=""hljs-params"">id</span>) {\n    <span class=""hljs-keyword"">if</span> (!id || !id.<span class=""hljs-property"">toString</span>) <span class=""hljs-keyword"">return</span>;\n    <span class=""hljs-keyword"">if</span> (id.<span class=""hljs-title function_"">toString</span>() === <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span>.<span class=""hljs-title function_"">toString</span>()) <span class=""hljs-title function_"">http</span>( id || +<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> );\n    <span class=""hljs-comment"">// if (+id === +this.id) ...;</span>\n}\n</code></pre>\n<p>Both <code>Number.prototype</code> <strong>and</strong> <code>String.prototype</code> have a <code>.toString() method</code>. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the <code>http</code> function as a <code>Number</code>. In other words, we didn\'t even <em>care</em> what its type was.</p>\n<p>Hope that gives you more to work with :)</p>\n    ',)","2013-06-17 05:18:46Z, License: CC BY-SA 3.0","('38',)","('37313534',)","@torazaburo You may want to play with the assertions ( (o.constructor === Number || s.constructor === Boolean) ). Anecdotally, parseInt and NaN are fragile but powerful tools. Just remember, Not-a-Number is NOT Not-a-Number, and undefined can be defined.","('\n                \n                <span class=""comment-copy"">@torazaburo You may want to play with the assertions ( <code>(o.constructor === Number || s.constructor === Boolean)</code> ). Anecdotally, <code>parseInt</code> and <code>NaN</code> are fragile but powerful tools. Just remember, Not-a-Number is NOT Not-a-Number, and undefined can be defined.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1153121/cody"" title=""9,685 reputation"" class=""comment-user"">Cody</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment37313534_16215800"" aria-label=""Link to comment""><span title=""2014-06-11 23:18:47Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jun 11, 2014 at 23:18</span></a></span>\n            ',)","Jun 11, 2014 at 23:18","('2',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
121,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,16215800.0,"Best way:
var s = 'String';
var a = [1,2,3];
var o = {key: 'val'};

(s.constructor === String) && console.log('its a string');
(a.constructor === Array) && console.log('its an array');
(o.constructor === Object) && console.log('its an object');
(o.constructor === Number || s.constructor === Boolean) && console.log('this won\'t run');
Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.
Also, Duck-Typing: ""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array"" Meaning, check its properties.
Hope this helps.
Edit; 12/05/2016
Remember, you can always use combinations of approaches too. Here's an example of using an inline map of actions with typeof:
var type = { 'number': Math.sqrt.bind(Math), ... }[ typeof datum ];
Here's a more 'real world' example of using inline-maps:
function is(datum) {
    var isnt = !{ null: true, undefined: true, '': true, false: false, 0: false }[ datum ];
    return !isnt;
}
console.log( is(0), is(false), is(undefined), ... );  // >> true true false
This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between null & 0!
Many times you don't even care about its type. Another way to circumvent typing is combining Duck-Type sets:
this.id = ""998"";  // use a number or a string-equivalent
function get(id) {
    if (!id || !id.toString) return;
    if (id.toString() === this.id.toString()) http( id || +this.id );
    // if (+id === +this.id) ...;
}
Both Number.prototype and String.prototype have a .toString() method. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the http function as a Number. In other words, we didn't even care what its type was.
Hope that gives you more to work with :)","('\n<p>Best way:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> s = <span class=""hljs-string"">\'String\'</span>;\n<span class=""hljs-keyword"">var</span> a = [<span class=""hljs-number"">1</span>,<span class=""hljs-number"">2</span>,<span class=""hljs-number"">3</span>];\n<span class=""hljs-keyword"">var</span> o = {<span class=""hljs-attr"">key</span>: <span class=""hljs-string"">\'val\'</span>};\n\n(s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its a string\'</span>);\n(a.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Array</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an array\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Object</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an object\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Number</span> || s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Boolean</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'this won\\\'t run\'</span>);\n</code></pre>\n<p>Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.</p>\n<p>Also, Duck-Typing:\n""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array""\nMeaning, check its properties.</p>\n<p>Hope this helps.</p>\n<h3>Edit; 12/05/2016</h3>\n<p>Remember, you can always use combinations of approaches too. Here\'s an example of using an <em>inline map</em> of actions with <em>typeof</em>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> type = { <span class=""hljs-string"">\'number\'</span>: <span class=""hljs-title class_"">Math</span>.<span class=""hljs-property"">sqrt</span>.<span class=""hljs-title function_"">bind</span>(<span class=""hljs-title class_"">Math</span>), ... }[ <span class=""hljs-keyword"">typeof</span> datum ];\n</code></pre>\n<p>Here\'s a more \'real world\' example of using inline-maps:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">is</span>(<span class=""hljs-params"">datum</span>) {\n    <span class=""hljs-keyword"">var</span> isnt = !{ <span class=""hljs-attr"">null</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">undefined</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-string"">\'\'</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">false</span>: <span class=""hljs-literal"">false</span>, <span class=""hljs-number"">0</span>: <span class=""hljs-literal"">false</span> }[ datum ];\n    <span class=""hljs-keyword"">return</span> !isnt;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>( <span class=""hljs-title function_"">is</span>(<span class=""hljs-number"">0</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">false</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">undefined</span>), ... );  <span class=""hljs-comment"">// &gt;&gt; true true false</span>\n</code></pre>\n<p>This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between <code>null</code> &amp; <code>0</code>!</p>\n<p>Many times <em>you don\'t even care about its type</em>. Another way to circumvent typing is combining Duck-Type sets:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> = <span class=""hljs-string"">""998""</span>;  <span class=""hljs-comment"">// use a number or a string-equivalent</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">get</span>(<span class=""hljs-params"">id</span>) {\n    <span class=""hljs-keyword"">if</span> (!id || !id.<span class=""hljs-property"">toString</span>) <span class=""hljs-keyword"">return</span>;\n    <span class=""hljs-keyword"">if</span> (id.<span class=""hljs-title function_"">toString</span>() === <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span>.<span class=""hljs-title function_"">toString</span>()) <span class=""hljs-title function_"">http</span>( id || +<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> );\n    <span class=""hljs-comment"">// if (+id === +this.id) ...;</span>\n}\n</code></pre>\n<p>Both <code>Number.prototype</code> <strong>and</strong> <code>String.prototype</code> have a <code>.toString() method</code>. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the <code>http</code> function as a <code>Number</code>. In other words, we didn\'t even <em>care</em> what its type was.</p>\n<p>Hope that gives you more to work with :)</p>\n    ',)","2013-06-17 05:18:46Z, License: CC BY-SA 3.0","('38',)","('40516698',)","a.constructor === Array is wrong and can fail sometimes, use Array.isArray see web.mit.edu/jwalden/www/isArray.html","('\n                \n                <span class=""comment-copy"">a.constructor === Array is wrong and can fail sometimes, use Array.isArray  see <a href=""http://web.mit.edu/jwalden/www/isArray.html"" rel=""nofollow noreferrer"">web.mit.edu/jwalden/www/isArray.html</a></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/588779/axkibe"" title=""2,717 reputation"" class=""comment-user"">axkibe</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment40516698_16215800"" aria-label=""Link to comment""><span title=""2014-09-17 11:06:20Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Sep 17, 2014 at 11:06</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Sep 17, 2014 at 11:06","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
122,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,16215800.0,"Best way:
var s = 'String';
var a = [1,2,3];
var o = {key: 'val'};

(s.constructor === String) && console.log('its a string');
(a.constructor === Array) && console.log('its an array');
(o.constructor === Object) && console.log('its an object');
(o.constructor === Number || s.constructor === Boolean) && console.log('this won\'t run');
Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.
Also, Duck-Typing: ""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array"" Meaning, check its properties.
Hope this helps.
Edit; 12/05/2016
Remember, you can always use combinations of approaches too. Here's an example of using an inline map of actions with typeof:
var type = { 'number': Math.sqrt.bind(Math), ... }[ typeof datum ];
Here's a more 'real world' example of using inline-maps:
function is(datum) {
    var isnt = !{ null: true, undefined: true, '': true, false: false, 0: false }[ datum ];
    return !isnt;
}
console.log( is(0), is(false), is(undefined), ... );  // >> true true false
This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between null & 0!
Many times you don't even care about its type. Another way to circumvent typing is combining Duck-Type sets:
this.id = ""998"";  // use a number or a string-equivalent
function get(id) {
    if (!id || !id.toString) return;
    if (id.toString() === this.id.toString()) http( id || +this.id );
    // if (+id === +this.id) ...;
}
Both Number.prototype and String.prototype have a .toString() method. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the http function as a Number. In other words, we didn't even care what its type was.
Hope that gives you more to work with :)","('\n<p>Best way:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> s = <span class=""hljs-string"">\'String\'</span>;\n<span class=""hljs-keyword"">var</span> a = [<span class=""hljs-number"">1</span>,<span class=""hljs-number"">2</span>,<span class=""hljs-number"">3</span>];\n<span class=""hljs-keyword"">var</span> o = {<span class=""hljs-attr"">key</span>: <span class=""hljs-string"">\'val\'</span>};\n\n(s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its a string\'</span>);\n(a.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Array</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an array\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Object</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'its an object\'</span>);\n(o.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Number</span> || s.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">Boolean</span>) &amp;&amp; <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'this won\\\'t run\'</span>);\n</code></pre>\n<p>Each of these has been constructed by its appropriate class function, like ""new Object()"" etc.</p>\n<p>Also, Duck-Typing:\n""If it looks like a duck, walks like a duck, and smells like a duck - it must be an Array""\nMeaning, check its properties.</p>\n<p>Hope this helps.</p>\n<h3>Edit; 12/05/2016</h3>\n<p>Remember, you can always use combinations of approaches too. Here\'s an example of using an <em>inline map</em> of actions with <em>typeof</em>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> type = { <span class=""hljs-string"">\'number\'</span>: <span class=""hljs-title class_"">Math</span>.<span class=""hljs-property"">sqrt</span>.<span class=""hljs-title function_"">bind</span>(<span class=""hljs-title class_"">Math</span>), ... }[ <span class=""hljs-keyword"">typeof</span> datum ];\n</code></pre>\n<p>Here\'s a more \'real world\' example of using inline-maps:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">is</span>(<span class=""hljs-params"">datum</span>) {\n    <span class=""hljs-keyword"">var</span> isnt = !{ <span class=""hljs-attr"">null</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">undefined</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-string"">\'\'</span>: <span class=""hljs-literal"">true</span>, <span class=""hljs-attr"">false</span>: <span class=""hljs-literal"">false</span>, <span class=""hljs-number"">0</span>: <span class=""hljs-literal"">false</span> }[ datum ];\n    <span class=""hljs-keyword"">return</span> !isnt;\n}\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>( <span class=""hljs-title function_"">is</span>(<span class=""hljs-number"">0</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">false</span>), <span class=""hljs-title function_"">is</span>(<span class=""hljs-literal"">undefined</span>), ... );  <span class=""hljs-comment"">// &gt;&gt; true true false</span>\n</code></pre>\n<p>This function would use [ custom ] ""type-casting"" -- rather, ""type-/-value-mapping"" -- to figure out if a variable actually ""exists"". Now you can split that nasty hair between <code>null</code> &amp; <code>0</code>!</p>\n<p>Many times <em>you don\'t even care about its type</em>. Another way to circumvent typing is combining Duck-Type sets:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> = <span class=""hljs-string"">""998""</span>;  <span class=""hljs-comment"">// use a number or a string-equivalent</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">get</span>(<span class=""hljs-params"">id</span>) {\n    <span class=""hljs-keyword"">if</span> (!id || !id.<span class=""hljs-property"">toString</span>) <span class=""hljs-keyword"">return</span>;\n    <span class=""hljs-keyword"">if</span> (id.<span class=""hljs-title function_"">toString</span>() === <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span>.<span class=""hljs-title function_"">toString</span>()) <span class=""hljs-title function_"">http</span>( id || +<span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">id</span> );\n    <span class=""hljs-comment"">// if (+id === +this.id) ...;</span>\n}\n</code></pre>\n<p>Both <code>Number.prototype</code> <strong>and</strong> <code>String.prototype</code> have a <code>.toString() method</code>. You just made sure that the string-equivalent of the number was the same, and then you made sure that you passed it into the <code>http</code> function as a <code>Number</code>. In other words, we didn\'t even <em>care</em> what its type was.</p>\n<p>Hope that gives you more to work with :)</p>\n    ',)","2013-06-17 05:18:46Z, License: CC BY-SA 3.0","('38',)","('40914478',)","Agreed, this isn't fail-safe. A better way is to use property checks -- THAT'S the only truly fail-safe way at the moment. Example: if(thing.call) { 'its a function'; } or if(thing.defineProperties) { 'its an object'; }. Thanks for the input, axkibe!","('\n                \n                <span class=""comment-copy"">Agreed, this isn\'t fail-safe. A better way is to use property checks -- THAT\'S the only truly fail-safe way at the moment. Example: <code>if(thing.call) { \'its a function\'; }</code> or <code>if(thing.defineProperties) { \'its an object\'; }</code>. Thanks for the input, axkibe!</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1153121/cody"" title=""9,685 reputation"" class=""comment-user"">Cody</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment40914478_16215800"" aria-label=""Link to comment""><span title=""2014-09-29 19:31:32Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Sep 29, 2014 at 19:31</span></a></span>\n            ',)","Sep 29, 2014 at 19:31","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
123,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,54262665.0,"I can't honestly see why one would not simply use typeof in this case:
if (typeof str === 'string') {
  return 42;
}
Yes it will fail against object-wrapped strings (e.g. new String('foo')) but these are widely regarded as a bad practice and most modern development tools are likely to discourage their use. (If you see one, just fix it!)
The Object.prototype.toString trick is something that all front-end developers have been found guilty of doing one day in their careers but don't let it fool you by its polish of clever: it will break as soon as something monkey-patch the Object prototype:
const isString = thing => Object.prototype.toString.call(thing) === '[object String]';

console.log(isString('foo'));

Object.prototype.toString = () => 42;

console.log(isString('foo'));
Run code snippetExpand snippet","('\n<p>I can\'t honestly see why one would not simply use <code>typeof</code> in this case:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> str === <span class=""hljs-string"">\'string\'</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-number"">42</span>;\n}\n</code></pre>\n\n<p>Yes it will fail against object-wrapped strings (e.g. <code>new String(\'foo\')</code>) but these are widely regarded as a bad practice and most modern development tools are likely to discourage their use. <em>(If you see one, just fix it!)</em></p>\n\n<p>The <code>Object.prototype.toString</code> trick is something that all front-end developers have been found guilty of doing one day in their careers but don\'t let it fool you by its polish of clever: it will break as soon as something monkey-patch the Object prototype:</p>\n\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">isString</span> = thing =&gt; <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(thing) === <span class=""hljs-string"">\'[object String]\'</span>;\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-string"">\'foo\'</span>));\n\n<span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span> = <span class=""hljs-function"">() =&gt;</span> <span class=""hljs-number"">42</span>;\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-string"">\'foo\'</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif3"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2021-07-10 22:09:34Z, License: CC BY-SA 4.0","('38',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
124,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,54262665.0,"I can't honestly see why one would not simply use typeof in this case:
if (typeof str === 'string') {
  return 42;
}
Yes it will fail against object-wrapped strings (e.g. new String('foo')) but these are widely regarded as a bad practice and most modern development tools are likely to discourage their use. (If you see one, just fix it!)
The Object.prototype.toString trick is something that all front-end developers have been found guilty of doing one day in their careers but don't let it fool you by its polish of clever: it will break as soon as something monkey-patch the Object prototype:
const isString = thing => Object.prototype.toString.call(thing) === '[object String]';

console.log(isString('foo'));

Object.prototype.toString = () => 42;

console.log(isString('foo'));
Run code snippetExpand snippet","('\n<p>I can\'t honestly see why one would not simply use <code>typeof</code> in this case:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> str === <span class=""hljs-string"">\'string\'</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-number"">42</span>;\n}\n</code></pre>\n\n<p>Yes it will fail against object-wrapped strings (e.g. <code>new String(\'foo\')</code>) but these are widely regarded as a bad practice and most modern development tools are likely to discourage their use. <em>(If you see one, just fix it!)</em></p>\n\n<p>The <code>Object.prototype.toString</code> trick is something that all front-end developers have been found guilty of doing one day in their careers but don\'t let it fool you by its polish of clever: it will break as soon as something monkey-patch the Object prototype:</p>\n\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">isString</span> = thing =&gt; <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(thing) === <span class=""hljs-string"">\'[object String]\'</span>;\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-string"">\'foo\'</span>));\n\n<span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span> = <span class=""hljs-function"">() =&gt;</span> <span class=""hljs-number"">42</span>;\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-string"">\'foo\'</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif3"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2021-07-10 22:09:34Z, License: CC BY-SA 4.0","('38',)","('120766044',)","FWIW; Arguing against a solution because it could be broken by monkey-patching the Object prototype is a weak argument. In a dynamic language, almost anything can be broken by doing stuff you shouldn't do!","('\n                \n                <span class=""comment-copy"">FWIW; Arguing against a solution because it could be broken by monkey-patching the Object prototype is a weak argument. In a dynamic language, almost anything can be broken by doing stuff you shouldn\'t do!</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/199364/toolmakersteve"" title=""16,317 reputation"" class=""comment-user"">ToolmakerSteve</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment120766044_54262665"" aria-label=""Link to comment""><span title=""2021-07-10 22:09:34Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 10, 2021 at 22:09</span></a></span>\n            ',)","Jul 10, 2021 at 22:09","('3',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
125,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,54262665.0,"I can't honestly see why one would not simply use typeof in this case:
if (typeof str === 'string') {
  return 42;
}
Yes it will fail against object-wrapped strings (e.g. new String('foo')) but these are widely regarded as a bad practice and most modern development tools are likely to discourage their use. (If you see one, just fix it!)
The Object.prototype.toString trick is something that all front-end developers have been found guilty of doing one day in their careers but don't let it fool you by its polish of clever: it will break as soon as something monkey-patch the Object prototype:
const isString = thing => Object.prototype.toString.call(thing) === '[object String]';

console.log(isString('foo'));

Object.prototype.toString = () => 42;

console.log(isString('foo'));
Run code snippetExpand snippet","('\n<p>I can\'t honestly see why one would not simply use <code>typeof</code> in this case:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> str === <span class=""hljs-string"">\'string\'</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-number"">42</span>;\n}\n</code></pre>\n\n<p>Yes it will fail against object-wrapped strings (e.g. <code>new String(\'foo\')</code>) but these are widely regarded as a bad practice and most modern development tools are likely to discourage their use. <em>(If you see one, just fix it!)</em></p>\n\n<p>The <code>Object.prototype.toString</code> trick is something that all front-end developers have been found guilty of doing one day in their careers but don\'t let it fool you by its polish of clever: it will break as soon as something monkey-patch the Object prototype:</p>\n\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">isString</span> = thing =&gt; <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(thing) === <span class=""hljs-string"">\'[object String]\'</span>;\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-string"">\'foo\'</span>));\n\n<span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span> = <span class=""hljs-function"">() =&gt;</span> <span class=""hljs-number"">42</span>;\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-string"">\'foo\'</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif3"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2021-07-10 22:09:34Z, License: CC BY-SA 4.0","('38',)","('120766247',)","@ToolmakerSteve Fair. You are right of course. Someone could easily alter all native prototypes and nothing would work anymore. I guess the point I was trying to make is that in a (JS) world where monkey patching is still common practice, relying on such technique is fraught with danger and one shouldn't expose themselves to it when the (simpler) alternative is guaranteed to always work (AFAIK you cannot monkey patch typeof). Point taken nonetheless. Thank you.","('\n                \n                <span class=""comment-copy"">@ToolmakerSteve Fair. You are right of course. Someone could easily alter all native prototypes and nothing would work anymore. I guess the point I was trying to make is that in a (JS) world where monkey patching is still common practice, relying on such technique is fraught with danger and one shouldn\'t expose themselves to it when the (simpler) alternative is guaranteed to always work (AFAIK you cannot monkey patch <code>typeof</code>). Point taken nonetheless. Thank you.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1244884/customcommander"" title=""17,090 reputation"" class=""comment-user"">customcommander</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment120766247_54262665"" aria-label=""Link to comment""><span title=""2021-07-10 22:33:20Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 10, 2021 at 22:33</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jul 10, 2021 at 22:33","('3',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
126,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,54262665.0,"I can't honestly see why one would not simply use typeof in this case:
if (typeof str === 'string') {
  return 42;
}
Yes it will fail against object-wrapped strings (e.g. new String('foo')) but these are widely regarded as a bad practice and most modern development tools are likely to discourage their use. (If you see one, just fix it!)
The Object.prototype.toString trick is something that all front-end developers have been found guilty of doing one day in their careers but don't let it fool you by its polish of clever: it will break as soon as something monkey-patch the Object prototype:
const isString = thing => Object.prototype.toString.call(thing) === '[object String]';

console.log(isString('foo'));

Object.prototype.toString = () => 42;

console.log(isString('foo'));
Run code snippetExpand snippet","('\n<p>I can\'t honestly see why one would not simply use <code>typeof</code> in this case:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (<span class=""hljs-keyword"">typeof</span> str === <span class=""hljs-string"">\'string\'</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-number"">42</span>;\n}\n</code></pre>\n\n<p>Yes it will fail against object-wrapped strings (e.g. <code>new String(\'foo\')</code>) but these are widely regarded as a bad practice and most modern development tools are likely to discourage their use. <em>(If you see one, just fix it!)</em></p>\n\n<p>The <code>Object.prototype.toString</code> trick is something that all front-end developers have been found guilty of doing one day in their careers but don\'t let it fool you by its polish of clever: it will break as soon as something monkey-patch the Object prototype:</p>\n\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">isString</span> = thing =&gt; <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(thing) === <span class=""hljs-string"">\'[object String]\'</span>;\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-string"">\'foo\'</span>));\n\n<span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span> = <span class=""hljs-function"">() =&gt;</span> <span class=""hljs-number"">42</span>;\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-string"">\'foo\'</span>));</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif3"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2021-07-10 22:09:34Z, License: CC BY-SA 4.0","('38',)","('120798550',)","Its a trade-off:, given that the two approaches don't always return the same answer. So it depends on your ""spec"" - what you mean by a string. ""fraught with danger"" seems a bit strong in this case. If someone modifies Object.prototype.toString such that it returns a different result... frankly that's their problem! IMHO the possibility shouldn't be a factor in deciding what approach to use. (I personally don't bother; I go with the simple approach you show - but then I'm not writing library code.)","('\n                \n                <span class=""comment-copy"">Its a trade-off:, given that the two approaches don\'t always return the same answer. So it depends on your ""spec"" - what you mean by a string.  <i>""fraught with danger""</i> seems a bit strong in this case. If someone modifies <code>Object.prototype.toString</code> such that it returns a different result... frankly that\'s their problem! IMHO the possibility shouldn\'t be a factor in deciding what approach to use. (I personally don\'t bother; I go with the simple approach you show - but then I\'m not writing library code.)</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/199364/toolmakersteve"" title=""16,317 reputation"" class=""comment-user"">ToolmakerSteve</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment120798550_54262665"" aria-label=""Link to comment""><span title=""2021-07-12 16:03:09Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 12, 2021 at 16:03</span></a></span>\n            ',)","Jul 12, 2021 at 16:03","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
127,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,63945948.0,"Performance
Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.
Results
For all browsers (and both test cases)
solutions typeof||instanceof (A, I) and x===x+'' (H) are fast/fastest
solution _.isString (lodash lib) is medium/fast
solutions B and K are slowest
Update: 2020.11.28 I update results for x=123 Chrome column - for solution I there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.
Details
I perform 2 tests cases for solutions A B C D E F G H I J K L
when variable is string - you can run it HERE
when variable is NOT string - you can run it HERE
Below snippet presents differences between solutions
Show code snippet
And here are example results for chrome","('\n<h1>Performance</h1>\n<p>Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.</p>\n<h2>Results</h2>\n<p>For all browsers (and both test cases)</p>\n<ul>\n<li>solutions <code>typeof||instanceof</code> (A, I) and <code>x===x+\'\'</code> (H) are fast/fastest</li>\n<li>solution <code>_.isString</code> (lodash lib) is medium/fast</li>\n<li>solutions B and K are slowest</li>\n</ul>\n<p><a href=""https://i.stack.imgur.com/cpaxI.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/cpaxI.png"" alt=""enter image description here""></a></p>\n<p>Update: 2020.11.28 I update results for <code>x=123 Chrome</code> column - for solution <code>I</code> there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.</p>\n<h2>Details</h2>\n<p>I perform 2 tests cases for solutions\n<a href=""https://stackoverflow.com/a/9436948/860099"">A</a>\n<a href=""https://stackoverflow.com/a/17772086/860099"">B</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">C</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">D</a>\n<a href=""https://stackoverflow.com/a/16215800/860099"">E</a>\n<a href=""https://stackoverflow.com/a/42493631/860099"">F</a>\n<a href=""https://stackoverflow.com/a/57443488/860099"">G</a>\n<a href=""https://stackoverflow.com/a/19057360/860099"">H</a>\n<a href=""https://stackoverflow.com/a/4059166/860099"">I</a>\n<a href=""https://stackoverflow.com/a/28722301/860099"">J</a>\n<a href=""https://stackoverflow.com/a/58892465/860099"">K</a>\n<a href=""https://stackoverflow.com/a/9436948/860099"">L</a></p>\n<ul>\n<li>when variable is string - you can run it <a href=""https://jsbench.me/whkf5hbrps/1"" rel=""noreferrer"">HERE</a></li>\n<li>when variable is NOT string - you can run it <a href=""https://jsbench.me/p0kf5vcq3c/1"" rel=""noreferrer"">HERE</a></li>\n</ul>\n<p>Below snippet presents differences between solutions</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false""><div class=""snippet-display"" style=""vertical-align: center""><p><a class=""snippet-show-link-chevron""><span class=""expander-arrow-hide"" style=""vertical-align: middle;""></span></a><a class=""snippet-show-link""><span class=""show-hide"" data-ishidden=""true"" style=""vertical-align: middle"">Show code snippet</span></a></p></div>\n<div class=""snippet-code snippet-currently-hidden"" style=""display: none;"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>) || (x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/17772086/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">B</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">C</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> _.<span class=""hljs-title function_"">isString</span>(x);\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">D</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> $.<span class=""hljs-title function_"">type</span>(x) === <span class=""hljs-string"">""string""</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/16215800/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">E</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/42493631/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">F</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">charAt</span> != <span class=""hljs-literal"">null</span>\n}\n\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/57443488/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">G</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">String</span>(x) === x\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/19057360/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">H</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x + <span class=""hljs-string"">\'\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/4059166/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">I</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/28722301/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">J</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x?.<span class=""hljs-title function_"">toString</span>()\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/58892465/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">K</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x &amp;&amp; <span class=""hljs-keyword"">typeof</span> x.<span class=""hljs-title function_"">valueOf</span>() === <span class=""hljs-string"">""string""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">L</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>\n}\n\n<span class=""hljs-comment"">// ------------------</span>\n<span class=""hljs-comment"">//     PRESENTATION</span>\n<span class=""hljs-comment"">// ------------------</span>\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'Solutions results for different inputs \\n\\n\'</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""\'abc\' Str  \'\'  \' \' \'1\' \'0\'  1   0   {} [] true false null undef""</span>);\n\n<span class=""hljs-keyword"">let</span> tests = [ <span class=""hljs-string"">\'abc\'</span>, <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""abc""</span>),<span class=""hljs-string"">\'\'</span>,<span class=""hljs-string"">\' \'</span>,<span class=""hljs-string"">\'1\'</span>,<span class=""hljs-string"">\'0\'</span>,<span class=""hljs-number"">1</span>,<span class=""hljs-number"">0</span>,{},[],<span class=""hljs-literal"">true</span>,<span class=""hljs-literal"">false</span>,<span class=""hljs-literal"">null</span>,<span class=""hljs-literal"">undefined</span>];\n\n[A,B,C,D,E,F,G,H,I,J,K,L].<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">f</span>=&gt;</span> {  \n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(\n  <span class=""hljs-string"">`<span class=""hljs-subst"">${f.name}</span>   `</span> + tests.<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">v</span>=&gt;</span> (<span class=""hljs-number"">1</span>*!!<span class=""hljs-title function_"">f</span>(v)) ).<span class=""hljs-property"">join</span><span class=""hljs-string"">`   `</span>\n)})</code></pre>\n<pre class=""snippet-code-html lang-html s-code-block""><code class=""hljs language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n<span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js""</span> <span class=""hljs-attr"">integrity</span>=<span class=""hljs-string"">""sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==""</span> <span class=""hljs-attr"">crossorigin</span>=<span class=""hljs-string"">""anonymous""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n\n\nThis shippet only presents functions used in performance tests - it not perform tests itself!</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif4"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And here are example results for chrome</p>\n<p><a href=""https://i.stack.imgur.com/oCOIh.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/oCOIh.png"" alt=""enter image description here""></a></p>\n    ',)","2020-11-16 16:15:15Z, License: CC BY-SA 4.0","('31',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
128,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,63945948.0,"Performance
Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.
Results
For all browsers (and both test cases)
solutions typeof||instanceof (A, I) and x===x+'' (H) are fast/fastest
solution _.isString (lodash lib) is medium/fast
solutions B and K are slowest
Update: 2020.11.28 I update results for x=123 Chrome column - for solution I there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.
Details
I perform 2 tests cases for solutions A B C D E F G H I J K L
when variable is string - you can run it HERE
when variable is NOT string - you can run it HERE
Below snippet presents differences between solutions
Show code snippet
And here are example results for chrome","('\n<h1>Performance</h1>\n<p>Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.</p>\n<h2>Results</h2>\n<p>For all browsers (and both test cases)</p>\n<ul>\n<li>solutions <code>typeof||instanceof</code> (A, I) and <code>x===x+\'\'</code> (H) are fast/fastest</li>\n<li>solution <code>_.isString</code> (lodash lib) is medium/fast</li>\n<li>solutions B and K are slowest</li>\n</ul>\n<p><a href=""https://i.stack.imgur.com/cpaxI.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/cpaxI.png"" alt=""enter image description here""></a></p>\n<p>Update: 2020.11.28 I update results for <code>x=123 Chrome</code> column - for solution <code>I</code> there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.</p>\n<h2>Details</h2>\n<p>I perform 2 tests cases for solutions\n<a href=""https://stackoverflow.com/a/9436948/860099"">A</a>\n<a href=""https://stackoverflow.com/a/17772086/860099"">B</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">C</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">D</a>\n<a href=""https://stackoverflow.com/a/16215800/860099"">E</a>\n<a href=""https://stackoverflow.com/a/42493631/860099"">F</a>\n<a href=""https://stackoverflow.com/a/57443488/860099"">G</a>\n<a href=""https://stackoverflow.com/a/19057360/860099"">H</a>\n<a href=""https://stackoverflow.com/a/4059166/860099"">I</a>\n<a href=""https://stackoverflow.com/a/28722301/860099"">J</a>\n<a href=""https://stackoverflow.com/a/58892465/860099"">K</a>\n<a href=""https://stackoverflow.com/a/9436948/860099"">L</a></p>\n<ul>\n<li>when variable is string - you can run it <a href=""https://jsbench.me/whkf5hbrps/1"" rel=""noreferrer"">HERE</a></li>\n<li>when variable is NOT string - you can run it <a href=""https://jsbench.me/p0kf5vcq3c/1"" rel=""noreferrer"">HERE</a></li>\n</ul>\n<p>Below snippet presents differences between solutions</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false""><div class=""snippet-display"" style=""vertical-align: center""><p><a class=""snippet-show-link-chevron""><span class=""expander-arrow-hide"" style=""vertical-align: middle;""></span></a><a class=""snippet-show-link""><span class=""show-hide"" data-ishidden=""true"" style=""vertical-align: middle"">Show code snippet</span></a></p></div>\n<div class=""snippet-code snippet-currently-hidden"" style=""display: none;"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>) || (x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/17772086/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">B</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">C</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> _.<span class=""hljs-title function_"">isString</span>(x);\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">D</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> $.<span class=""hljs-title function_"">type</span>(x) === <span class=""hljs-string"">""string""</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/16215800/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">E</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/42493631/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">F</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">charAt</span> != <span class=""hljs-literal"">null</span>\n}\n\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/57443488/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">G</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">String</span>(x) === x\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/19057360/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">H</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x + <span class=""hljs-string"">\'\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/4059166/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">I</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/28722301/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">J</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x?.<span class=""hljs-title function_"">toString</span>()\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/58892465/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">K</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x &amp;&amp; <span class=""hljs-keyword"">typeof</span> x.<span class=""hljs-title function_"">valueOf</span>() === <span class=""hljs-string"">""string""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">L</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>\n}\n\n<span class=""hljs-comment"">// ------------------</span>\n<span class=""hljs-comment"">//     PRESENTATION</span>\n<span class=""hljs-comment"">// ------------------</span>\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'Solutions results for different inputs \\n\\n\'</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""\'abc\' Str  \'\'  \' \' \'1\' \'0\'  1   0   {} [] true false null undef""</span>);\n\n<span class=""hljs-keyword"">let</span> tests = [ <span class=""hljs-string"">\'abc\'</span>, <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""abc""</span>),<span class=""hljs-string"">\'\'</span>,<span class=""hljs-string"">\' \'</span>,<span class=""hljs-string"">\'1\'</span>,<span class=""hljs-string"">\'0\'</span>,<span class=""hljs-number"">1</span>,<span class=""hljs-number"">0</span>,{},[],<span class=""hljs-literal"">true</span>,<span class=""hljs-literal"">false</span>,<span class=""hljs-literal"">null</span>,<span class=""hljs-literal"">undefined</span>];\n\n[A,B,C,D,E,F,G,H,I,J,K,L].<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">f</span>=&gt;</span> {  \n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(\n  <span class=""hljs-string"">`<span class=""hljs-subst"">${f.name}</span>   `</span> + tests.<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">v</span>=&gt;</span> (<span class=""hljs-number"">1</span>*!!<span class=""hljs-title function_"">f</span>(v)) ).<span class=""hljs-property"">join</span><span class=""hljs-string"">`   `</span>\n)})</code></pre>\n<pre class=""snippet-code-html lang-html s-code-block""><code class=""hljs language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n<span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js""</span> <span class=""hljs-attr"">integrity</span>=<span class=""hljs-string"">""sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==""</span> <span class=""hljs-attr"">crossorigin</span>=<span class=""hljs-string"">""anonymous""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n\n\nThis shippet only presents functions used in performance tests - it not perform tests itself!</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif4"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And here are example results for chrome</p>\n<p><a href=""https://i.stack.imgur.com/oCOIh.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/oCOIh.png"" alt=""enter image description here""></a></p>\n    ',)","2020-11-16 16:15:15Z, License: CC BY-SA 4.0","('31',)","('114675635',)","Have you tried running your tests multiple times? I have strong doubt about strategy ""i"", running on Chrome with x = 123. You get 69M, though you get 671M for case A (which is essentially the same code, with an extra test). Here, that strategy wins in Chrome for x = 123. Not that important, honestly, but just a reminder that performance micro benchmarks are very difficult to get right.","('\n                \n                <span class=""comment-copy"">Have you tried running your tests multiple times? I have strong doubt about strategy ""i"", running on Chrome with x = 123. You get 69M, though you get 671M for case A (which is essentially the same code, with an extra test). Here, that strategy wins in Chrome for x = 123. Not that important, honestly, but just a reminder that performance micro benchmarks are very difficult to get right.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2887657/james"" title=""3,985 reputation"" class=""comment-user"">James</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment114675635_63945948"" aria-label=""Link to comment""><span title=""2020-11-16 16:15:15Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Nov 16, 2020 at 16:15</span></a></span>\n            ',)","Nov 16, 2020 at 16:15","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
129,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,63945948.0,"Performance
Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.
Results
For all browsers (and both test cases)
solutions typeof||instanceof (A, I) and x===x+'' (H) are fast/fastest
solution _.isString (lodash lib) is medium/fast
solutions B and K are slowest
Update: 2020.11.28 I update results for x=123 Chrome column - for solution I there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.
Details
I perform 2 tests cases for solutions A B C D E F G H I J K L
when variable is string - you can run it HERE
when variable is NOT string - you can run it HERE
Below snippet presents differences between solutions
Show code snippet
And here are example results for chrome","('\n<h1>Performance</h1>\n<p>Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.</p>\n<h2>Results</h2>\n<p>For all browsers (and both test cases)</p>\n<ul>\n<li>solutions <code>typeof||instanceof</code> (A, I) and <code>x===x+\'\'</code> (H) are fast/fastest</li>\n<li>solution <code>_.isString</code> (lodash lib) is medium/fast</li>\n<li>solutions B and K are slowest</li>\n</ul>\n<p><a href=""https://i.stack.imgur.com/cpaxI.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/cpaxI.png"" alt=""enter image description here""></a></p>\n<p>Update: 2020.11.28 I update results for <code>x=123 Chrome</code> column - for solution <code>I</code> there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.</p>\n<h2>Details</h2>\n<p>I perform 2 tests cases for solutions\n<a href=""https://stackoverflow.com/a/9436948/860099"">A</a>\n<a href=""https://stackoverflow.com/a/17772086/860099"">B</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">C</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">D</a>\n<a href=""https://stackoverflow.com/a/16215800/860099"">E</a>\n<a href=""https://stackoverflow.com/a/42493631/860099"">F</a>\n<a href=""https://stackoverflow.com/a/57443488/860099"">G</a>\n<a href=""https://stackoverflow.com/a/19057360/860099"">H</a>\n<a href=""https://stackoverflow.com/a/4059166/860099"">I</a>\n<a href=""https://stackoverflow.com/a/28722301/860099"">J</a>\n<a href=""https://stackoverflow.com/a/58892465/860099"">K</a>\n<a href=""https://stackoverflow.com/a/9436948/860099"">L</a></p>\n<ul>\n<li>when variable is string - you can run it <a href=""https://jsbench.me/whkf5hbrps/1"" rel=""noreferrer"">HERE</a></li>\n<li>when variable is NOT string - you can run it <a href=""https://jsbench.me/p0kf5vcq3c/1"" rel=""noreferrer"">HERE</a></li>\n</ul>\n<p>Below snippet presents differences between solutions</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false""><div class=""snippet-display"" style=""vertical-align: center""><p><a class=""snippet-show-link-chevron""><span class=""expander-arrow-hide"" style=""vertical-align: middle;""></span></a><a class=""snippet-show-link""><span class=""show-hide"" data-ishidden=""true"" style=""vertical-align: middle"">Show code snippet</span></a></p></div>\n<div class=""snippet-code snippet-currently-hidden"" style=""display: none;"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>) || (x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/17772086/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">B</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">C</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> _.<span class=""hljs-title function_"">isString</span>(x);\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">D</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> $.<span class=""hljs-title function_"">type</span>(x) === <span class=""hljs-string"">""string""</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/16215800/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">E</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/42493631/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">F</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">charAt</span> != <span class=""hljs-literal"">null</span>\n}\n\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/57443488/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">G</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">String</span>(x) === x\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/19057360/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">H</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x + <span class=""hljs-string"">\'\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/4059166/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">I</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/28722301/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">J</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x?.<span class=""hljs-title function_"">toString</span>()\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/58892465/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">K</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x &amp;&amp; <span class=""hljs-keyword"">typeof</span> x.<span class=""hljs-title function_"">valueOf</span>() === <span class=""hljs-string"">""string""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">L</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>\n}\n\n<span class=""hljs-comment"">// ------------------</span>\n<span class=""hljs-comment"">//     PRESENTATION</span>\n<span class=""hljs-comment"">// ------------------</span>\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'Solutions results for different inputs \\n\\n\'</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""\'abc\' Str  \'\'  \' \' \'1\' \'0\'  1   0   {} [] true false null undef""</span>);\n\n<span class=""hljs-keyword"">let</span> tests = [ <span class=""hljs-string"">\'abc\'</span>, <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""abc""</span>),<span class=""hljs-string"">\'\'</span>,<span class=""hljs-string"">\' \'</span>,<span class=""hljs-string"">\'1\'</span>,<span class=""hljs-string"">\'0\'</span>,<span class=""hljs-number"">1</span>,<span class=""hljs-number"">0</span>,{},[],<span class=""hljs-literal"">true</span>,<span class=""hljs-literal"">false</span>,<span class=""hljs-literal"">null</span>,<span class=""hljs-literal"">undefined</span>];\n\n[A,B,C,D,E,F,G,H,I,J,K,L].<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">f</span>=&gt;</span> {  \n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(\n  <span class=""hljs-string"">`<span class=""hljs-subst"">${f.name}</span>   `</span> + tests.<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">v</span>=&gt;</span> (<span class=""hljs-number"">1</span>*!!<span class=""hljs-title function_"">f</span>(v)) ).<span class=""hljs-property"">join</span><span class=""hljs-string"">`   `</span>\n)})</code></pre>\n<pre class=""snippet-code-html lang-html s-code-block""><code class=""hljs language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n<span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js""</span> <span class=""hljs-attr"">integrity</span>=<span class=""hljs-string"">""sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==""</span> <span class=""hljs-attr"">crossorigin</span>=<span class=""hljs-string"">""anonymous""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n\n\nThis shippet only presents functions used in performance tests - it not perform tests itself!</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif4"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And here are example results for chrome</p>\n<p><a href=""https://i.stack.imgur.com/oCOIh.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/oCOIh.png"" alt=""enter image description here""></a></p>\n    ',)","2020-11-16 16:15:15Z, License: CC BY-SA 4.0","('31',)","('114675958',)","yep - I run test multiple times in past - I also run It now - and you have right - now result for I is much better (I have 674M for ""i"") - I will update this (in free time) - thank you","('\n                \n                <span class=""comment-copy"">yep - I run test multiple times in past - I also run It now - and you have right - now result for I is much better (I have 674M for ""i"") - I will update this (in free time) - thank you</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/860099/kamil-kie%c5%82czewski"" title=""82,567 reputation"" class=""comment-user"">Kamil Kiełczewski</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment114675958_63945948"" aria-label=""Link to comment""><span title=""2020-11-16 16:28:06Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Nov 16, 2020 at 16:28</span></a></span>\n            ',)","Nov 16, 2020 at 16:28","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
130,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,63945948.0,"Performance
Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.
Results
For all browsers (and both test cases)
solutions typeof||instanceof (A, I) and x===x+'' (H) are fast/fastest
solution _.isString (lodash lib) is medium/fast
solutions B and K are slowest
Update: 2020.11.28 I update results for x=123 Chrome column - for solution I there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.
Details
I perform 2 tests cases for solutions A B C D E F G H I J K L
when variable is string - you can run it HERE
when variable is NOT string - you can run it HERE
Below snippet presents differences between solutions
Show code snippet
And here are example results for chrome","('\n<h1>Performance</h1>\n<p>Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.</p>\n<h2>Results</h2>\n<p>For all browsers (and both test cases)</p>\n<ul>\n<li>solutions <code>typeof||instanceof</code> (A, I) and <code>x===x+\'\'</code> (H) are fast/fastest</li>\n<li>solution <code>_.isString</code> (lodash lib) is medium/fast</li>\n<li>solutions B and K are slowest</li>\n</ul>\n<p><a href=""https://i.stack.imgur.com/cpaxI.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/cpaxI.png"" alt=""enter image description here""></a></p>\n<p>Update: 2020.11.28 I update results for <code>x=123 Chrome</code> column - for solution <code>I</code> there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.</p>\n<h2>Details</h2>\n<p>I perform 2 tests cases for solutions\n<a href=""https://stackoverflow.com/a/9436948/860099"">A</a>\n<a href=""https://stackoverflow.com/a/17772086/860099"">B</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">C</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">D</a>\n<a href=""https://stackoverflow.com/a/16215800/860099"">E</a>\n<a href=""https://stackoverflow.com/a/42493631/860099"">F</a>\n<a href=""https://stackoverflow.com/a/57443488/860099"">G</a>\n<a href=""https://stackoverflow.com/a/19057360/860099"">H</a>\n<a href=""https://stackoverflow.com/a/4059166/860099"">I</a>\n<a href=""https://stackoverflow.com/a/28722301/860099"">J</a>\n<a href=""https://stackoverflow.com/a/58892465/860099"">K</a>\n<a href=""https://stackoverflow.com/a/9436948/860099"">L</a></p>\n<ul>\n<li>when variable is string - you can run it <a href=""https://jsbench.me/whkf5hbrps/1"" rel=""noreferrer"">HERE</a></li>\n<li>when variable is NOT string - you can run it <a href=""https://jsbench.me/p0kf5vcq3c/1"" rel=""noreferrer"">HERE</a></li>\n</ul>\n<p>Below snippet presents differences between solutions</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false""><div class=""snippet-display"" style=""vertical-align: center""><p><a class=""snippet-show-link-chevron""><span class=""expander-arrow-hide"" style=""vertical-align: middle;""></span></a><a class=""snippet-show-link""><span class=""show-hide"" data-ishidden=""true"" style=""vertical-align: middle"">Show code snippet</span></a></p></div>\n<div class=""snippet-code snippet-currently-hidden"" style=""display: none;"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>) || (x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/17772086/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">B</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">C</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> _.<span class=""hljs-title function_"">isString</span>(x);\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">D</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> $.<span class=""hljs-title function_"">type</span>(x) === <span class=""hljs-string"">""string""</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/16215800/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">E</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/42493631/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">F</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">charAt</span> != <span class=""hljs-literal"">null</span>\n}\n\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/57443488/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">G</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">String</span>(x) === x\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/19057360/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">H</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x + <span class=""hljs-string"">\'\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/4059166/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">I</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/28722301/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">J</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x?.<span class=""hljs-title function_"">toString</span>()\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/58892465/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">K</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x &amp;&amp; <span class=""hljs-keyword"">typeof</span> x.<span class=""hljs-title function_"">valueOf</span>() === <span class=""hljs-string"">""string""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">L</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>\n}\n\n<span class=""hljs-comment"">// ------------------</span>\n<span class=""hljs-comment"">//     PRESENTATION</span>\n<span class=""hljs-comment"">// ------------------</span>\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'Solutions results for different inputs \\n\\n\'</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""\'abc\' Str  \'\'  \' \' \'1\' \'0\'  1   0   {} [] true false null undef""</span>);\n\n<span class=""hljs-keyword"">let</span> tests = [ <span class=""hljs-string"">\'abc\'</span>, <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""abc""</span>),<span class=""hljs-string"">\'\'</span>,<span class=""hljs-string"">\' \'</span>,<span class=""hljs-string"">\'1\'</span>,<span class=""hljs-string"">\'0\'</span>,<span class=""hljs-number"">1</span>,<span class=""hljs-number"">0</span>,{},[],<span class=""hljs-literal"">true</span>,<span class=""hljs-literal"">false</span>,<span class=""hljs-literal"">null</span>,<span class=""hljs-literal"">undefined</span>];\n\n[A,B,C,D,E,F,G,H,I,J,K,L].<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">f</span>=&gt;</span> {  \n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(\n  <span class=""hljs-string"">`<span class=""hljs-subst"">${f.name}</span>   `</span> + tests.<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">v</span>=&gt;</span> (<span class=""hljs-number"">1</span>*!!<span class=""hljs-title function_"">f</span>(v)) ).<span class=""hljs-property"">join</span><span class=""hljs-string"">`   `</span>\n)})</code></pre>\n<pre class=""snippet-code-html lang-html s-code-block""><code class=""hljs language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n<span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js""</span> <span class=""hljs-attr"">integrity</span>=<span class=""hljs-string"">""sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==""</span> <span class=""hljs-attr"">crossorigin</span>=<span class=""hljs-string"">""anonymous""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n\n\nThis shippet only presents functions used in performance tests - it not perform tests itself!</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif4"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And here are example results for chrome</p>\n<p><a href=""https://i.stack.imgur.com/oCOIh.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/oCOIh.png"" alt=""enter image description here""></a></p>\n    ',)","2020-11-16 16:15:15Z, License: CC BY-SA 4.0","('31',)","('115010883',)",@jwatkins - I update table with results - thanks for you comment :),"('\n                \n                <span class=""comment-copy"">@jwatkins - I update table with results - thanks for you comment :)</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/860099/kamil-kie%c5%82czewski"" title=""82,567 reputation"" class=""comment-user"">Kamil Kiełczewski</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment115010883_63945948"" aria-label=""Link to comment""><span title=""2020-11-28 21:26:45Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Nov 28, 2020 at 21:26</span></a></span>\n            ',)","Nov 28, 2020 at 21:26","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
131,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,63945948.0,"Performance
Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.
Results
For all browsers (and both test cases)
solutions typeof||instanceof (A, I) and x===x+'' (H) are fast/fastest
solution _.isString (lodash lib) is medium/fast
solutions B and K are slowest
Update: 2020.11.28 I update results for x=123 Chrome column - for solution I there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.
Details
I perform 2 tests cases for solutions A B C D E F G H I J K L
when variable is string - you can run it HERE
when variable is NOT string - you can run it HERE
Below snippet presents differences between solutions
Show code snippet
And here are example results for chrome","('\n<h1>Performance</h1>\n<p>Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.</p>\n<h2>Results</h2>\n<p>For all browsers (and both test cases)</p>\n<ul>\n<li>solutions <code>typeof||instanceof</code> (A, I) and <code>x===x+\'\'</code> (H) are fast/fastest</li>\n<li>solution <code>_.isString</code> (lodash lib) is medium/fast</li>\n<li>solutions B and K are slowest</li>\n</ul>\n<p><a href=""https://i.stack.imgur.com/cpaxI.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/cpaxI.png"" alt=""enter image description here""></a></p>\n<p>Update: 2020.11.28 I update results for <code>x=123 Chrome</code> column - for solution <code>I</code> there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.</p>\n<h2>Details</h2>\n<p>I perform 2 tests cases for solutions\n<a href=""https://stackoverflow.com/a/9436948/860099"">A</a>\n<a href=""https://stackoverflow.com/a/17772086/860099"">B</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">C</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">D</a>\n<a href=""https://stackoverflow.com/a/16215800/860099"">E</a>\n<a href=""https://stackoverflow.com/a/42493631/860099"">F</a>\n<a href=""https://stackoverflow.com/a/57443488/860099"">G</a>\n<a href=""https://stackoverflow.com/a/19057360/860099"">H</a>\n<a href=""https://stackoverflow.com/a/4059166/860099"">I</a>\n<a href=""https://stackoverflow.com/a/28722301/860099"">J</a>\n<a href=""https://stackoverflow.com/a/58892465/860099"">K</a>\n<a href=""https://stackoverflow.com/a/9436948/860099"">L</a></p>\n<ul>\n<li>when variable is string - you can run it <a href=""https://jsbench.me/whkf5hbrps/1"" rel=""noreferrer"">HERE</a></li>\n<li>when variable is NOT string - you can run it <a href=""https://jsbench.me/p0kf5vcq3c/1"" rel=""noreferrer"">HERE</a></li>\n</ul>\n<p>Below snippet presents differences between solutions</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false""><div class=""snippet-display"" style=""vertical-align: center""><p><a class=""snippet-show-link-chevron""><span class=""expander-arrow-hide"" style=""vertical-align: middle;""></span></a><a class=""snippet-show-link""><span class=""show-hide"" data-ishidden=""true"" style=""vertical-align: middle"">Show code snippet</span></a></p></div>\n<div class=""snippet-code snippet-currently-hidden"" style=""display: none;"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>) || (x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/17772086/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">B</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">C</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> _.<span class=""hljs-title function_"">isString</span>(x);\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">D</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> $.<span class=""hljs-title function_"">type</span>(x) === <span class=""hljs-string"">""string""</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/16215800/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">E</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/42493631/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">F</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">charAt</span> != <span class=""hljs-literal"">null</span>\n}\n\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/57443488/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">G</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">String</span>(x) === x\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/19057360/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">H</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x + <span class=""hljs-string"">\'\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/4059166/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">I</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/28722301/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">J</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x?.<span class=""hljs-title function_"">toString</span>()\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/58892465/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">K</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x &amp;&amp; <span class=""hljs-keyword"">typeof</span> x.<span class=""hljs-title function_"">valueOf</span>() === <span class=""hljs-string"">""string""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">L</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>\n}\n\n<span class=""hljs-comment"">// ------------------</span>\n<span class=""hljs-comment"">//     PRESENTATION</span>\n<span class=""hljs-comment"">// ------------------</span>\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'Solutions results for different inputs \\n\\n\'</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""\'abc\' Str  \'\'  \' \' \'1\' \'0\'  1   0   {} [] true false null undef""</span>);\n\n<span class=""hljs-keyword"">let</span> tests = [ <span class=""hljs-string"">\'abc\'</span>, <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""abc""</span>),<span class=""hljs-string"">\'\'</span>,<span class=""hljs-string"">\' \'</span>,<span class=""hljs-string"">\'1\'</span>,<span class=""hljs-string"">\'0\'</span>,<span class=""hljs-number"">1</span>,<span class=""hljs-number"">0</span>,{},[],<span class=""hljs-literal"">true</span>,<span class=""hljs-literal"">false</span>,<span class=""hljs-literal"">null</span>,<span class=""hljs-literal"">undefined</span>];\n\n[A,B,C,D,E,F,G,H,I,J,K,L].<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">f</span>=&gt;</span> {  \n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(\n  <span class=""hljs-string"">`<span class=""hljs-subst"">${f.name}</span>   `</span> + tests.<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">v</span>=&gt;</span> (<span class=""hljs-number"">1</span>*!!<span class=""hljs-title function_"">f</span>(v)) ).<span class=""hljs-property"">join</span><span class=""hljs-string"">`   `</span>\n)})</code></pre>\n<pre class=""snippet-code-html lang-html s-code-block""><code class=""hljs language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n<span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js""</span> <span class=""hljs-attr"">integrity</span>=<span class=""hljs-string"">""sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==""</span> <span class=""hljs-attr"">crossorigin</span>=<span class=""hljs-string"">""anonymous""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n\n\nThis shippet only presents functions used in performance tests - it not perform tests itself!</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif4"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And here are example results for chrome</p>\n<p><a href=""https://i.stack.imgur.com/oCOIh.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/oCOIh.png"" alt=""enter image description here""></a></p>\n    ',)","2020-11-16 16:15:15Z, License: CC BY-SA 4.0","('31',)","('120770229',)","This is very, very useful - thanks! But some of the timed tests are arguably not correct - e.g. x + '' === x fails for strings created with new String(""string""). Perhaps it should be limited to correct tests, or at least have added columns for the result of each test for a simple test suite of e.g. null, undefined, 123, new Object() (should all give false) and """", ""abc"", new String(""""), new String(""abc"") (should all give true).","('\n                \n                <span class=""comment-copy"">This is very, very useful - thanks! But some of the timed tests are arguably not correct - e.g. <code>x + \'\' === x</code> fails for strings created with <code>new String(""string"")</code>. Perhaps it should be limited to correct tests, or at least have added columns for the result of each test for a simple test suite of e.g. <code>null</code>, <code>undefined</code>, <code>123</code>, <code>new Object()</code> (should all give <code>false</code>) and <code>""""</code>, <code>""abc""</code>, <code>new String("""")</code>, <code>new String(""abc"")</code> (should all give <code>true</code>).</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/795690/mikebeaton"" title=""3,156 reputation"" class=""comment-user"">MikeBeaton</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment120770229_63945948"" aria-label=""Link to comment""><span title=""2021-07-11 08:16:27Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 11, 2021 at 8:16</span></a></span>\n                        <span title=""this comment was edited 6 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jul 11, 2021 at 8:16","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
132,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,63945948.0,"Performance
Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.
Results
For all browsers (and both test cases)
solutions typeof||instanceof (A, I) and x===x+'' (H) are fast/fastest
solution _.isString (lodash lib) is medium/fast
solutions B and K are slowest
Update: 2020.11.28 I update results for x=123 Chrome column - for solution I there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.
Details
I perform 2 tests cases for solutions A B C D E F G H I J K L
when variable is string - you can run it HERE
when variable is NOT string - you can run it HERE
Below snippet presents differences between solutions
Show code snippet
And here are example results for chrome","('\n<h1>Performance</h1>\n<p>Today 2020.09.17 I perform tests on MacOs HighSierra 10.13.6 on Chrome v85, Safari v13.1.2 and Firefox v80 for chosen solutions.</p>\n<h2>Results</h2>\n<p>For all browsers (and both test cases)</p>\n<ul>\n<li>solutions <code>typeof||instanceof</code> (A, I) and <code>x===x+\'\'</code> (H) are fast/fastest</li>\n<li>solution <code>_.isString</code> (lodash lib) is medium/fast</li>\n<li>solutions B and K are slowest</li>\n</ul>\n<p><a href=""https://i.stack.imgur.com/cpaxI.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/cpaxI.png"" alt=""enter image description here""></a></p>\n<p>Update: 2020.11.28 I update results for <code>x=123 Chrome</code> column - for solution <code>I</code> there was probably an error value before (=69M too low) - I use Chrome 86.0 to repeat tests.</p>\n<h2>Details</h2>\n<p>I perform 2 tests cases for solutions\n<a href=""https://stackoverflow.com/a/9436948/860099"">A</a>\n<a href=""https://stackoverflow.com/a/17772086/860099"">B</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">C</a>\n<a href=""https://stackoverflow.com/a/20958909/860099"">D</a>\n<a href=""https://stackoverflow.com/a/16215800/860099"">E</a>\n<a href=""https://stackoverflow.com/a/42493631/860099"">F</a>\n<a href=""https://stackoverflow.com/a/57443488/860099"">G</a>\n<a href=""https://stackoverflow.com/a/19057360/860099"">H</a>\n<a href=""https://stackoverflow.com/a/4059166/860099"">I</a>\n<a href=""https://stackoverflow.com/a/28722301/860099"">J</a>\n<a href=""https://stackoverflow.com/a/58892465/860099"">K</a>\n<a href=""https://stackoverflow.com/a/9436948/860099"">L</a></p>\n<ul>\n<li>when variable is string - you can run it <a href=""https://jsbench.me/whkf5hbrps/1"" rel=""noreferrer"">HERE</a></li>\n<li>when variable is NOT string - you can run it <a href=""https://jsbench.me/p0kf5vcq3c/1"" rel=""noreferrer"">HERE</a></li>\n</ul>\n<p>Below snippet presents differences between solutions</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false""><div class=""snippet-display"" style=""vertical-align: center""><p><a class=""snippet-show-link-chevron""><span class=""expander-arrow-hide"" style=""vertical-align: middle;""></span></a><a class=""snippet-show-link""><span class=""show-hide"" data-ishidden=""true"" style=""vertical-align: middle"">Show code snippet</span></a></p></div>\n<div class=""snippet-code snippet-currently-hidden"" style=""display: none;"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> (<span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>) || (x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>)\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/17772086/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">B</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(x) === <span class=""hljs-string"">""[object String]""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">C</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> _.<span class=""hljs-title function_"">isString</span>(x);\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/20958909/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">D</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> $.<span class=""hljs-title function_"">type</span>(x) === <span class=""hljs-string"">""string""</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/16215800/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">E</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>;\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/42493631/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">F</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x?.<span class=""hljs-property"">charAt</span> != <span class=""hljs-literal"">null</span>\n}\n\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/57443488/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">G</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">String</span>(x) === x\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/19057360/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">H</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x + <span class=""hljs-string"">\'\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/4059166/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">I</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">typeof</span> x == <span class=""hljs-string"">\'string\'</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/28722301/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">J</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x === x?.<span class=""hljs-title function_"">toString</span>()\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/58892465/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">K</span>(<span class=""hljs-params"">x</span>){\n  <span class=""hljs-keyword"">return</span> x &amp;&amp; <span class=""hljs-keyword"">typeof</span> x.<span class=""hljs-title function_"">valueOf</span>() === <span class=""hljs-string"">""string""</span>\n}\n\n<span class=""hljs-comment"">// https://stackoverflow.com/a/9436948/860099</span>\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">L</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">String</span>\n}\n\n<span class=""hljs-comment"">// ------------------</span>\n<span class=""hljs-comment"">//     PRESENTATION</span>\n<span class=""hljs-comment"">// ------------------</span>\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">\'Solutions results for different inputs \\n\\n\'</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">""\'abc\' Str  \'\'  \' \' \'1\' \'0\'  1   0   {} [] true false null undef""</span>);\n\n<span class=""hljs-keyword"">let</span> tests = [ <span class=""hljs-string"">\'abc\'</span>, <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">""abc""</span>),<span class=""hljs-string"">\'\'</span>,<span class=""hljs-string"">\' \'</span>,<span class=""hljs-string"">\'1\'</span>,<span class=""hljs-string"">\'0\'</span>,<span class=""hljs-number"">1</span>,<span class=""hljs-number"">0</span>,{},[],<span class=""hljs-literal"">true</span>,<span class=""hljs-literal"">false</span>,<span class=""hljs-literal"">null</span>,<span class=""hljs-literal"">undefined</span>];\n\n[A,B,C,D,E,F,G,H,I,J,K,L].<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">f</span>=&gt;</span> {  \n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(\n  <span class=""hljs-string"">`<span class=""hljs-subst"">${f.name}</span>   `</span> + tests.<span class=""hljs-title function_"">map</span>(<span class=""hljs-function""><span class=""hljs-params"">v</span>=&gt;</span> (<span class=""hljs-number"">1</span>*!!<span class=""hljs-title function_"">f</span>(v)) ).<span class=""hljs-property"">join</span><span class=""hljs-string"">`   `</span>\n)})</code></pre>\n<pre class=""snippet-code-html lang-html s-code-block""><code class=""hljs language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n<span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js""</span> <span class=""hljs-attr"">integrity</span>=<span class=""hljs-string"">""sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==""</span> <span class=""hljs-attr"">crossorigin</span>=<span class=""hljs-string"">""anonymous""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>\n\n\nThis shippet only presents functions used in performance tests - it not perform tests itself!</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif4"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And here are example results for chrome</p>\n<p><a href=""https://i.stack.imgur.com/oCOIh.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/oCOIh.png"" alt=""enter image description here""></a></p>\n    ',)","2020-11-16 16:15:15Z, License: CC BY-SA 4.0","('31',)","('120770252',)",Test A seems to be getting a slight speedup (at least in Chrome on macOS) from using == instead of === - but not sure if this matters.,"('\n                \n                <span class=""comment-copy"">Test A seems to be getting a slight speedup (at least in Chrome on macOS) from using <code>==</code> instead of <code>===</code> - but not sure if this matters.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/795690/mikebeaton"" title=""3,156 reputation"" class=""comment-user"">MikeBeaton</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment120770252_63945948"" aria-label=""Link to comment""><span title=""2021-07-11 08:18:55Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 11, 2021 at 8:18</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jul 11, 2021 at 8:18","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
133,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,50569825.0,"This is a great example of why performance matters:
Doing something as simple as a test for a string can be expensive if not done correctly.
For example, if I wanted to write a function to test if something is a string, I could do it in one of two ways:
1) const isString = str => (Object.prototype.toString.call(str) === '[object String]');
2) const isString = str => ((typeof str === 'string') || (str instanceof String));
Both of these are pretty straight forward, so what could possibly impact performance? Generally speaking, function calls can be expensive, especially if you don't know what's happening inside. In the first example, there is a function call to Object's toString method. In the second example, there are no function calls, as typeof and instanceof are operators. Operators are significantly faster than function calls.
When the performance is tested, example 1 is 79% slower than example 2!
See the tests: https://jsperf.com/isstringtype","('\n<p>This is a great example of why performance matters:</p>\n\n<p>Doing something as simple as a test for a string can be expensive if not done correctly.</p>\n\n<p>For example, if I wanted to write a function to test if something is a string, I could do it in one of two ways:</p>\n\n<p>1) <code>const isString = str =&gt; (Object.prototype.toString.call(str) === \'[object String]\');</code></p>\n\n<p>2) <code>const isString = str =&gt; ((typeof str === \'string\') || (str instanceof String));</code></p>\n\n<p>Both of these are pretty straight forward, so what could possibly impact performance?  Generally speaking, function calls can be expensive, especially if you don\'t know what\'s happening inside. In the first example, there is a function call to Object\'s toString method.  In the second example, there are no function calls, as typeof and instanceof are operators. Operators are significantly faster than function calls.</p>\n\n<p>When the performance is tested, example 1 is 79% slower than example 2!</p>\n\n<p>See the tests: <a href=""https://jsperf.com/isstringtype"" rel=""noreferrer"">https://jsperf.com/isstringtype</a></p>\n    ',)","2019-01-03 17:00:54Z, License: CC BY-SA 4.0","('19',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
134,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,50569825.0,"This is a great example of why performance matters:
Doing something as simple as a test for a string can be expensive if not done correctly.
For example, if I wanted to write a function to test if something is a string, I could do it in one of two ways:
1) const isString = str => (Object.prototype.toString.call(str) === '[object String]');
2) const isString = str => ((typeof str === 'string') || (str instanceof String));
Both of these are pretty straight forward, so what could possibly impact performance? Generally speaking, function calls can be expensive, especially if you don't know what's happening inside. In the first example, there is a function call to Object's toString method. In the second example, there are no function calls, as typeof and instanceof are operators. Operators are significantly faster than function calls.
When the performance is tested, example 1 is 79% slower than example 2!
See the tests: https://jsperf.com/isstringtype","('\n<p>This is a great example of why performance matters:</p>\n\n<p>Doing something as simple as a test for a string can be expensive if not done correctly.</p>\n\n<p>For example, if I wanted to write a function to test if something is a string, I could do it in one of two ways:</p>\n\n<p>1) <code>const isString = str =&gt; (Object.prototype.toString.call(str) === \'[object String]\');</code></p>\n\n<p>2) <code>const isString = str =&gt; ((typeof str === \'string\') || (str instanceof String));</code></p>\n\n<p>Both of these are pretty straight forward, so what could possibly impact performance?  Generally speaking, function calls can be expensive, especially if you don\'t know what\'s happening inside. In the first example, there is a function call to Object\'s toString method.  In the second example, there are no function calls, as typeof and instanceof are operators. Operators are significantly faster than function calls.</p>\n\n<p>When the performance is tested, example 1 is 79% slower than example 2!</p>\n\n<p>See the tests: <a href=""https://jsperf.com/isstringtype"" rel=""noreferrer"">https://jsperf.com/isstringtype</a></p>\n    ',)","2019-01-03 17:00:54Z, License: CC BY-SA 4.0","('19',)","('94889645',)","The test link is dead, but I believe you. This kind of information is super important. IMHO this should be, if not the most upvoted answer, at least the most upvoted comment on the current leading answer.","('\n                \n                <span class=""comment-copy"">The test link is dead, but I believe you. This kind of information is super important.  IMHO this should be, if not the most upvoted answer, at least the most upvoted comment on the current leading answer.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/26286/coderer"" title=""25,337 reputation"" class=""comment-user"">Coderer</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment94889645_50569825"" aria-label=""Link to comment""><span title=""2019-01-03 17:00:54Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jan 3, 2019 at 17:00</span></a></span>\n            ',)","Jan 3, 2019 at 17:00","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
135,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,50569825.0,"This is a great example of why performance matters:
Doing something as simple as a test for a string can be expensive if not done correctly.
For example, if I wanted to write a function to test if something is a string, I could do it in one of two ways:
1) const isString = str => (Object.prototype.toString.call(str) === '[object String]');
2) const isString = str => ((typeof str === 'string') || (str instanceof String));
Both of these are pretty straight forward, so what could possibly impact performance? Generally speaking, function calls can be expensive, especially if you don't know what's happening inside. In the first example, there is a function call to Object's toString method. In the second example, there are no function calls, as typeof and instanceof are operators. Operators are significantly faster than function calls.
When the performance is tested, example 1 is 79% slower than example 2!
See the tests: https://jsperf.com/isstringtype","('\n<p>This is a great example of why performance matters:</p>\n\n<p>Doing something as simple as a test for a string can be expensive if not done correctly.</p>\n\n<p>For example, if I wanted to write a function to test if something is a string, I could do it in one of two ways:</p>\n\n<p>1) <code>const isString = str =&gt; (Object.prototype.toString.call(str) === \'[object String]\');</code></p>\n\n<p>2) <code>const isString = str =&gt; ((typeof str === \'string\') || (str instanceof String));</code></p>\n\n<p>Both of these are pretty straight forward, so what could possibly impact performance?  Generally speaking, function calls can be expensive, especially if you don\'t know what\'s happening inside. In the first example, there is a function call to Object\'s toString method.  In the second example, there are no function calls, as typeof and instanceof are operators. Operators are significantly faster than function calls.</p>\n\n<p>When the performance is tested, example 1 is 79% slower than example 2!</p>\n\n<p>See the tests: <a href=""https://jsperf.com/isstringtype"" rel=""noreferrer"">https://jsperf.com/isstringtype</a></p>\n    ',)","2019-01-03 17:00:54Z, License: CC BY-SA 4.0","('19',)","('95452298',)","typeof str === 'string' || str instanceof String (can drop the parenthesis which I prefer in if (..) cases); regardless, checking both the primitive and object types in #2 is clear and sufficient. These checks should be 'rare' anyway.","('\n                \n                <span class=""comment-copy""><code>typeof str === \'string\' || str instanceof String</code> (can drop the parenthesis which I prefer in <code>if (..)</code> cases); regardless, checking both the primitive and object types in #2 is clear and sufficient. These checks should be \'rare\' anyway.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2864740/user2864740"" title=""59,399 reputation"" class=""comment-user"">user2864740</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment95452298_50569825"" aria-label=""Link to comment""><span title=""2019-01-22 20:48:23Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jan 22, 2019 at 20:48</span></a></span>\n                        <span title=""this comment was edited 4 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jan 22, 2019 at 20:48","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
136,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,50569825.0,"This is a great example of why performance matters:
Doing something as simple as a test for a string can be expensive if not done correctly.
For example, if I wanted to write a function to test if something is a string, I could do it in one of two ways:
1) const isString = str => (Object.prototype.toString.call(str) === '[object String]');
2) const isString = str => ((typeof str === 'string') || (str instanceof String));
Both of these are pretty straight forward, so what could possibly impact performance? Generally speaking, function calls can be expensive, especially if you don't know what's happening inside. In the first example, there is a function call to Object's toString method. In the second example, there are no function calls, as typeof and instanceof are operators. Operators are significantly faster than function calls.
When the performance is tested, example 1 is 79% slower than example 2!
See the tests: https://jsperf.com/isstringtype","('\n<p>This is a great example of why performance matters:</p>\n\n<p>Doing something as simple as a test for a string can be expensive if not done correctly.</p>\n\n<p>For example, if I wanted to write a function to test if something is a string, I could do it in one of two ways:</p>\n\n<p>1) <code>const isString = str =&gt; (Object.prototype.toString.call(str) === \'[object String]\');</code></p>\n\n<p>2) <code>const isString = str =&gt; ((typeof str === \'string\') || (str instanceof String));</code></p>\n\n<p>Both of these are pretty straight forward, so what could possibly impact performance?  Generally speaking, function calls can be expensive, especially if you don\'t know what\'s happening inside. In the first example, there is a function call to Object\'s toString method.  In the second example, there are no function calls, as typeof and instanceof are operators. Operators are significantly faster than function calls.</p>\n\n<p>When the performance is tested, example 1 is 79% slower than example 2!</p>\n\n<p>See the tests: <a href=""https://jsperf.com/isstringtype"" rel=""noreferrer"">https://jsperf.com/isstringtype</a></p>\n    ',)","2019-01-03 17:00:54Z, License: CC BY-SA 4.0","('19',)","('113487365',)","here is a benchmark, 30x faster on firefox, 2 nanoseconds vs 50 ns","('\n                \n                <span class=""comment-copy""><a href=""http://jsbench.github.io/#9ea2f56bba30fed35f1b5f2b22954d4e"" rel=""nofollow noreferrer"">here</a> is a benchmark, 30x faster on firefox, 2 nanoseconds vs 50 ns</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/10440128/milahu"" title=""2,280 reputation"" class=""comment-user"">milahu</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment113487365_50569825"" aria-label=""Link to comment""><span title=""2020-10-02 19:37:28Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Oct 2, 2020 at 19:37</span></a></span>\n            ',)","Oct 2, 2020 at 19:37","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
137,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,50569825.0,"This is a great example of why performance matters:
Doing something as simple as a test for a string can be expensive if not done correctly.
For example, if I wanted to write a function to test if something is a string, I could do it in one of two ways:
1) const isString = str => (Object.prototype.toString.call(str) === '[object String]');
2) const isString = str => ((typeof str === 'string') || (str instanceof String));
Both of these are pretty straight forward, so what could possibly impact performance? Generally speaking, function calls can be expensive, especially if you don't know what's happening inside. In the first example, there is a function call to Object's toString method. In the second example, there are no function calls, as typeof and instanceof are operators. Operators are significantly faster than function calls.
When the performance is tested, example 1 is 79% slower than example 2!
See the tests: https://jsperf.com/isstringtype","('\n<p>This is a great example of why performance matters:</p>\n\n<p>Doing something as simple as a test for a string can be expensive if not done correctly.</p>\n\n<p>For example, if I wanted to write a function to test if something is a string, I could do it in one of two ways:</p>\n\n<p>1) <code>const isString = str =&gt; (Object.prototype.toString.call(str) === \'[object String]\');</code></p>\n\n<p>2) <code>const isString = str =&gt; ((typeof str === \'string\') || (str instanceof String));</code></p>\n\n<p>Both of these are pretty straight forward, so what could possibly impact performance?  Generally speaking, function calls can be expensive, especially if you don\'t know what\'s happening inside. In the first example, there is a function call to Object\'s toString method.  In the second example, there are no function calls, as typeof and instanceof are operators. Operators are significantly faster than function calls.</p>\n\n<p>When the performance is tested, example 1 is 79% slower than example 2!</p>\n\n<p>See the tests: <a href=""https://jsperf.com/isstringtype"" rel=""noreferrer"">https://jsperf.com/isstringtype</a></p>\n    ',)","2019-01-03 17:00:54Z, License: CC BY-SA 4.0","('19',)","('113551015',)","Yeah, @MilaNautikus the only issue with the Boolean(str.charCodeAt) solution is that it doesn't handle the case of undefined/null; otherwise I could have just said const isString = str => str.charCodeAt !== undefined for the same performance","('\n                \n                <span class=""comment-copy"">Yeah, @MilaNautikus the only issue with the <code>Boolean(str.charCodeAt)</code> solution is that it doesn\'t handle the case of undefined/null; otherwise I could have just said <code>const isString = str =&gt; str.charCodeAt !== undefined</code> for the same performance</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/4821374/rob-brander"" title=""3,672 reputation"" class=""comment-user"">Rob Brander</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment113551015_50569825"" aria-label=""Link to comment""><span title=""2020-10-05 18:27:24Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Oct 5, 2020 at 18:27</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Oct 5, 2020 at 18:27","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
138,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,47146004.0,"I like to use this simple solution:
var myString = ""test"";
if(myString.constructor === String)
{
     //It's a string
}","('\n<p>I like to use this simple solution:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> myString = <span class=""hljs-string"">""test""</span>;\n<span class=""hljs-keyword"">if</span>(myString.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>)\n{\n     <span class=""hljs-comment"">//It\'s a string</span>\n}\n</code></pre>\n    ',)","2018-05-07 19:36:05Z, License: CC BY-SA 4.0","('16',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
139,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,47146004.0,"I like to use this simple solution:
var myString = ""test"";
if(myString.constructor === String)
{
     //It's a string
}","('\n<p>I like to use this simple solution:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> myString = <span class=""hljs-string"">""test""</span>;\n<span class=""hljs-keyword"">if</span>(myString.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>)\n{\n     <span class=""hljs-comment"">//It\'s a string</span>\n}\n</code></pre>\n    ',)","2018-05-07 19:36:05Z, License: CC BY-SA 4.0","('16',)","('87459853',)","How is that different from Cody's answer, 4 years later?","('\n                \n                <span class=""comment-copy"">How is that different from Cody\'s answer, 4 years later?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/472610/jonathan-h"" title=""7,471 reputation"" class=""comment-user"">Jonathan H</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment87459853_47146004"" aria-label=""Link to comment""><span title=""2018-05-07 19:36:05Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">May 7, 2018 at 19:36</span></a></span>\n            ',)","May 7, 2018 at 19:36","('4',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
140,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,47146004.0,"I like to use this simple solution:
var myString = ""test"";
if(myString.constructor === String)
{
     //It's a string
}","('\n<p>I like to use this simple solution:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> myString = <span class=""hljs-string"">""test""</span>;\n<span class=""hljs-keyword"">if</span>(myString.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>)\n{\n     <span class=""hljs-comment"">//It\'s a string</span>\n}\n</code></pre>\n    ',)","2018-05-07 19:36:05Z, License: CC BY-SA 4.0","('16',)","('87503426',)",@Sheljohn Cody's answer is great. My answer (complete text) is shorter and straight to the point. You asked... :),"('\n                \n                <span class=""comment-copy"">@Sheljohn Cody\'s answer is great. My answer (complete text) is shorter and straight to the point. You asked... :)</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2512022/scottyg"" title=""3,154 reputation"" class=""comment-user"">ScottyG</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment87503426_47146004"" aria-label=""Link to comment""><span title=""2018-05-08 22:03:28Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">May 8, 2018 at 22:03</span></a></span>\n            ',)","May 8, 2018 at 22:03","('4',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
141,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,47146004.0,"I like to use this simple solution:
var myString = ""test"";
if(myString.constructor === String)
{
     //It's a string
}","('\n<p>I like to use this simple solution:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> myString = <span class=""hljs-string"">""test""</span>;\n<span class=""hljs-keyword"">if</span>(myString.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>)\n{\n     <span class=""hljs-comment"">//It\'s a string</span>\n}\n</code></pre>\n    ',)","2018-05-07 19:36:05Z, License: CC BY-SA 4.0","('16',)","('106800094',)","As a function, this would need a way of dealing with undefined and null, and still getting the answer right for empty strings (both '' and new String('')).","('\n                \n                <span class=""comment-copy"">As a function, this would need a way of dealing with <code>undefined</code> and <code>null</code>, and still getting the answer right for empty strings (both <code>\'\'</code> and <code>new String(\'\')</code>).</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/795690/mikebeaton"" title=""3,156 reputation"" class=""comment-user"">MikeBeaton</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment106800094_47146004"" aria-label=""Link to comment""><span title=""2020-02-24 10:48:42Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Feb 24, 2020 at 10:48</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Feb 24, 2020 at 10:48","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
142,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,47146004.0,"I like to use this simple solution:
var myString = ""test"";
if(myString.constructor === String)
{
     //It's a string
}","('\n<p>I like to use this simple solution:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> myString = <span class=""hljs-string"">""test""</span>;\n<span class=""hljs-keyword"">if</span>(myString.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>)\n{\n     <span class=""hljs-comment"">//It\'s a string</span>\n}\n</code></pre>\n    ',)","2018-05-07 19:36:05Z, License: CC BY-SA 4.0","('16',)","('108640768',)",@MikeBeaton No problem: (mystring || false) && mystring.constructor === String. I used false in case it's used in a function that must return a boolean.,"('\n                \n                <span class=""comment-copy"">@MikeBeaton No problem: <code>(mystring || false) &amp;&amp; mystring.constructor === String</code>. I used false in case it\'s used in a function that must return a boolean.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/793558/alans"" title=""1,022 reputation"" class=""comment-user"">alans</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment108640768_47146004"" aria-label=""Link to comment""><span title=""2020-04-24 16:59:27Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Apr 24, 2020 at 16:59</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 24, 2020 at 16:59","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
143,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,47146004.0,"I like to use this simple solution:
var myString = ""test"";
if(myString.constructor === String)
{
     //It's a string
}","('\n<p>I like to use this simple solution:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> myString = <span class=""hljs-string"">""test""</span>;\n<span class=""hljs-keyword"">if</span>(myString.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>)\n{\n     <span class=""hljs-comment"">//It\'s a string</span>\n}\n</code></pre>\n    ',)","2018-05-07 19:36:05Z, License: CC BY-SA 4.0","('16',)","('120766086',)",@MikeBeaton - do empty strings return a different answer for .constructor? That would be quite surprising.,"('\n                \n                <span class=""comment-copy"">@MikeBeaton - do empty strings return a different answer for <code>.constructor</code>? That would be quite surprising.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/199364/toolmakersteve"" title=""16,317 reputation"" class=""comment-user"">ToolmakerSteve</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment120766086_47146004"" aria-label=""Link to comment""><span title=""2021-07-10 22:12:59Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 10, 2021 at 22:12</span></a></span>\n            ',)","Jul 10, 2021 at 22:12","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
144,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,57443488.0,"I find this simple technique useful to type-check for String -
String(x) === x // true, if x is a string
                // false in every other case
const test = x =>
  console.assert
    ( String(x) === x
    , `not a string: ${x}`
    )

test(""some string"")
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
The same technique works for Number too -
Number(x) === x // true, if x is a number
                // false in every other case
const test = x =>
  console.assert
    ( Number(x) === x
    , `not a number: ${x}`
    )

test(""some string"") // assertion failed
test(123)           
test(0)             
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
And for RegExp -
RegExp(x) === x // true, if x is a regexp
                // false in every other case
const test = x =>
  console.assert
    ( RegExp(x) === x
    , `not a regexp: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
Same for Object -
Object(x) === x // true, if x is an object
                // false in every other case
NB, regexps, arrays, and functions are considered objects too.
const test = x =>
  console.assert
    ( Object(x) === x
    , `not an object: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      
test({ a: 1 })      
test(x => x + 1)    
Run code snippetExpand snippet
But, checking for Array is a bit different -
Array.isArray(x) === x // true, if x is an array
                       // false in every other case
const test = x =>
  console.assert
    ( Array.isArray(x)
    , `not an array: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
This technique does not work for Functions however -
Function(x) === x // always false
For @Faither -
const fmt = JSON.stringify

function test1() {
  const a = ""1""
  const b = 1
  console.log(`Number(${fmt(a)}) === ${fmt(b)}`, Number(a) === b) // true
}

function test2() {
  const a = ""1""
  const b = 1
  console.log(`Number.isInteger(${fmt(a)})`, Number.isInteger(a)) // false
  console.log(`Number.isInteger(${fmt(b)})`, Number.isInteger(b)) // true
}

function test3() {
  name = 1 // global name will always be a string
  console.log(fmt(name)) // ""1""
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // true
}

function test4() {
  const name = 1 // local name 
  console.log(fmt(name)) // 1
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // false
}

test1(); test2(); test3(); test4()
Run code snippetExpand snippet","('\n<p>I find this simple technique useful to type-check for <strong>String</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">String</span>(x) === x <span class=""hljs-comment"">// true, if x is a string</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">String</span>(x) === x\n    , <span class=""hljs-string"">`not a string: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>)\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif5"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>The same technique works for <strong>Number</strong> too -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Number</span>(x) === x <span class=""hljs-comment"">// true, if x is a number</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Number</span>(x) === x\n    , <span class=""hljs-string"">`not a number: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif6"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And for <strong>RegExp</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">RegExp</span>(x) === x <span class=""hljs-comment"">// true, if x is a regexp</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">RegExp</span>(x) === x\n    , <span class=""hljs-string"">`not a regexp: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif7"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Same for <strong>Object</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>(x) === x <span class=""hljs-comment"">// true, if x is an object</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p>NB, regexps, arrays, and functions are considered objects too.</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Object</span>(x) === x\n    , <span class=""hljs-string"">`not an object: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    </code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif8"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>But, checking for <strong>Array</strong> is a bit different -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x) === x <span class=""hljs-comment"">// true, if x is an array</span>\n                       <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x)\n    , <span class=""hljs-string"">`not an array: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif9"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>This technique does <em>not</em> work for <strong>Functions</strong> however -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Function</span>(x) === x <span class=""hljs-comment"">// always false</span>\n</code></pre>\n<hr>\n<p>For @Faither -</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> fmt = <span class=""hljs-title class_"">JSON</span>.<span class=""hljs-property"">stringify</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test1</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number(<span class=""hljs-subst"">${fmt(a)}</span>) === <span class=""hljs-subst"">${fmt(b)}</span>`</span>, <span class=""hljs-title class_"">Number</span>(a) === b) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test2</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(a)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(a)) <span class=""hljs-comment"">// false</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(b)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(b)) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test3</span>(<span class=""hljs-params""></span>) {\n  name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// global name will always be a string</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// ""1""</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test4</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// local name </span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// 1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// false</span>\n}\n\n<span class=""hljs-title function_"">test1</span>(); <span class=""hljs-title function_"">test2</span>(); <span class=""hljs-title function_"">test3</span>(); <span class=""hljs-title function_"">test4</span>()</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif10"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2020-01-03 12:53:53Z, License: CC BY-SA 4.0","('15',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
145,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,57443488.0,"I find this simple technique useful to type-check for String -
String(x) === x // true, if x is a string
                // false in every other case
const test = x =>
  console.assert
    ( String(x) === x
    , `not a string: ${x}`
    )

test(""some string"")
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
The same technique works for Number too -
Number(x) === x // true, if x is a number
                // false in every other case
const test = x =>
  console.assert
    ( Number(x) === x
    , `not a number: ${x}`
    )

test(""some string"") // assertion failed
test(123)           
test(0)             
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
And for RegExp -
RegExp(x) === x // true, if x is a regexp
                // false in every other case
const test = x =>
  console.assert
    ( RegExp(x) === x
    , `not a regexp: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
Same for Object -
Object(x) === x // true, if x is an object
                // false in every other case
NB, regexps, arrays, and functions are considered objects too.
const test = x =>
  console.assert
    ( Object(x) === x
    , `not an object: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      
test({ a: 1 })      
test(x => x + 1)    
Run code snippetExpand snippet
But, checking for Array is a bit different -
Array.isArray(x) === x // true, if x is an array
                       // false in every other case
const test = x =>
  console.assert
    ( Array.isArray(x)
    , `not an array: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
This technique does not work for Functions however -
Function(x) === x // always false
For @Faither -
const fmt = JSON.stringify

function test1() {
  const a = ""1""
  const b = 1
  console.log(`Number(${fmt(a)}) === ${fmt(b)}`, Number(a) === b) // true
}

function test2() {
  const a = ""1""
  const b = 1
  console.log(`Number.isInteger(${fmt(a)})`, Number.isInteger(a)) // false
  console.log(`Number.isInteger(${fmt(b)})`, Number.isInteger(b)) // true
}

function test3() {
  name = 1 // global name will always be a string
  console.log(fmt(name)) // ""1""
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // true
}

function test4() {
  const name = 1 // local name 
  console.log(fmt(name)) // 1
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // false
}

test1(); test2(); test3(); test4()
Run code snippetExpand snippet","('\n<p>I find this simple technique useful to type-check for <strong>String</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">String</span>(x) === x <span class=""hljs-comment"">// true, if x is a string</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">String</span>(x) === x\n    , <span class=""hljs-string"">`not a string: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>)\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif5"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>The same technique works for <strong>Number</strong> too -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Number</span>(x) === x <span class=""hljs-comment"">// true, if x is a number</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Number</span>(x) === x\n    , <span class=""hljs-string"">`not a number: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif6"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And for <strong>RegExp</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">RegExp</span>(x) === x <span class=""hljs-comment"">// true, if x is a regexp</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">RegExp</span>(x) === x\n    , <span class=""hljs-string"">`not a regexp: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif7"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Same for <strong>Object</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>(x) === x <span class=""hljs-comment"">// true, if x is an object</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p>NB, regexps, arrays, and functions are considered objects too.</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Object</span>(x) === x\n    , <span class=""hljs-string"">`not an object: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    </code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif8"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>But, checking for <strong>Array</strong> is a bit different -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x) === x <span class=""hljs-comment"">// true, if x is an array</span>\n                       <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x)\n    , <span class=""hljs-string"">`not an array: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif9"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>This technique does <em>not</em> work for <strong>Functions</strong> however -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Function</span>(x) === x <span class=""hljs-comment"">// always false</span>\n</code></pre>\n<hr>\n<p>For @Faither -</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> fmt = <span class=""hljs-title class_"">JSON</span>.<span class=""hljs-property"">stringify</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test1</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number(<span class=""hljs-subst"">${fmt(a)}</span>) === <span class=""hljs-subst"">${fmt(b)}</span>`</span>, <span class=""hljs-title class_"">Number</span>(a) === b) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test2</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(a)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(a)) <span class=""hljs-comment"">// false</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(b)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(b)) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test3</span>(<span class=""hljs-params""></span>) {\n  name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// global name will always be a string</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// ""1""</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test4</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// local name </span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// 1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// false</span>\n}\n\n<span class=""hljs-title function_"">test1</span>(); <span class=""hljs-title function_"">test2</span>(); <span class=""hljs-title function_"">test3</span>(); <span class=""hljs-title function_"">test4</span>()</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif10"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2020-01-03 12:53:53Z, License: CC BY-SA 4.0","('15',)","('105324124',)",var x = new String(x); String(x)===x returns false. however ({}).toString.call(x).search(/String/)>0 always returns for stringy things,"('\n                \n                <span class=""comment-copy""><code>var x = new String(x); String(x)===x</code> returns false. however <code>({}).toString.call(x).search(/String/)&gt;0</code> always returns for stringy things</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/830899/unsynchronized"" title=""4,819 reputation"" class=""comment-user"">unsynchronized</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment105324124_57443488"" aria-label=""Link to comment""><span title=""2020-01-03 12:53:53Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jan 3, 2020 at 12:53</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jan 3, 2020 at 12:53","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
146,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,57443488.0,"I find this simple technique useful to type-check for String -
String(x) === x // true, if x is a string
                // false in every other case
const test = x =>
  console.assert
    ( String(x) === x
    , `not a string: ${x}`
    )

test(""some string"")
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
The same technique works for Number too -
Number(x) === x // true, if x is a number
                // false in every other case
const test = x =>
  console.assert
    ( Number(x) === x
    , `not a number: ${x}`
    )

test(""some string"") // assertion failed
test(123)           
test(0)             
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
And for RegExp -
RegExp(x) === x // true, if x is a regexp
                // false in every other case
const test = x =>
  console.assert
    ( RegExp(x) === x
    , `not a regexp: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
Same for Object -
Object(x) === x // true, if x is an object
                // false in every other case
NB, regexps, arrays, and functions are considered objects too.
const test = x =>
  console.assert
    ( Object(x) === x
    , `not an object: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      
test({ a: 1 })      
test(x => x + 1)    
Run code snippetExpand snippet
But, checking for Array is a bit different -
Array.isArray(x) === x // true, if x is an array
                       // false in every other case
const test = x =>
  console.assert
    ( Array.isArray(x)
    , `not an array: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
This technique does not work for Functions however -
Function(x) === x // always false
For @Faither -
const fmt = JSON.stringify

function test1() {
  const a = ""1""
  const b = 1
  console.log(`Number(${fmt(a)}) === ${fmt(b)}`, Number(a) === b) // true
}

function test2() {
  const a = ""1""
  const b = 1
  console.log(`Number.isInteger(${fmt(a)})`, Number.isInteger(a)) // false
  console.log(`Number.isInteger(${fmt(b)})`, Number.isInteger(b)) // true
}

function test3() {
  name = 1 // global name will always be a string
  console.log(fmt(name)) // ""1""
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // true
}

function test4() {
  const name = 1 // local name 
  console.log(fmt(name)) // 1
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // false
}

test1(); test2(); test3(); test4()
Run code snippetExpand snippet","('\n<p>I find this simple technique useful to type-check for <strong>String</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">String</span>(x) === x <span class=""hljs-comment"">// true, if x is a string</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">String</span>(x) === x\n    , <span class=""hljs-string"">`not a string: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>)\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif5"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>The same technique works for <strong>Number</strong> too -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Number</span>(x) === x <span class=""hljs-comment"">// true, if x is a number</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Number</span>(x) === x\n    , <span class=""hljs-string"">`not a number: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif6"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And for <strong>RegExp</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">RegExp</span>(x) === x <span class=""hljs-comment"">// true, if x is a regexp</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">RegExp</span>(x) === x\n    , <span class=""hljs-string"">`not a regexp: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif7"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Same for <strong>Object</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>(x) === x <span class=""hljs-comment"">// true, if x is an object</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p>NB, regexps, arrays, and functions are considered objects too.</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Object</span>(x) === x\n    , <span class=""hljs-string"">`not an object: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    </code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif8"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>But, checking for <strong>Array</strong> is a bit different -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x) === x <span class=""hljs-comment"">// true, if x is an array</span>\n                       <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x)\n    , <span class=""hljs-string"">`not an array: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif9"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>This technique does <em>not</em> work for <strong>Functions</strong> however -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Function</span>(x) === x <span class=""hljs-comment"">// always false</span>\n</code></pre>\n<hr>\n<p>For @Faither -</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> fmt = <span class=""hljs-title class_"">JSON</span>.<span class=""hljs-property"">stringify</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test1</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number(<span class=""hljs-subst"">${fmt(a)}</span>) === <span class=""hljs-subst"">${fmt(b)}</span>`</span>, <span class=""hljs-title class_"">Number</span>(a) === b) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test2</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(a)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(a)) <span class=""hljs-comment"">// false</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(b)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(b)) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test3</span>(<span class=""hljs-params""></span>) {\n  name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// global name will always be a string</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// ""1""</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test4</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// local name </span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// 1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// false</span>\n}\n\n<span class=""hljs-title function_"">test1</span>(); <span class=""hljs-title function_"">test2</span>(); <span class=""hljs-title function_"">test3</span>(); <span class=""hljs-title function_"">test4</span>()</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif10"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2020-01-03 12:53:53Z, License: CC BY-SA 4.0","('15',)","('105324629',)","function isClass(x,re){return ({}).toString.call(x).search(re)>0;}; isClass(""hello"",/String/) or isClass(3,/Number/) or isClass(null,/Null/)","('\n                \n                <span class=""comment-copy""><code>function isClass(x,re){return ({}).toString.call(x).search(re)&gt;0;};</code> <code>isClass(""hello"",/String/)</code>  or <code>isClass(3,/Number/)</code> or <code>isClass(null,/Null/)</code></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/830899/unsynchronized"" title=""4,819 reputation"" class=""comment-user"">unsynchronized</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment105324629_57443488"" aria-label=""Link to comment""><span title=""2020-01-03 13:12:23Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jan 3, 2020 at 13:12</span></a></span>\n            ',)","Jan 3, 2020 at 13:12","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
147,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,57443488.0,"I find this simple technique useful to type-check for String -
String(x) === x // true, if x is a string
                // false in every other case
const test = x =>
  console.assert
    ( String(x) === x
    , `not a string: ${x}`
    )

test(""some string"")
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
The same technique works for Number too -
Number(x) === x // true, if x is a number
                // false in every other case
const test = x =>
  console.assert
    ( Number(x) === x
    , `not a number: ${x}`
    )

test(""some string"") // assertion failed
test(123)           
test(0)             
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
And for RegExp -
RegExp(x) === x // true, if x is a regexp
                // false in every other case
const test = x =>
  console.assert
    ( RegExp(x) === x
    , `not a regexp: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
Same for Object -
Object(x) === x // true, if x is an object
                // false in every other case
NB, regexps, arrays, and functions are considered objects too.
const test = x =>
  console.assert
    ( Object(x) === x
    , `not an object: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      
test({ a: 1 })      
test(x => x + 1)    
Run code snippetExpand snippet
But, checking for Array is a bit different -
Array.isArray(x) === x // true, if x is an array
                       // false in every other case
const test = x =>
  console.assert
    ( Array.isArray(x)
    , `not an array: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
This technique does not work for Functions however -
Function(x) === x // always false
For @Faither -
const fmt = JSON.stringify

function test1() {
  const a = ""1""
  const b = 1
  console.log(`Number(${fmt(a)}) === ${fmt(b)}`, Number(a) === b) // true
}

function test2() {
  const a = ""1""
  const b = 1
  console.log(`Number.isInteger(${fmt(a)})`, Number.isInteger(a)) // false
  console.log(`Number.isInteger(${fmt(b)})`, Number.isInteger(b)) // true
}

function test3() {
  name = 1 // global name will always be a string
  console.log(fmt(name)) // ""1""
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // true
}

function test4() {
  const name = 1 // local name 
  console.log(fmt(name)) // 1
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // false
}

test1(); test2(); test3(); test4()
Run code snippetExpand snippet","('\n<p>I find this simple technique useful to type-check for <strong>String</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">String</span>(x) === x <span class=""hljs-comment"">// true, if x is a string</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">String</span>(x) === x\n    , <span class=""hljs-string"">`not a string: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>)\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif5"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>The same technique works for <strong>Number</strong> too -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Number</span>(x) === x <span class=""hljs-comment"">// true, if x is a number</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Number</span>(x) === x\n    , <span class=""hljs-string"">`not a number: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif6"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And for <strong>RegExp</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">RegExp</span>(x) === x <span class=""hljs-comment"">// true, if x is a regexp</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">RegExp</span>(x) === x\n    , <span class=""hljs-string"">`not a regexp: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif7"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Same for <strong>Object</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>(x) === x <span class=""hljs-comment"">// true, if x is an object</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p>NB, regexps, arrays, and functions are considered objects too.</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Object</span>(x) === x\n    , <span class=""hljs-string"">`not an object: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    </code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif8"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>But, checking for <strong>Array</strong> is a bit different -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x) === x <span class=""hljs-comment"">// true, if x is an array</span>\n                       <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x)\n    , <span class=""hljs-string"">`not an array: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif9"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>This technique does <em>not</em> work for <strong>Functions</strong> however -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Function</span>(x) === x <span class=""hljs-comment"">// always false</span>\n</code></pre>\n<hr>\n<p>For @Faither -</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> fmt = <span class=""hljs-title class_"">JSON</span>.<span class=""hljs-property"">stringify</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test1</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number(<span class=""hljs-subst"">${fmt(a)}</span>) === <span class=""hljs-subst"">${fmt(b)}</span>`</span>, <span class=""hljs-title class_"">Number</span>(a) === b) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test2</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(a)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(a)) <span class=""hljs-comment"">// false</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(b)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(b)) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test3</span>(<span class=""hljs-params""></span>) {\n  name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// global name will always be a string</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// ""1""</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test4</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// local name </span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// 1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// false</span>\n}\n\n<span class=""hljs-title function_"">test1</span>(); <span class=""hljs-title function_"">test2</span>(); <span class=""hljs-title function_"">test3</span>(); <span class=""hljs-title function_"">test4</span>()</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif10"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2020-01-03 12:53:53Z, License: CC BY-SA 4.0","('15',)","('120766208',)","This technique seems ""non obvious"" to me. Clever techniques that ""work"", but don't clearly express the intent, I find distasteful.","('\n                \n                <span class=""comment-copy"">This technique seems ""non obvious"" to me. Clever techniques that ""work"", but don\'t clearly express the intent, I find distasteful.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/199364/toolmakersteve"" title=""16,317 reputation"" class=""comment-user"">ToolmakerSteve</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment120766208_57443488"" aria-label=""Link to comment""><span title=""2021-07-10 22:27:47Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 10, 2021 at 22:27</span></a></span>\n            ',)","Jul 10, 2021 at 22:27","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
148,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,57443488.0,"I find this simple technique useful to type-check for String -
String(x) === x // true, if x is a string
                // false in every other case
const test = x =>
  console.assert
    ( String(x) === x
    , `not a string: ${x}`
    )

test(""some string"")
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
The same technique works for Number too -
Number(x) === x // true, if x is a number
                // false in every other case
const test = x =>
  console.assert
    ( Number(x) === x
    , `not a number: ${x}`
    )

test(""some string"") // assertion failed
test(123)           
test(0)             
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
And for RegExp -
RegExp(x) === x // true, if x is a regexp
                // false in every other case
const test = x =>
  console.assert
    ( RegExp(x) === x
    , `not a regexp: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
Same for Object -
Object(x) === x // true, if x is an object
                // false in every other case
NB, regexps, arrays, and functions are considered objects too.
const test = x =>
  console.assert
    ( Object(x) === x
    , `not an object: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      
test({ a: 1 })      
test(x => x + 1)    
Run code snippetExpand snippet
But, checking for Array is a bit different -
Array.isArray(x) === x // true, if x is an array
                       // false in every other case
const test = x =>
  console.assert
    ( Array.isArray(x)
    , `not an array: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
This technique does not work for Functions however -
Function(x) === x // always false
For @Faither -
const fmt = JSON.stringify

function test1() {
  const a = ""1""
  const b = 1
  console.log(`Number(${fmt(a)}) === ${fmt(b)}`, Number(a) === b) // true
}

function test2() {
  const a = ""1""
  const b = 1
  console.log(`Number.isInteger(${fmt(a)})`, Number.isInteger(a)) // false
  console.log(`Number.isInteger(${fmt(b)})`, Number.isInteger(b)) // true
}

function test3() {
  name = 1 // global name will always be a string
  console.log(fmt(name)) // ""1""
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // true
}

function test4() {
  const name = 1 // local name 
  console.log(fmt(name)) // 1
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // false
}

test1(); test2(); test3(); test4()
Run code snippetExpand snippet","('\n<p>I find this simple technique useful to type-check for <strong>String</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">String</span>(x) === x <span class=""hljs-comment"">// true, if x is a string</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">String</span>(x) === x\n    , <span class=""hljs-string"">`not a string: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>)\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif5"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>The same technique works for <strong>Number</strong> too -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Number</span>(x) === x <span class=""hljs-comment"">// true, if x is a number</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Number</span>(x) === x\n    , <span class=""hljs-string"">`not a number: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif6"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And for <strong>RegExp</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">RegExp</span>(x) === x <span class=""hljs-comment"">// true, if x is a regexp</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">RegExp</span>(x) === x\n    , <span class=""hljs-string"">`not a regexp: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif7"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Same for <strong>Object</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>(x) === x <span class=""hljs-comment"">// true, if x is an object</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p>NB, regexps, arrays, and functions are considered objects too.</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Object</span>(x) === x\n    , <span class=""hljs-string"">`not an object: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    </code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif8"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>But, checking for <strong>Array</strong> is a bit different -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x) === x <span class=""hljs-comment"">// true, if x is an array</span>\n                       <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x)\n    , <span class=""hljs-string"">`not an array: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif9"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>This technique does <em>not</em> work for <strong>Functions</strong> however -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Function</span>(x) === x <span class=""hljs-comment"">// always false</span>\n</code></pre>\n<hr>\n<p>For @Faither -</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> fmt = <span class=""hljs-title class_"">JSON</span>.<span class=""hljs-property"">stringify</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test1</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number(<span class=""hljs-subst"">${fmt(a)}</span>) === <span class=""hljs-subst"">${fmt(b)}</span>`</span>, <span class=""hljs-title class_"">Number</span>(a) === b) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test2</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(a)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(a)) <span class=""hljs-comment"">// false</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(b)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(b)) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test3</span>(<span class=""hljs-params""></span>) {\n  name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// global name will always be a string</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// ""1""</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test4</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// local name </span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// 1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// false</span>\n}\n\n<span class=""hljs-title function_"">test1</span>(); <span class=""hljs-title function_"">test2</span>(); <span class=""hljs-title function_"">test3</span>(); <span class=""hljs-title function_"">test4</span>()</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif10"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2020-01-03 12:53:53Z, License: CC BY-SA 4.0","('15',)","('120776120',)","There is nothing clever about it. Constructors that receive an argument of the same type return the argument, unmodified. Maybe you’re simply unaware of this property? See also idempotence","('\n                \n                <span class=""comment-copy"">There is nothing clever about it. Constructors that receive an argument of the same type return the argument, unmodified. Maybe you’re simply unaware of this property? See also <a href=""https://en.m.wikipedia.org/wiki/Idempotence"" rel=""nofollow noreferrer"">idempotence</a></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/633183/mulan"" title=""127,486 reputation"" class=""comment-user"">Mulan</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment120776120_57443488"" aria-label=""Link to comment""><span title=""2021-07-11 16:05:25Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 11, 2021 at 16:05</span></a></span>\n            ',)","Jul 11, 2021 at 16:05","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
149,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,57443488.0,"I find this simple technique useful to type-check for String -
String(x) === x // true, if x is a string
                // false in every other case
const test = x =>
  console.assert
    ( String(x) === x
    , `not a string: ${x}`
    )

test(""some string"")
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
The same technique works for Number too -
Number(x) === x // true, if x is a number
                // false in every other case
const test = x =>
  console.assert
    ( Number(x) === x
    , `not a number: ${x}`
    )

test(""some string"") // assertion failed
test(123)           
test(0)             
test(/some regex/)  // assertion failed
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
And for RegExp -
RegExp(x) === x // true, if x is a regexp
                // false in every other case
const test = x =>
  console.assert
    ( RegExp(x) === x
    , `not a regexp: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      // assertion failed
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
Same for Object -
Object(x) === x // true, if x is an object
                // false in every other case
NB, regexps, arrays, and functions are considered objects too.
const test = x =>
  console.assert
    ( Object(x) === x
    , `not an object: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  
test([ 5, 6 ])      
test({ a: 1 })      
test(x => x + 1)    
Run code snippetExpand snippet
But, checking for Array is a bit different -
Array.isArray(x) === x // true, if x is an array
                       // false in every other case
const test = x =>
  console.assert
    ( Array.isArray(x)
    , `not an array: ${x}`
    )

test(""some string"") // assertion failed
test(123)           // assertion failed
test(0)             // assertion failed
test(/some regex/)  // assertion failed
test([ 5, 6 ])      
test({ a: 1 })      // assertion failed
test(x => x + 1)    // assertion failed
Run code snippetExpand snippet
This technique does not work for Functions however -
Function(x) === x // always false
For @Faither -
const fmt = JSON.stringify

function test1() {
  const a = ""1""
  const b = 1
  console.log(`Number(${fmt(a)}) === ${fmt(b)}`, Number(a) === b) // true
}

function test2() {
  const a = ""1""
  const b = 1
  console.log(`Number.isInteger(${fmt(a)})`, Number.isInteger(a)) // false
  console.log(`Number.isInteger(${fmt(b)})`, Number.isInteger(b)) // true
}

function test3() {
  name = 1 // global name will always be a string
  console.log(fmt(name)) // ""1""
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // true
}

function test4() {
  const name = 1 // local name 
  console.log(fmt(name)) // 1
  console.log(`String(${fmt(name)}) === ${fmt(name)}`, String(name) === name) // false
}

test1(); test2(); test3(); test4()
Run code snippetExpand snippet","('\n<p>I find this simple technique useful to type-check for <strong>String</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">String</span>(x) === x <span class=""hljs-comment"">// true, if x is a string</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">String</span>(x) === x\n    , <span class=""hljs-string"">`not a string: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>)\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif5"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>The same technique works for <strong>Number</strong> too -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Number</span>(x) === x <span class=""hljs-comment"">// true, if x is a number</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Number</span>(x) === x\n    , <span class=""hljs-string"">`not a number: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif6"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>And for <strong>RegExp</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">RegExp</span>(x) === x <span class=""hljs-comment"">// true, if x is a regexp</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">RegExp</span>(x) === x\n    , <span class=""hljs-string"">`not a regexp: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif7"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>Same for <strong>Object</strong> -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Object</span>(x) === x <span class=""hljs-comment"">// true, if x is an object</span>\n                <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p>NB, regexps, arrays, and functions are considered objects too.</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Object</span>(x) === x\n    , <span class=""hljs-string"">`not an object: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  \n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      \n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    </code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif8"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>But, checking for <strong>Array</strong> is a bit different -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x) === x <span class=""hljs-comment"">// true, if x is an array</span>\n                       <span class=""hljs-comment"">// false in every other case</span>\n</code></pre>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">test</span> = x =&gt;\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-property"">assert</span>\n    ( <span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">isArray</span>(x)\n    , <span class=""hljs-string"">`not an array: <span class=""hljs-subst"">${x}</span>`</span>\n    )\n\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-string"">""some string""</span>) <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">123</span>)           <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-number"">0</span>)             <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-regexp"">/some regex/</span>)  <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>([ <span class=""hljs-number"">5</span>, <span class=""hljs-number"">6</span> ])      \n<span class=""hljs-title function_"">test</span>({ <span class=""hljs-attr"">a</span>: <span class=""hljs-number"">1</span> })      <span class=""hljs-comment"">// assertion failed</span>\n<span class=""hljs-title function_"">test</span>(<span class=""hljs-function""><span class=""hljs-params"">x</span> =&gt;</span> x + <span class=""hljs-number"">1</span>)    <span class=""hljs-comment"">// assertion failed</span></code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif9"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n<p>This technique does <em>not</em> work for <strong>Functions</strong> however -</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Function</span>(x) === x <span class=""hljs-comment"">// always false</span>\n</code></pre>\n<hr>\n<p>For @Faither -</p>\n<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\n<div class=""snippet-code"">\n<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> fmt = <span class=""hljs-title class_"">JSON</span>.<span class=""hljs-property"">stringify</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test1</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number(<span class=""hljs-subst"">${fmt(a)}</span>) === <span class=""hljs-subst"">${fmt(b)}</span>`</span>, <span class=""hljs-title class_"">Number</span>(a) === b) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test2</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> a = <span class=""hljs-string"">""1""</span>\n  <span class=""hljs-keyword"">const</span> b = <span class=""hljs-number"">1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(a)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(a)) <span class=""hljs-comment"">// false</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`Number.isInteger(<span class=""hljs-subst"">${fmt(b)}</span>)`</span>, <span class=""hljs-title class_"">Number</span>.<span class=""hljs-title function_"">isInteger</span>(b)) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test3</span>(<span class=""hljs-params""></span>) {\n  name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// global name will always be a string</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// ""1""</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// true</span>\n}\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">test4</span>(<span class=""hljs-params""></span>) {\n  <span class=""hljs-keyword"">const</span> name = <span class=""hljs-number"">1</span> <span class=""hljs-comment"">// local name </span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">fmt</span>(name)) <span class=""hljs-comment"">// 1</span>\n  <span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-string"">`String(<span class=""hljs-subst"">${fmt(name)}</span>) === <span class=""hljs-subst"">${fmt(name)}</span>`</span>, <span class=""hljs-title class_"">String</span>(name) === name) <span class=""hljs-comment"">// false</span>\n}\n\n<span class=""hljs-title function_"">test1</span>(); <span class=""hljs-title function_"">test2</span>(); <span class=""hljs-title function_"">test3</span>(); <span class=""hljs-title function_"">test4</span>()</code></pre>\n<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif10"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>\n</div>\n<p></p>\n    ',)","2020-01-03 12:53:53Z, License: CC BY-SA 4.0","('15',)","('123968292',)","@unsynchronized It's not obvious that new String(x) should count as a string, though. It's a wrapper object, with different behaviour to a normal string. Unless you for some weird reason have specific requirements about how you want your check to handle string wrapper objects (which you probably don't, because there's no reason to ever use them in the first place), it's not really a strike against this answer.","('\n                \n                <span class=""comment-copy"">@unsynchronized It\'s not obvious that <code>new String(x)</code> <i>should</i> count as a string, though. It\'s a wrapper object, with different behaviour to a normal string. Unless you for some weird reason have specific requirements about how you want your check to handle string wrapper objects (which you probably don\'t, because there\'s no reason to ever use them in the first place), it\'s not really a strike against this answer.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1709587/mark-amery"" title=""139,771 reputation"" class=""comment-user"">Mark Amery</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment123968292_57443488"" aria-label=""Link to comment""><span title=""2021-11-26 19:13:45Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Nov 26, 2021 at 19:13</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Nov 26, 2021 at 19:13","('2',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
150,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,58892465.0,"if (s && typeof s.valueOf() === ""string"") {
  // s is a string
}
Works for both string literals let s = 'blah' and for Object Strings let s = new String('blah')","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (s &amp;&amp; <span class=""hljs-keyword"">typeof</span> s.<span class=""hljs-title function_"">valueOf</span>() === <span class=""hljs-string"">""string""</span>) {\n  <span class=""hljs-comment"">// s is a string</span>\n}\n</code></pre>\n\n<p>Works for both string literals <code>let s = \'blah\'</code> and for Object Strings <code>let s = new String(\'blah\')</code></p>\n    ',)","2020-03-07 13:15:27Z, License: CC BY-SA 4.0","('14',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
151,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,58892465.0,"if (s && typeof s.valueOf() === ""string"") {
  // s is a string
}
Works for both string literals let s = 'blah' and for Object Strings let s = new String('blah')","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (s &amp;&amp; <span class=""hljs-keyword"">typeof</span> s.<span class=""hljs-title function_"">valueOf</span>() === <span class=""hljs-string"">""string""</span>) {\n  <span class=""hljs-comment"">// s is a string</span>\n}\n</code></pre>\n\n<p>Works for both string literals <code>let s = \'blah\'</code> and for Object Strings <code>let s = new String(\'blah\')</code></p>\n    ',)","2020-03-07 13:15:27Z, License: CC BY-SA 4.0","('14',)","('107171375',)","Attention! This will fail on empty strings, since those are falsey.","('\n                \n                <span class=""comment-copy"">Attention! This will fail on empty strings, since those are falsey.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/339793/philipp-sumi"" title=""887 reputation"" class=""comment-user"">Philipp Sumi</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment107171375_58892465"" aria-label=""Link to comment""><span title=""2020-03-07 13:15:27Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Mar 7, 2020 at 13:15</span></a></span>\n            ',)","Mar 7, 2020 at 13:15","('10',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
152,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,32420242.0,"Taken from lodash:
function isString(val) {
   return typeof val === 'string' || ((!!val && typeof val === 'object') && Object.prototype.toString.call(val) === '[object String]');
}

console.log(isString('hello world!')); // true
console.log(isString(new String('hello world'))); // true","('\n<p>Taken from lodash:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span>(<span class=""hljs-params"">val</span>) {\n   <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">typeof</span> val === <span class=""hljs-string"">\'string\'</span> || ((!!val &amp;&amp; <span class=""hljs-keyword"">typeof</span> val === <span class=""hljs-string"">\'object\'</span>) &amp;&amp; <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(val) === <span class=""hljs-string"">\'[object String]\'</span>);\n}\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-string"">\'hello world!\'</span>)); <span class=""hljs-comment"">// true</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">\'hello world\'</span>))); <span class=""hljs-comment"">// true</span>\n</code></pre>\n    ',)","2019-10-25 16:25:25Z, License: CC BY-SA 4.0","('11',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
153,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,32420242.0,"Taken from lodash:
function isString(val) {
   return typeof val === 'string' || ((!!val && typeof val === 'object') && Object.prototype.toString.call(val) === '[object String]');
}

console.log(isString('hello world!')); // true
console.log(isString(new String('hello world'))); // true","('\n<p>Taken from lodash:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span>(<span class=""hljs-params"">val</span>) {\n   <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">typeof</span> val === <span class=""hljs-string"">\'string\'</span> || ((!!val &amp;&amp; <span class=""hljs-keyword"">typeof</span> val === <span class=""hljs-string"">\'object\'</span>) &amp;&amp; <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">call</span>(val) === <span class=""hljs-string"">\'[object String]\'</span>);\n}\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-string"">\'hello world!\'</span>)); <span class=""hljs-comment"">// true</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(<span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">\'hello world\'</span>))); <span class=""hljs-comment"">// true</span>\n</code></pre>\n    ',)","2019-10-25 16:25:25Z, License: CC BY-SA 4.0","('11',)","('103443506',)","If someone wants to know the source, it's github.com/lodash/lodash/blob/master/isString.js","('\n                \n                <span class=""comment-copy"">If someone wants to know the source, it\'s <a href=""https://github.com/lodash/lodash/blob/master/isString.js"" rel=""nofollow noreferrer"">github.com/lodash/lodash/blob/master/isString.js</a></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3665981/ricardo-canelas"" title=""2,190 reputation"" class=""comment-user"">Ricardo Canelas</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment103443506_32420242"" aria-label=""Link to comment""><span title=""2019-10-25 16:25:25Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Oct 25, 2019 at 16:25</span></a></span>\n            ',)","Oct 25, 2019 at 16:25","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
154,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,55692897.0,"You can use this function to determine the type of anything:
var type = function(obj) {
    return Object.prototype.toString.apply(obj).replace(/\[object (.+)\]/i, '$1').toLowerCase();
};
To check if a variable is a string:
type('my string') === 'string' //true
type(new String('my string')) === 'string' //true
type(`my string`) === 'string' //true
type(12345) === 'string' //false
type({}) === 'string' // false
https://codepen.io/patodiblasi/pen/NQXPwY?editors=0012
To check for other types:
type(null) //null
type(undefined) //undefined
type([]) //array
type({}) //object
type(function() {}) //function
type(123) //number
type(new Number(123)) //number
type(/some_regex/) //regexp
type(Symbol(""foo"")) //symbol","('\n<p>You can use this function to determine the type of anything:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> type = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">obj</span>) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">apply</span>(obj).<span class=""hljs-title function_"">replace</span>(<span class=""hljs-regexp"">/\\[object (.+)\\]/i</span>, <span class=""hljs-string"">\'$1\'</span>).<span class=""hljs-title function_"">toLowerCase</span>();\n};\n</code></pre>\n<p>To check if a variable is a string:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title function_"">type</span>(<span class=""hljs-string"">\'my string\'</span>) === <span class=""hljs-string"">\'string\'</span> <span class=""hljs-comment"">//true</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">\'my string\'</span>)) === <span class=""hljs-string"">\'string\'</span> <span class=""hljs-comment"">//true</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-string"">`my string`</span>) === <span class=""hljs-string"">\'string\'</span> <span class=""hljs-comment"">//true</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-number"">12345</span>) === <span class=""hljs-string"">\'string\'</span> <span class=""hljs-comment"">//false</span>\n<span class=""hljs-title function_"">type</span>({}) === <span class=""hljs-string"">\'string\'</span> <span class=""hljs-comment"">// false</span>\n</code></pre>\n<p><a href=""https://codepen.io/patodiblasi/pen/NQXPwY?editors=0012"" rel=""noreferrer"">https://codepen.io/patodiblasi/pen/NQXPwY?editors=0012</a></p>\n<p>To check for other types:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title function_"">type</span>(<span class=""hljs-literal"">null</span>) <span class=""hljs-comment"">//null</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-literal"">undefined</span>) <span class=""hljs-comment"">//undefined</span>\n<span class=""hljs-title function_"">type</span>([]) <span class=""hljs-comment"">//array</span>\n<span class=""hljs-title function_"">type</span>({}) <span class=""hljs-comment"">//object</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) {}) <span class=""hljs-comment"">//function</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-number"">123</span>) <span class=""hljs-comment"">//number</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Number</span>(<span class=""hljs-number"">123</span>)) <span class=""hljs-comment"">//number</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-regexp"">/some_regex/</span>) <span class=""hljs-comment"">//regexp</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-title class_"">Symbol</span>(<span class=""hljs-string"">""foo""</span>)) <span class=""hljs-comment"">//symbol</span>\n</code></pre>\n    ',)","2021-11-26 18:22:35Z, License: CC BY-SA 4.0","('9',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
155,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,55692897.0,"You can use this function to determine the type of anything:
var type = function(obj) {
    return Object.prototype.toString.apply(obj).replace(/\[object (.+)\]/i, '$1').toLowerCase();
};
To check if a variable is a string:
type('my string') === 'string' //true
type(new String('my string')) === 'string' //true
type(`my string`) === 'string' //true
type(12345) === 'string' //false
type({}) === 'string' // false
https://codepen.io/patodiblasi/pen/NQXPwY?editors=0012
To check for other types:
type(null) //null
type(undefined) //undefined
type([]) //array
type({}) //object
type(function() {}) //function
type(123) //number
type(new Number(123)) //number
type(/some_regex/) //regexp
type(Symbol(""foo"")) //symbol","('\n<p>You can use this function to determine the type of anything:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> type = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params"">obj</span>) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-title class_"">Object</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">toString</span>.<span class=""hljs-title function_"">apply</span>(obj).<span class=""hljs-title function_"">replace</span>(<span class=""hljs-regexp"">/\\[object (.+)\\]/i</span>, <span class=""hljs-string"">\'$1\'</span>).<span class=""hljs-title function_"">toLowerCase</span>();\n};\n</code></pre>\n<p>To check if a variable is a string:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title function_"">type</span>(<span class=""hljs-string"">\'my string\'</span>) === <span class=""hljs-string"">\'string\'</span> <span class=""hljs-comment"">//true</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">\'my string\'</span>)) === <span class=""hljs-string"">\'string\'</span> <span class=""hljs-comment"">//true</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-string"">`my string`</span>) === <span class=""hljs-string"">\'string\'</span> <span class=""hljs-comment"">//true</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-number"">12345</span>) === <span class=""hljs-string"">\'string\'</span> <span class=""hljs-comment"">//false</span>\n<span class=""hljs-title function_"">type</span>({}) === <span class=""hljs-string"">\'string\'</span> <span class=""hljs-comment"">// false</span>\n</code></pre>\n<p><a href=""https://codepen.io/patodiblasi/pen/NQXPwY?editors=0012"" rel=""noreferrer"">https://codepen.io/patodiblasi/pen/NQXPwY?editors=0012</a></p>\n<p>To check for other types:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title function_"">type</span>(<span class=""hljs-literal"">null</span>) <span class=""hljs-comment"">//null</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-literal"">undefined</span>) <span class=""hljs-comment"">//undefined</span>\n<span class=""hljs-title function_"">type</span>([]) <span class=""hljs-comment"">//array</span>\n<span class=""hljs-title function_"">type</span>({}) <span class=""hljs-comment"">//object</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) {}) <span class=""hljs-comment"">//function</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-number"">123</span>) <span class=""hljs-comment"">//number</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Number</span>(<span class=""hljs-number"">123</span>)) <span class=""hljs-comment"">//number</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-regexp"">/some_regex/</span>) <span class=""hljs-comment"">//regexp</span>\n<span class=""hljs-title function_"">type</span>(<span class=""hljs-title class_"">Symbol</span>(<span class=""hljs-string"">""foo""</span>)) <span class=""hljs-comment"">//symbol</span>\n</code></pre>\n    ',)","2021-11-26 18:22:35Z, License: CC BY-SA 4.0","('9',)","('123967573',)","This is a cute little function, although I wouldn't use it personally and would rather just do ad-hoc type checks as needed, like foo === null or typeof foo == ""string"". Downvotes might be because 1. this is maybe a bit non-idiomatic; although using Object.prototype.toString is common, I've never seen anyone pull the type out of the result like you do, only compare to exact values of possible results like ""[object String]"" 2. you don't explain what the regex does or why, and to JavaScript newbies this is likely very unclear, and 3. it's unclear why to prefer this over other answers.","('\n                \n                <span class=""comment-copy"">This is a cute little function, although I wouldn\'t use it personally and would rather just do ad-hoc type checks as needed, like <code>foo === null</code> or <code>typeof foo == ""string""</code>. Downvotes <i>might</i> be because 1. this is maybe a bit non-idiomatic; although using <code>Object.prototype.toString</code> is common, I\'ve never seen anyone pull the type out of the result like you do, only compare to exact values of possible results like <code>""[object String]""</code> 2. you don\'t explain what the regex does or why, and to JavaScript newbies this is likely very unclear, and 3. it\'s unclear why to prefer this over other answers.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1709587/mark-amery"" title=""139,771 reputation"" class=""comment-user"">Mark Amery</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment123967573_55692897"" aria-label=""Link to comment""><span title=""2021-11-26 18:22:35Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Nov 26, 2021 at 18:22</span></a></span>\n            ',)","Nov 26, 2021 at 18:22","('2',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
156,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,68451897.0,"A simple and fast way to test can be using the constructor name attribute.
let x = ""abc"";
console.log(x.constructor.name === ""String""); // true

let y = new String('abc');
console.log(y.constructor.name === ""String""); // true
Performance","('\n<p>A simple and fast way to test can be using the constructor name attribute.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> x = <span class=""hljs-string"">""abc""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(x.<span class=""hljs-property"">constructor</span>.<span class=""hljs-property"">name</span> === <span class=""hljs-string"">""String""</span>); <span class=""hljs-comment"">// true</span>\n\n<span class=""hljs-keyword"">let</span> y = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">\'abc\'</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(y.<span class=""hljs-property"">constructor</span>.<span class=""hljs-property"">name</span> === <span class=""hljs-string"">""String""</span>); <span class=""hljs-comment"">// true</span>\n</code></pre>\n<p><strong>Performance</strong></p>\n<p><a href=""https://i.stack.imgur.com/szABq.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/szABq.png"" alt=""enter image description here""></a></p>\n    ',)","2022-04-14 09:22:26Z, License: CC BY-SA 4.0","('9',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
157,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,68451897.0,"A simple and fast way to test can be using the constructor name attribute.
let x = ""abc"";
console.log(x.constructor.name === ""String""); // true

let y = new String('abc');
console.log(y.constructor.name === ""String""); // true
Performance","('\n<p>A simple and fast way to test can be using the constructor name attribute.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> x = <span class=""hljs-string"">""abc""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(x.<span class=""hljs-property"">constructor</span>.<span class=""hljs-property"">name</span> === <span class=""hljs-string"">""String""</span>); <span class=""hljs-comment"">// true</span>\n\n<span class=""hljs-keyword"">let</span> y = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">\'abc\'</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(y.<span class=""hljs-property"">constructor</span>.<span class=""hljs-property"">name</span> === <span class=""hljs-string"">""String""</span>); <span class=""hljs-comment"">// true</span>\n</code></pre>\n<p><strong>Performance</strong></p>\n<p><a href=""https://i.stack.imgur.com/szABq.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/szABq.png"" alt=""enter image description here""></a></p>\n    ',)","2022-04-14 09:22:26Z, License: CC BY-SA 4.0","('9',)","('127000650',)","your solution is the best here, and also works for other objects, as in the solution offered by @Orwellophile.","('\n                \n                <span class=""comment-copy"">your solution is the best here, and also works for other objects, as in the solution offered by @Orwellophile.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/4444742/alex"" title=""539 reputation"" class=""comment-user"">alex</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment127000650_68451897"" aria-label=""Link to comment""><span title=""2022-04-14 09:22:26Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Apr 14, 2022 at 9:22</span></a></span>\n            ',)","Apr 14, 2022 at 9:22","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
158,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,68451897.0,"A simple and fast way to test can be using the constructor name attribute.
let x = ""abc"";
console.log(x.constructor.name === ""String""); // true

let y = new String('abc');
console.log(y.constructor.name === ""String""); // true
Performance","('\n<p>A simple and fast way to test can be using the constructor name attribute.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">let</span> x = <span class=""hljs-string"">""abc""</span>;\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(x.<span class=""hljs-property"">constructor</span>.<span class=""hljs-property"">name</span> === <span class=""hljs-string"">""String""</span>); <span class=""hljs-comment"">// true</span>\n\n<span class=""hljs-keyword"">let</span> y = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">\'abc\'</span>);\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(y.<span class=""hljs-property"">constructor</span>.<span class=""hljs-property"">name</span> === <span class=""hljs-string"">""String""</span>); <span class=""hljs-comment"">// true</span>\n</code></pre>\n<p><strong>Performance</strong></p>\n<p><a href=""https://i.stack.imgur.com/szABq.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/szABq.png"" alt=""enter image description here""></a></p>\n    ',)","2022-04-14 09:22:26Z, License: CC BY-SA 4.0","('9',)","('130899600',)",Best approach. Less work than having | clauses,"('\n                \n                <span class=""comment-copy"">Best approach. Less work than having <code>|</code> clauses</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/18620006/sayandcode"" title=""1,373 reputation"" class=""comment-user"">sayandcode</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment130899600_68451897"" aria-label=""Link to comment""><span title=""2022-10-20 12:38:34Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Oct 20, 2022 at 12:38</span></a></span>\n            ',)","Oct 20, 2022 at 12:38","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
159,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,19057360.0,"I also found that this works fine too, and its a lot shorter than the other examples.
if (myVar === myVar + '') {
   //its string
} else {
   //its something else
}
By concatenating on empty quotes it turns the value into a string. If myVar is already a string then the if statement is successful.","('\n<p>I also found that this works fine too, and its a lot shorter than the other examples.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (myVar === myVar + <span class=""hljs-string"">\'\'</span>) {\n   <span class=""hljs-comment"">//its string</span>\n} <span class=""hljs-keyword"">else</span> {\n   <span class=""hljs-comment"">//its something else</span>\n}\n</code></pre>\n\n<p>By concatenating on empty quotes it turns the value into a string. If <code>myVar</code> is already a string then the if statement is successful.</p>\n    ',)","2013-09-27 18:29:21Z, License: CC BY-SA 3.0","('4',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
160,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,19057360.0,"I also found that this works fine too, and its a lot shorter than the other examples.
if (myVar === myVar + '') {
   //its string
} else {
   //its something else
}
By concatenating on empty quotes it turns the value into a string. If myVar is already a string then the if statement is successful.","('\n<p>I also found that this works fine too, and its a lot shorter than the other examples.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (myVar === myVar + <span class=""hljs-string"">\'\'</span>) {\n   <span class=""hljs-comment"">//its string</span>\n} <span class=""hljs-keyword"">else</span> {\n   <span class=""hljs-comment"">//its something else</span>\n}\n</code></pre>\n\n<p>By concatenating on empty quotes it turns the value into a string. If <code>myVar</code> is already a string then the if statement is successful.</p>\n    ',)","2013-09-27 18:29:21Z, License: CC BY-SA 3.0","('4',)","('28166580',)",The only problem being that you're coercing a variable when you want to check it's type. That seems a bit expensive to me when compared with typeof.,"('\n                \n                <span class=""comment-copy"">The only problem being that you\'re coercing a variable when you want to check it\'s type. That seems a bit expensive to me when compared with <code>typeof</code>.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/455137/olical"" title=""39,023 reputation"" class=""comment-user owner"">Olical</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment28166580_19057360"" aria-label=""Link to comment""><span title=""2013-09-27 18:29:21Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Sep 27, 2013 at 18:29</span></a></span>\n            ',)","Sep 27, 2013 at 18:29","('5',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
161,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,19057360.0,"I also found that this works fine too, and its a lot shorter than the other examples.
if (myVar === myVar + '') {
   //its string
} else {
   //its something else
}
By concatenating on empty quotes it turns the value into a string. If myVar is already a string then the if statement is successful.","('\n<p>I also found that this works fine too, and its a lot shorter than the other examples.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (myVar === myVar + <span class=""hljs-string"">\'\'</span>) {\n   <span class=""hljs-comment"">//its string</span>\n} <span class=""hljs-keyword"">else</span> {\n   <span class=""hljs-comment"">//its something else</span>\n}\n</code></pre>\n\n<p>By concatenating on empty quotes it turns the value into a string. If <code>myVar</code> is already a string then the if statement is successful.</p>\n    ',)","2013-09-27 18:29:21Z, License: CC BY-SA 3.0","('4',)","('28240348',)","So yea, you're right. jsperf said it was around 20% slow than typeof but still quite a bit faster than toString. Either way, I guess I just like the syntax for coercing.","('\n                \n                <span class=""comment-copy"">So yea, you\'re right. <a href=""http://jsperf.com/typeof-function-vs-instanceof/9"" rel=""nofollow noreferrer"">jsperf</a> said it was around 20% slow than <code>typeof</code> but still quite a bit faster than <code>toString</code>. Either way, I guess I just like the syntax for coercing.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2687479/chris-dolphin"" title=""1,560 reputation"" class=""comment-user"">Chris Dolphin</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment28240348_19057360"" aria-label=""Link to comment""><span title=""2013-09-30 18:07:06Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Sep 30, 2013 at 18:07</span></a></span>\n            ',)","Sep 30, 2013 at 18:07","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
162,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,19057360.0,"I also found that this works fine too, and its a lot shorter than the other examples.
if (myVar === myVar + '') {
   //its string
} else {
   //its something else
}
By concatenating on empty quotes it turns the value into a string. If myVar is already a string then the if statement is successful.","('\n<p>I also found that this works fine too, and its a lot shorter than the other examples.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (myVar === myVar + <span class=""hljs-string"">\'\'</span>) {\n   <span class=""hljs-comment"">//its string</span>\n} <span class=""hljs-keyword"">else</span> {\n   <span class=""hljs-comment"">//its something else</span>\n}\n</code></pre>\n\n<p>By concatenating on empty quotes it turns the value into a string. If <code>myVar</code> is already a string then the if statement is successful.</p>\n    ',)","2013-09-27 18:29:21Z, License: CC BY-SA 3.0","('4',)","('81244465',)",this does not work with the String type; var s = new String('abc'); > s === s + '' > false,"('\n                \n                <span class=""comment-copy"">this does not work with the String type; <code>var s = new String(\'abc\'); &gt; s === s + \'\' &gt; false</code></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/5672998/user5672998"" title=""1,024 reputation"" class=""comment-user"">user5672998</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment81244465_19057360"" aria-label=""Link to comment""><span title=""2017-11-06 22:46:04Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Nov 6, 2017 at 22:46</span></a></span>\n            ',)","Nov 6, 2017 at 22:46","('5',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
163,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,19057360.0,"I also found that this works fine too, and its a lot shorter than the other examples.
if (myVar === myVar + '') {
   //its string
} else {
   //its something else
}
By concatenating on empty quotes it turns the value into a string. If myVar is already a string then the if statement is successful.","('\n<p>I also found that this works fine too, and its a lot shorter than the other examples.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (myVar === myVar + <span class=""hljs-string"">\'\'</span>) {\n   <span class=""hljs-comment"">//its string</span>\n} <span class=""hljs-keyword"">else</span> {\n   <span class=""hljs-comment"">//its something else</span>\n}\n</code></pre>\n\n<p>By concatenating on empty quotes it turns the value into a string. If <code>myVar</code> is already a string then the if statement is successful.</p>\n    ',)","2013-09-27 18:29:21Z, License: CC BY-SA 3.0","('4',)","('81249210',)",Doesn't work with new String cus that creates a type of object. w3schools.com/js/tryit.asp?filename=tryjs_string_object2,"('\n                \n                <span class=""comment-copy"">Doesn\'t work with <code>new String</code> cus that creates a type of <code>object</code>. <a href=""https://www.w3schools.com/js/tryit.asp?filename=tryjs_string_object2"" rel=""nofollow noreferrer"">w3schools.com/js/tryit.asp?filename=tryjs_string_object2</a></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2687479/chris-dolphin"" title=""1,560 reputation"" class=""comment-user"">Chris Dolphin</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment81249210_19057360"" aria-label=""Link to comment""><span title=""2017-11-07 03:55:00Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Nov 7, 2017 at 3:55</span></a></span>\n            ',)","Nov 7, 2017 at 3:55","('1',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
164,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,19057360.0,"I also found that this works fine too, and its a lot shorter than the other examples.
if (myVar === myVar + '') {
   //its string
} else {
   //its something else
}
By concatenating on empty quotes it turns the value into a string. If myVar is already a string then the if statement is successful.","('\n<p>I also found that this works fine too, and its a lot shorter than the other examples.</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">if</span> (myVar === myVar + <span class=""hljs-string"">\'\'</span>) {\n   <span class=""hljs-comment"">//its string</span>\n} <span class=""hljs-keyword"">else</span> {\n   <span class=""hljs-comment"">//its something else</span>\n}\n</code></pre>\n\n<p>By concatenating on empty quotes it turns the value into a string. If <code>myVar</code> is already a string then the if statement is successful.</p>\n    ',)","2013-09-27 18:29:21Z, License: CC BY-SA 3.0","('4',)","('120766170',)",I find this approach distasteful. Writing good code isn't about making it shorter. Its about saying what you mean.,"('\n                \n                <span class=""comment-copy"">I find this approach distasteful. Writing good code isn\'t about making it <i>shorter</i>. Its about <i>saying what you mean</i>.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/199364/toolmakersteve"" title=""16,317 reputation"" class=""comment-user"">ToolmakerSteve</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment120766170_19057360"" aria-label=""Link to comment""><span title=""2021-07-10 22:23:22Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 10, 2021 at 22:23</span></a></span>\n            ',)","Jul 10, 2021 at 22:23","('2',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
165,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,34408711.0,"var a = new String('')
var b = ''
var c = []

function isString(x) {
  return x !== null && x !== undefined && x.constructor === String
}

console.log(isString(a))
console.log(isString(b))
console.log(isString(c))","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> a = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">\'\'</span>)\n<span class=""hljs-keyword"">var</span> b = <span class=""hljs-string"">\'\'</span>\n<span class=""hljs-keyword"">var</span> c = []\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x !== <span class=""hljs-literal"">null</span> &amp;&amp; x !== <span class=""hljs-literal"">undefined</span> &amp;&amp; x.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>\n}\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(a))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(b))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(c))\n</code></pre>\n    ',)","2018-01-30 02:20:18Z, License: CC BY-SA 3.0","('4',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
166,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,34408711.0,"var a = new String('')
var b = ''
var c = []

function isString(x) {
  return x !== null && x !== undefined && x.constructor === String
}

console.log(isString(a))
console.log(isString(b))
console.log(isString(c))","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> a = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">\'\'</span>)\n<span class=""hljs-keyword"">var</span> b = <span class=""hljs-string"">\'\'</span>\n<span class=""hljs-keyword"">var</span> c = []\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x !== <span class=""hljs-literal"">null</span> &amp;&amp; x !== <span class=""hljs-literal"">undefined</span> &amp;&amp; x.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>\n}\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(a))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(b))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(c))\n</code></pre>\n    ',)","2018-01-30 02:20:18Z, License: CC BY-SA 3.0","('4',)","('84020629',)",Why do you need to check for null or undefined if x.constructor === String would also return false for null or undefined?,"('\n                \n                <span class=""comment-copy"">Why do you need to check for null or undefined if x.constructor === String would also return false for null or undefined?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/5217735/jules-manson"" title=""214 reputation"" class=""comment-user"">Jules Manson</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment84020629_34408711"" aria-label=""Link to comment""><span title=""2018-01-30 02:20:18Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jan 30, 2018 at 2:20</span></a></span>\n            ',)","Jan 30, 2018 at 2:20","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
167,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,34408711.0,"var a = new String('')
var b = ''
var c = []

function isString(x) {
  return x !== null && x !== undefined && x.constructor === String
}

console.log(isString(a))
console.log(isString(b))
console.log(isString(c))","('\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> a = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">String</span>(<span class=""hljs-string"">\'\'</span>)\n<span class=""hljs-keyword"">var</span> b = <span class=""hljs-string"">\'\'</span>\n<span class=""hljs-keyword"">var</span> c = []\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">isString</span>(<span class=""hljs-params"">x</span>) {\n  <span class=""hljs-keyword"">return</span> x !== <span class=""hljs-literal"">null</span> &amp;&amp; x !== <span class=""hljs-literal"">undefined</span> &amp;&amp; x.<span class=""hljs-property"">constructor</span> === <span class=""hljs-title class_"">String</span>\n}\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(a))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(b))\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">isString</span>(c))\n</code></pre>\n    ',)","2018-01-30 02:20:18Z, License: CC BY-SA 3.0","('4',)","('91850857',)","@JulesManson: It would throw an error, not produce false.","('\n                \n                <span class=""comment-copy"">@JulesManson: It would throw an error, not produce <code>false</code>.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/707111/ry"" title=""216,098 reputation"" class=""comment-user"">Ry-</a>\n<span class=""mod-flair "" title=""Moderator"">♦</span>                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment91850857_34408711"" aria-label=""Link to comment""><span title=""2018-09-22 06:13:13Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Sep 22, 2018 at 6:13</span></a></span>\n            ',)","Sep 22, 2018 at 6:13","('2',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
168,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,51414397.0,"The following method will check if any variable is a string (including variables that do not exist).
const is_string = value => {
  try {
    return typeof value() === 'string';
  } catch (error) {
    return false;
  }
};

let example = 'Hello, world!';

console.log(is_string(() => example)); // true
console.log(is_string(() => variable_doesnt_exist)); // false","('\n<p>The following method will check if any variable is a string (<strong>including variables that do not exist</strong>).</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">is_string</span> = value =&gt; {\n  <span class=""hljs-keyword"">try</span> {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">typeof</span> <span class=""hljs-title function_"">value</span>() === <span class=""hljs-string"">\'string\'</span>;\n  } <span class=""hljs-keyword"">catch</span> (error) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  }\n};\n\n<span class=""hljs-keyword"">let</span> example = <span class=""hljs-string"">\'Hello, world!\'</span>;\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">is_string</span>(<span class=""hljs-function"">() =&gt;</span> example)); <span class=""hljs-comment"">// true</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">is_string</span>(<span class=""hljs-function"">() =&gt;</span> variable_doesnt_exist)); <span class=""hljs-comment"">// false</span>\n</code></pre>\n    ',)","2021-11-26 19:06:05Z, License: CC BY-SA 4.0","('4',)",,,,,,answer,4059147,Check if a variable is a string in JavaScript,65,63,81
169,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,51414397.0,"The following method will check if any variable is a string (including variables that do not exist).
const is_string = value => {
  try {
    return typeof value() === 'string';
  } catch (error) {
    return false;
  }
};

let example = 'Hello, world!';

console.log(is_string(() => example)); // true
console.log(is_string(() => variable_doesnt_exist)); // false","('\n<p>The following method will check if any variable is a string (<strong>including variables that do not exist</strong>).</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">is_string</span> = value =&gt; {\n  <span class=""hljs-keyword"">try</span> {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">typeof</span> <span class=""hljs-title function_"">value</span>() === <span class=""hljs-string"">\'string\'</span>;\n  } <span class=""hljs-keyword"">catch</span> (error) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  }\n};\n\n<span class=""hljs-keyword"">let</span> example = <span class=""hljs-string"">\'Hello, world!\'</span>;\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">is_string</span>(<span class=""hljs-function"">() =&gt;</span> example)); <span class=""hljs-comment"">// true</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">is_string</span>(<span class=""hljs-function"">() =&gt;</span> variable_doesnt_exist)); <span class=""hljs-comment"">// false</span>\n</code></pre>\n    ',)","2021-11-26 19:06:05Z, License: CC BY-SA 4.0","('4',)","('123968187',)","-1; the interface here is just weird. From the name I expect is_string(x) to tell me whether x is a string, but instead it tells me whether x is a callable that returns a string. Why would I want to pass in a function instead of passing my value directly?","('\n                \n                <span class=""comment-copy"">-1; the interface here is just weird. From the name I expect <code>is_string(x)</code> to tell me whether <code>x</code> is a string, but instead it tells me whether <code>x</code> is a callable that <i>returns</i> a string. Why would I want to pass in a function instead of passing my value directly?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1709587/mark-amery"" title=""139,771 reputation"" class=""comment-user"">Mark Amery</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment123968187_51414397"" aria-label=""Link to comment""><span title=""2021-11-26 19:06:05Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Nov 26, 2021 at 19:06</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Nov 26, 2021 at 19:06","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
170,4059147,https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript,Check if a variable is a string in JavaScript,"
                
<p>How can I determine whether a variable is a string or something else in JavaScript?</p>
    ","('2010-10-30 14:36:34Z',)","('2639',)",,,,,,51414397.0,"The following method will check if any variable is a string (including variables that do not exist).
const is_string = value => {
  try {
    return typeof value() === 'string';
  } catch (error) {
    return false;
  }
};

let example = 'Hello, world!';

console.log(is_string(() => example)); // true
console.log(is_string(() => variable_doesnt_exist)); // false","('\n<p>The following method will check if any variable is a string (<strong>including variables that do not exist</strong>).</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> <span class=""hljs-title function_"">is_string</span> = value =&gt; {\n  <span class=""hljs-keyword"">try</span> {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-keyword"">typeof</span> <span class=""hljs-title function_"">value</span>() === <span class=""hljs-string"">\'string\'</span>;\n  } <span class=""hljs-keyword"">catch</span> (error) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-literal"">false</span>;\n  }\n};\n\n<span class=""hljs-keyword"">let</span> example = <span class=""hljs-string"">\'Hello, world!\'</span>;\n\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">is_string</span>(<span class=""hljs-function"">() =&gt;</span> example)); <span class=""hljs-comment"">// true</span>\n<span class=""hljs-variable language_"">console</span>.<span class=""hljs-title function_"">log</span>(<span class=""hljs-title function_"">is_string</span>(<span class=""hljs-function"">() =&gt;</span> variable_doesnt_exist)); <span class=""hljs-comment"">// false</span>\n</code></pre>\n    ',)","2021-11-26 19:06:05Z, License: CC BY-SA 4.0","('4',)","('123972773',)","@MarkAmery This is_string function is for the purposes of checking if a variable exists and is a string. The arrow function being passed allows one to pass a variable that does not exist, whereas, normally, we would receive the error: ""Uncaught ReferenceError: variable is not defined"" if the variable didn't exist. The use case is similar to the Error Control Operator in PHP (i.e., is_string(@$example)). It may not the best or most common practice, but someone may find it useful, and that's what makes this answer unique from the others.","('\n                \n                <span class=""comment-copy"">@MarkAmery This <code>is_string</code> function is for the purposes of checking if a variable exists and is a string. The arrow function being passed allows one to pass a variable that does not exist, whereas, normally, we would receive the error: ""Uncaught ReferenceError: variable is not defined"" if the variable didn\'t exist. The use case is similar to the Error Control Operator in PHP (i.e., <code>is_string(@$example)</code>). It may not the best or most common practice, but someone may find it useful, and that\'s what makes this answer unique from the others.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/4283581/grant-miller"" title=""26,949 reputation"" class=""comment-user"">Grant Miller</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment123972773_51414397"" aria-label=""Link to comment""><span title=""2021-11-27 02:35:41Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Nov 27, 2021 at 2:35</span></a></span>\n            ',)","Nov 27, 2021 at 2:35","('',)",answer_comment,4059147,Check if a variable is a string in JavaScript,65,63,81
171,75571616,https://stackoverflow.com/questions/75571616/quiz-in-javascript,Quiz in Javascript,"
                
<p>I'm quite new to programming and I have to recreate a quiz. Though something is not working properly, the biggest issue is: when selecting an answer I should get the message about whether the answer is correct or wrong(answers should be hidden, and the next button displayed) and after clicking the next button, answers get displayed again and the button hidden.</p>
<p>Here is my code:</p>
<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">const</span> questions = [
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Here's an easy one. Can you recognise this premium SUV?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/jaguar.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Jaguar E-Pace""</span>, <span class=""hljs-string"">""Porsche Cayenne""</span>, <span class=""hljs-string"">""Mercedex GLA""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Jaguar E-Pace""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Do you think you can recognise what BMW series this is?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/bmw8.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""BMW 6 Series""</span>, <span class=""hljs-string"">""BMW 3 Series""</span>, <span class=""hljs-string"">""BMW 8 Series""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""BMW 8 Series""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Time for another SUV...""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/duster.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Dacia Duster""</span>, <span class=""hljs-string"">""MINI Countryman""</span>, <span class=""hljs-string"">""Jeep Renegade""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Dacia Duster""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Do you recognise this new saloon?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/genesis.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""MG HS""</span>, <span class=""hljs-string"">""Genesis G80""</span>, <span class=""hljs-string"">""Audi A7""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Genesis G80""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Can you recognise this family SUV?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/outlander.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Hyundai Santa Fe""</span>, <span class=""hljs-string"">""Kia Sorento""</span>, <span class=""hljs-string"">""Mitsubishi Outlander PHEV""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Mitsubishi Outlander PHEV""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Now for a compact SUV...""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/ford.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Ford Puma""</span>, <span class=""hljs-string"">""Porsche Macan""</span>, <span class=""hljs-string"">""Nissan Juke""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Ford Puma""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Can you guess what German hatchback this is?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/audi3.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Mercedes A Class""</span>, <span class=""hljs-string"">""Audi A3 Sportback""</span>, <span class=""hljs-string"">""Bmw 1 Series""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Audi A3 Sportback""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Hmmm, how about this one... ""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/renault.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Renault Zoe""</span>, <span class=""hljs-string"">""DS 3""</span>, <span class=""hljs-string"">""Nissan Micra""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Renault Zoe""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Which Hyundai is this?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/hyundaikona.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Hyundai i10""</span>, <span class=""hljs-string"">""Hyundai Ioniq""</span>, <span class=""hljs-string"">""Hyundai Kona""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Hyundai Kona""</span>
    }, 
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""What hatchback is this?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/mazda2.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Ford Focus""</span>, <span class=""hljs-string"">""Mazda 2""</span>, <span class=""hljs-string"">""Nissan Micra""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Mazda 2""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Can you recognise this premium saloon?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/jaguarxe.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Jaguar XE""</span>, <span class=""hljs-string"">""BMW 3 Series""</span>, <span class=""hljs-string"">""Mercedes E Class""</span>]
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""What SUV is this?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/jeep.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Landrover Discovery""</span>, <span class=""hljs-string"">""Jeep Compass""</span>, <span class=""hljs-string"">""Kia Sorento""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Jeep Compass""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""What Ford model is this?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/fiesta.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Puma""</span>, <span class=""hljs-string"">""Kuga""</span>, <span class=""hljs-string"">""Fiesta ST""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Fiesta ST""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Do you recognise this Maserati?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/maserati.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Ghibli""</span>, <span class=""hljs-string"">""Levante""</span>, <span class=""hljs-string"">""Quattroporte""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Ghibli""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Can you guess what Landrover this is?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/rangerover.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Range Rover""</span>, <span class=""hljs-string"">""Evoque""</span>, <span class=""hljs-string"">""Defender""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Range Rover""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""What new Hybrid super mini this is?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/fiat.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""MINI Hatchback""</span>, <span class=""hljs-string"">""Fiat 500""</span>, <span class=""hljs-string"">""Renault Twingo""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Fiat 500""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""How about this Skoda model?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/skoda.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Octavia""</span>, <span class=""hljs-string"">""Kamiq""</span>, <span class=""hljs-string"">""Superb""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Octavia""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Can you recognise this Volvo?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/volvo.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""XC40""</span>, <span class=""hljs-string"">""XC90""</span>, <span class=""hljs-string"">""XC60""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""XC 40""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""Which Volkswagen model is this?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/golf.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Arteon""</span>, <span class=""hljs-string"">""Golf""</span>, <span class=""hljs-string"">""T-Roc""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Golf""</span>
    },
    {
        <span class=""hljs-attr"">question</span>: <span class=""hljs-string"">""What is this hatchback?""</span>,
        <span class=""hljs-attr"">image</span>: <span class=""hljs-string"">""images/corsa.jpg""</span>,
        <span class=""hljs-attr"">answers</span>: [<span class=""hljs-string"">""Vauxhall Corsa""</span>, <span class=""hljs-string"">""Vauxhall Astra""</span>, <span class=""hljs-string"">""Vauxhall Adam""</span>],
        <span class=""hljs-attr"">correct</span>: <span class=""hljs-string"">""Vauxhall Corsa""</span>
    }
]

<span class=""hljs-keyword"">const</span> startButton = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">'start-btn'</span>)
<span class=""hljs-keyword"">const</span> nextButton = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">'next-btn'</span>)
<span class=""hljs-keyword"">const</span> questionEl = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">'question'</span>)
<span class=""hljs-keyword"">const</span> answers = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">'answers'</span>)
<span class=""hljs-keyword"">const</span> message = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">'message'</span>)
<span class=""hljs-keyword"">const</span> image = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">'image'</span>)
<span class=""hljs-comment"">//const text = document.getElementById('text')</span>

<span class=""hljs-keyword"">let</span> questionNr = <span class=""hljs-number"">0</span>

startButton.<span class=""hljs-title function_"">addEventListener</span>(<span class=""hljs-string"">""click""</span>, startGame)
nextButton.<span class=""hljs-title function_"">addEventListener</span>(<span class=""hljs-string"">""click""</span>, <span class=""hljs-function"">() =&gt;</span> {
    questionNr++
    <span class=""hljs-title function_"">setNextQuestion</span>()
})

<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">startGame</span>(<span class=""hljs-params""></span>) {
    startButton.<span class=""hljs-property"">classList</span>.<span class=""hljs-title function_"">add</span>(<span class=""hljs-string"">'hide'</span>)
    question.<span class=""hljs-property"">classList</span>.<span class=""hljs-title function_"">remove</span>(<span class=""hljs-string"">'hide'</span>)
    <span class=""hljs-title function_"">setNextQuestion</span>()
}

<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">setNextQuestion</span>(<span class=""hljs-params""></span>) {
    <span class=""hljs-title function_"">resetState</span>()
    <span class=""hljs-title function_"">showQuestion</span>(questions[questionNr])

}

<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">showQuestion</span>(<span class=""hljs-params"">question</span>) {
    questionEl.<span class=""hljs-property"">innerHTML</span> = question.<span class=""hljs-property"">question</span>
    <span class=""hljs-comment"">//answers.innerHTML = questions[questionNr].answers</span>
    image.<span class=""hljs-property"">src</span> = questions[questionNr].<span class=""hljs-property"">image</span>
    answers.<span class=""hljs-property"">innerHTML</span> = <span class=""hljs-string"">''</span>
    questions[questionNr].<span class=""hljs-property"">answers</span>.<span class=""hljs-title function_"">forEach</span>(<span class=""hljs-function""><span class=""hljs-params"">answer</span> =&gt;</span> {
        answers.<span class=""hljs-property"">innerHTML</span> += <span class=""hljs-string"">`&lt;button class=""btn""&gt;<span class=""hljs-subst"">${answer}</span>&lt;/button&gt;`</span>
    })
        <span class=""hljs-comment"">// question.answers.forEach(answer =&gt; {</span>
        <span class=""hljs-comment"">// const button = document.createElement('button')</span>
        <span class=""hljs-comment"">// button.innerText = `${answer}`</span>
        <span class=""hljs-comment"">// button.classList.add('btn')</span>
        <span class=""hljs-comment"">// if (answer.correct) {</span>
        <span class=""hljs-comment"">//     button.dataset.correct = answer.correct</span>
        <span class=""hljs-comment"">// }</span>
        <span class=""hljs-comment"">// button.addEventListener(""click"", selectAnswer)</span>
        <span class=""hljs-comment"">// answers.appendChild(button)</span>

        <span class=""hljs-keyword"">const</span> answerBtns = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementsByClassName</span>(<span class=""hljs-string"">'btn'</span>)
    <span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">from</span>(answerBtns).<span class=""hljs-title function_"">forEach</span>(<span class=""hljs-function""><span class=""hljs-params"">btn</span> =&gt;</span> {
        btn.<span class=""hljs-title function_"">addEventListener</span>(<span class=""hljs-string"">'click'</span>, <span class=""hljs-function"">() =&gt;</span> {
            <span class=""hljs-keyword"">if</span> (btn.<span class=""hljs-property"">textContent</span> === questions[questionNr].<span class=""hljs-property"">correct</span>) {

                message.<span class=""hljs-property"">style</span>.<span class=""hljs-property"">display</span> = <span class=""hljs-string"">'flex'</span>
                correct.<span class=""hljs-property"">style</span>.<span class=""hljs-property"">display</span> = <span class=""hljs-string"">'flex'</span>
                <span class=""hljs-keyword"">const</span> stats = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">'stats'</span>)
                stats.<span class=""hljs-property"">innerHTML</span> = <span class=""hljs-string"">`<span class=""hljs-subst"">${questionNr + <span class=""hljs-number"">1</span>}</span>/<span class=""hljs-subst"">${questions.length}</span>`</span>
            } <span class=""hljs-keyword"">else</span> {
                message.<span class=""hljs-property"">style</span>.<span class=""hljs-property"">display</span> = <span class=""hljs-string"">'flex'</span>
                wrong.<span class=""hljs-property"">style</span>.<span class=""hljs-property"">display</span> = <span class=""hljs-string"">'flex'</span>
                stats.<span class=""hljs-property"">innerHTML</span> = <span class=""hljs-string"">`<span class=""hljs-subst"">${questionNr + <span class=""hljs-number"">1</span>}</span>/<span class=""hljs-subst"">${questions.length}</span>`</span>
            }
            nextButton.<span class=""hljs-property"">classList</span>.<span class=""hljs-title function_"">remove</span>(<span class=""hljs-string"">'hide'</span>)
           <span class=""hljs-comment"">// answers.style.display = ""none""</span>

    });
})
}

<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">resetState</span>(<span class=""hljs-params""></span>) {
    nextButton.<span class=""hljs-property"">classList</span>.<span class=""hljs-title function_"">add</span>(<span class=""hljs-string"">'hide'</span>)
    <span class=""hljs-keyword"">while</span> (answers.<span class=""hljs-property"">firstChild</span>) {
        answers.<span class=""hljs-property"">removeChild</span>
        (answers.<span class=""hljs-property"">firstChild</span>)
    }
}

<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">selectAnswer</span>(<span class=""hljs-params"">e</span>) {
    <span class=""hljs-keyword"">const</span> selectedButton = e.<span class=""hljs-property"">target</span>
    <span class=""hljs-keyword"">const</span> correct = selectedButton.<span class=""hljs-property"">dataset</span>.<span class=""hljs-property"">correct</span>
    <span class=""hljs-title function_"">setStatusClass</span>(<span class=""hljs-variable language_"">document</span>.<span class=""hljs-property"">body</span>, correct)
    <span class=""hljs-title class_"">Array</span>.<span class=""hljs-title function_"">from</span>(answers.<span class=""hljs-property"">children</span>).<span class=""hljs-title function_"">forEach</span>(<span class=""hljs-function""><span class=""hljs-params"">button</span> =&gt;</span> {
        <span class=""hljs-title function_"">setStatusClass</span>(button, button.<span class=""hljs-property"">dataset</span>.<span class=""hljs-property"">correct</span>)
    })
    <span class=""hljs-keyword"">if</span> (questions.<span class=""hljs-property"">length</span> &gt; questionNr + <span class=""hljs-number"">1</span>) {
        nextButton.<span class=""hljs-property"">classList</span>.<span class=""hljs-title function_"">remove</span>(<span class=""hljs-string"">'hide'</span>)
    } <span class=""hljs-keyword"">else</span> {
        startButton.<span class=""hljs-property"">innerHTML</span> = <span class=""hljs-string"">""Restart Quiz""</span>
        startButton.<span class=""hljs-property"">classList</span>.<span class=""hljs-title function_"">remove</span>(<span class=""hljs-string"">'hide'</span>)
    }
}

<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">setStatusClass</span>(<span class=""hljs-params"">element, correct</span>) {
    <span class=""hljs-title function_"">clearStatusClass</span>(element)
    <span class=""hljs-keyword"">if</span> (correct) {
        element.<span class=""hljs-property"">classList</span>.<span class=""hljs-title function_"">add</span>(<span class=""hljs-string"">'correct'</span>)
    } <span class=""hljs-keyword"">else</span> {
        element.<span class=""hljs-property"">classList</span>.<span class=""hljs-title function_"">add</span>(<span class=""hljs-string"">'wrong'</span>)
    }
}

<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">clearStatusClass</span>(<span class=""hljs-params"">element</span>) {
    element.<span class=""hljs-property"">classList</span>.<span class=""hljs-title function_"">remove</span>(<span class=""hljs-string"">'correct'</span>)
    element.<span class=""hljs-property"">classList</span>.<span class=""hljs-title function_"">remove</span>(<span class=""hljs-string"">'wrong'</span>)
}</code></pre>
<pre class=""snippet-code-css lang-css s-code-block""><code class=""hljs language-css"">*{
    <span class=""hljs-attribute"">padding</span>: <span class=""hljs-number"">0</span>;
    <span class=""hljs-attribute"">margin</span>: <span class=""hljs-number"">0</span>;
    <span class=""hljs-attribute"">box-sizing</span>: border-box;
}

<span class=""hljs-selector-id"">#container</span> {
    <span class=""hljs-attribute"">width</span>: <span class=""hljs-number"">100vw</span>;
    <span class=""hljs-attribute"">height</span>: <span class=""hljs-number"">100vh</span>;
    <span class=""hljs-attribute"">background-color</span>: <span class=""hljs-number"">#081536</span>;
    <span class=""hljs-attribute"">display</span>: flex;
    <span class=""hljs-attribute"">justify-content</span>: center;
    <span class=""hljs-attribute"">align-items</span>: center;
}

<span class=""hljs-selector-id"">#content</span> {
    <span class=""hljs-attribute"">width</span>: <span class=""hljs-number"">700px</span>;
    <span class=""hljs-attribute"">min-height</span>: <span class=""hljs-number"">400px</span>;
    <span class=""hljs-attribute"">display</span>: flex;
    <span class=""hljs-attribute"">align-items</span>: center;
    <span class=""hljs-attribute"">justify-content</span>: center;
    <span class=""hljs-attribute"">gap</span>: <span class=""hljs-number"">20px</span>;
}

<span class=""hljs-selector-id"">#correct</span> {
    <span class=""hljs-attribute"">position</span>: absolute;
    <span class=""hljs-attribute"">display</span>: flex;
    <span class=""hljs-attribute"">flex-direction</span>: column;
    <span class=""hljs-attribute"">justify-content</span>: center;
    <span class=""hljs-attribute"">align-items</span>: center;
    <span class=""hljs-attribute"">gap</span>: <span class=""hljs-number"">20px</span>;
}

<span class=""hljs-selector-id"">#correct</span> <span class=""hljs-selector-tag"">h1</span>, <span class=""hljs-selector-tag"">p</span> {
    <span class=""hljs-attribute"">color</span>: white;
}

<span class=""hljs-selector-id"">#wrong</span> {
    <span class=""hljs-attribute"">position</span>: absolute;
    <span class=""hljs-attribute"">display</span>: flex;
    <span class=""hljs-attribute"">flex-direction</span>: column;
    <span class=""hljs-attribute"">justify-content</span>: center;
    <span class=""hljs-attribute"">align-items</span>: center;
    <span class=""hljs-attribute"">gap</span>: <span class=""hljs-number"">20px</span>;
}

<span class=""hljs-selector-id"">#wrong</span> <span class=""hljs-selector-tag"">h1</span>, <span class=""hljs-selector-tag"">p</span> {
    <span class=""hljs-attribute"">color</span>: white;
}

<span class=""hljs-selector-id"">#content</span> <span class=""hljs-selector-tag"">img</span> {
    <span class=""hljs-attribute"">width</span>: <span class=""hljs-number"">400px</span>;
    <span class=""hljs-attribute"">height</span>: <span class=""hljs-number"">250px</span>;
    <span class=""hljs-attribute"">object-fit</span>: cover;
}

<span class=""hljs-selector-class"">.text</span> {
    <span class=""hljs-attribute"">color</span>: white;
    <span class=""hljs-attribute"">display</span>: flex;
    <span class=""hljs-attribute"">justify-content</span>: center;
    <span class=""hljs-attribute"">align-items</span>: center;
    <span class=""hljs-attribute"">flex-direction</span>: column;
}

<span class=""hljs-selector-id"">#next</span>, <span class=""hljs-selector-id"">#next-wr</span> {
    <span class=""hljs-attribute"">position</span>: absolute;
    <span class=""hljs-attribute"">width</span>: <span class=""hljs-number"">200px</span>;
    <span class=""hljs-attribute"">height</span>: <span class=""hljs-number"">40px</span>;
    <span class=""hljs-attribute"">color</span>: white;
    <span class=""hljs-attribute"">background-color</span>: orange;
    <span class=""hljs-attribute"">border</span>: none;
    <span class=""hljs-attribute"">border-radius</span>: <span class=""hljs-number"">10px</span>;
}

<span class=""hljs-selector-class"">.hide</span> {
    <span class=""hljs-attribute"">display</span>: none;
}

<span class=""hljs-selector-id"">#answers</span> {
    <span class=""hljs-attribute"">display</span>: flex;
    <span class=""hljs-attribute"">flex-direction</span>: column;
    <span class=""hljs-attribute"">justify-content</span>: center;
    <span class=""hljs-attribute"">align-items</span>: center;
    <span class=""hljs-attribute"">gap</span>: <span class=""hljs-number"">20px</span>;
}

<span class=""hljs-selector-class"">.btn</span> {
    <span class=""hljs-attribute"">width</span>: <span class=""hljs-number"">250px</span>;
    <span class=""hljs-attribute"">height</span>: <span class=""hljs-number"">50px</span>;
    <span class=""hljs-attribute"">outline</span>: white;
    <span class=""hljs-attribute"">border-radius</span>: <span class=""hljs-number"">5px</span>;
    <span class=""hljs-attribute"">border</span>: <span class=""hljs-number"">1px</span> solid white;
    <span class=""hljs-attribute"">color</span>: white;
    <span class=""hljs-attribute"">background</span>: none;
    <span class=""hljs-attribute"">cursor</span>: pointer;
}</code></pre>
<pre class=""snippet-code-html lang-html s-code-block""><code class=""hljs language-xml""><span class=""hljs-meta"">&lt;!DOCTYPE <span class=""hljs-keyword"">html</span>&gt;</span>
<span class=""hljs-tag"">&lt;<span class=""hljs-name"">html</span> <span class=""hljs-attr"">lang</span>=<span class=""hljs-string"">""en""</span>&gt;</span>
<span class=""hljs-tag"">&lt;<span class=""hljs-name"">head</span>&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-name"">meta</span> <span class=""hljs-attr"">charset</span>=<span class=""hljs-string"">""UTF-8""</span>&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-name"">meta</span> <span class=""hljs-attr"">http-equiv</span>=<span class=""hljs-string"">""X-UA-Compatible""</span> <span class=""hljs-attr"">content</span>=<span class=""hljs-string"">""IE=edge""</span>&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-name"">meta</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""viewport""</span> <span class=""hljs-attr"">content</span>=<span class=""hljs-string"">""width=device-width, initial-scale=1.0""</span>&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-name"">title</span>&gt;</span>CarQuiz<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">title</span>&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-name"">link</span> <span class=""hljs-attr"">rel</span>=<span class=""hljs-string"">""stylesheet""</span> <span class=""hljs-attr"">href</span>=<span class=""hljs-string"">""styles.css""</span>&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">head</span>&gt;</span>
<span class=""hljs-tag"">&lt;<span class=""hljs-name"">body</span>&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""container""</span>&gt;</span>
        <span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""message""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""hide""</span>&gt;</span>
            <span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""correct""</span>&gt;</span>
                <span class=""hljs-tag"">&lt;<span class=""hljs-name"">i</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""fas fa-check-circle""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">i</span>&gt;</span>
                <span class=""hljs-tag"">&lt;<span class=""hljs-name"">h1</span>&gt;</span>Well done!<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">h1</span>&gt;</span>
                <span class=""hljs-tag"">&lt;<span class=""hljs-name"">p</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""correct-answer""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">p</span>&gt;</span>
            <span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span>
            <span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""wrong""</span>&gt;</span>
                <span class=""hljs-tag"">&lt;<span class=""hljs-name"">i</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""fa-solid fa-circle-xmark""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">i</span>&gt;</span>
                <span class=""hljs-tag"">&lt;<span class=""hljs-name"">h1</span>&gt;</span>Wrong!<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">h1</span>&gt;</span>
                <span class=""hljs-tag"">&lt;<span class=""hljs-name"">p</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""actual-answer""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">p</span>&gt;</span>
            <span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span>
        <span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span>
        <span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""content""</span>&gt;</span>
            <span class=""hljs-tag"">&lt;<span class=""hljs-name"">img</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""""</span> <span class=""hljs-attr"">alt</span>=<span class=""hljs-string"">""""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""image""</span>&gt;</span>
            <span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""text""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""hide""</span>&gt;</span>
                <span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""stats""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span>
                <span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""question""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""hide""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span>
                <span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""answers""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""hide""</span>&gt;</span>
                <span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span>
                <span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""controls""</span>&gt;</span>
                    <span class=""hljs-tag"">&lt;<span class=""hljs-name"">button</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""start-btn""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""start-btn btn""</span>&gt;</span>Start<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">button</span>&gt;</span>
                    <span class=""hljs-tag"">&lt;<span class=""hljs-name"">button</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""next-btn""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""hide-btn btn""</span>&gt;</span>Next<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">button</span>&gt;</span>
                <span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span>
            <span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span>
        <span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span>
    <span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span>
    <span class=""hljs-tag"">&lt;<span class=""hljs-name"">script</span> <span class=""hljs-attr"">src</span>=<span class=""hljs-string"">""script.js""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">script</span>&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">body</span>&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">html</span>&gt;</span></code></pre>
<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>
</div>
<p></p>
    ","('2023-02-26 11:18:47Z',)","('0',)",,,,,,,,,,,,,,,,post,75571616,Quiz in Javascript,78,36,84
172,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,,,,,,,,,,,post,1646698,What is the 'new' keyword in JavaScript?,50,54,81
173,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",comment-1517440,13.0,Chetan S,"Also, related thread - <a href=""http://stackoverflow.com/questions/383402/is-javascript-s-new-keyword-considered-harmful"" title=""is javascript s new keyword considered harmful"">stackoverflow.com/questions/383402/…</a>","2009-10-29 22:04:46Z, License: CC BY-SA 2.5",,,,,,,,,,,post_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
174,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",comment-94796557,1.0,MartianMartian,"read these examples first folks, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new"" rel=""nofollow noreferrer"">developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/…</a>","2018-12-30 17:00:39Z, License: CC BY-SA 4.0",,,,,,,,,,,post_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
175,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,3658673.0,"It does 5 things:
It creates a new object. The type of this object is simply object.
It sets this new object's internal, inaccessible, [[prototype]] (i.e. __proto__) property to be the constructor function's external, accessible, prototype object (every function object automatically has a prototype property).
It makes the this variable point to the newly created object.
It executes the constructor function, using the newly created object whenever this is mentioned.
It returns the newly created object, unless the constructor function returns a non-null object reference. In this case, that object reference is returned instead.
Note: constructor function refers to the function after the new keyword, as in
new ConstructorFunction(arg1, arg2)
Once this is done, if an undefined property of the new object is requested, the script will check the object's [[prototype]] object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.
The most difficult part about this is point number 2. Every object (including functions) has this internal property called [[prototype]]. It can only be set at object creation time, either with new, with Object.create, or based on the literal (functions default to Function.prototype, numbers to Number.prototype, etc.). It can only be read with Object.getPrototypeOf(someObject). There is no other way to get or set this value.
Functions, in addition to the hidden [[prototype]] property, also have a property called prototype, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.
Here is an example:
ObjMaker = function() { this.a = 'first'; };
// `ObjMaker` is just a function, there's nothing special about it
// that makes it a constructor.

ObjMaker.prototype.b = 'second';
// like all functions, ObjMaker has an accessible `prototype` property that 
// we can alter. I just added a property called 'b' to it. Like 
// all objects, ObjMaker also has an inaccessible `[[prototype]]` property
// that we can't do anything with

obj1 = new ObjMaker();
// 3 things just happened.
// A new, empty object was created called `obj1`.  At first `obj1` 
// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current
// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later
// assigned a new object value, `obj1`'s `[[prototype]]` will not change, but you
// can alter the properties of `ObjMaker.prototype` to add to both the
// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with
// `obj1` in place of `this`... so `obj1.a` was set to 'first'.

obj1.a;
// returns 'first'
obj1.b;
// `obj1` doesn't have a property called 'b', so JavaScript checks 
// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`
// `ObjMaker.prototype` has a property called 'b' with value 'second'
// returns 'second'
It's like class inheritance because now, any objects you make using new ObjMaker() will also appear to have inherited the 'b' property.
If you want something like a subclass, then you do this:
SubObjMaker = function () {};
SubObjMaker.prototype = new ObjMaker(); // note: this pattern is deprecated!
// Because we used 'new', the [[prototype]] property of SubObjMaker.prototype
// is now set to the object value of ObjMaker.prototype.
// The modern way to do this is with Object.create(), which was added in ECMAScript 5:
// SubObjMaker.prototype = Object.create(ObjMaker.prototype);

SubObjMaker.prototype.c = 'third';  
obj2 = new SubObjMaker();
// [[prototype]] property of obj2 is now set to SubObjMaker.prototype
// Remember that the [[prototype]] property of SubObjMaker.prototype
// is ObjMaker.prototype. So now obj2 has a prototype chain!
// obj2 ---> SubObjMaker.prototype ---> ObjMaker.prototype

obj2.c;
// returns 'third', from SubObjMaker.prototype

obj2.b;
// returns 'second', from ObjMaker.prototype

obj2.a;
// returns 'first', from SubObjMaker.prototype, because SubObjMaker.prototype 
// was created with the ObjMaker function, which assigned a for us
I read a ton of rubbish on this subject before finally finding this page, where this is explained very well with nice diagrams.","('\n<p>It does 5 things:</p>\n<ol>\n<li>It creates a new object.  The type of this object is simply <em>object</em>.</li>\n<li>It sets this new object\'s internal, inaccessible, <code>[[prototype]]</code> (i.e. <code>__proto__</code>) property to be the constructor function\'s external, accessible, <code>prototype</code> object (every function object automatically has a <code>prototype</code> property).</li>\n<li>It makes the <code>this</code> variable point to the newly created object.</li>\n<li>It executes the constructor function, using the newly created object whenever <code>this</code> is mentioned.</li>\n<li>It returns the newly created object, unless the constructor function returns a non-<code>null</code> object reference. In this case, that object reference is returned instead.</li>\n</ol>\n<p>Note: <em>constructor function</em> refers to the function after the <code>new</code> keyword, as in</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ConstructorFunction</span>(arg1, arg2)\n</code></pre>\n<p>Once this is done, if an undefined property of the new object is requested, the script will check the object\'s <code>[[prototype]]</code> object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.</p>\n<p>The most difficult part about this is point number 2.  Every object (including functions) has this internal property called <code>[[prototype]]</code>. It can <em>only</em> be set at object creation time, either with <code>new</code>, with <code>Object.create</code>, or based on the literal (functions default to <code>Function.prototype</code>, numbers to <code>Number.prototype</code>, etc.). It can only be read with <code>Object.getPrototypeOf(someObject)</code>. There is <em>no</em> other way to get or set this value.</p>\n<p>Functions, in addition to the hidden <code>[[prototype]]</code> property, also have a property called <em>prototype</em>, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.</p>\n<hr>\n<p>Here is an example:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">ObjMaker</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) { <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">a</span> = <span class=""hljs-string"">\'first\'</span>; };\n<span class=""hljs-comment"">// `ObjMaker` is just a function, there\'s nothing special about it</span>\n<span class=""hljs-comment"">// that makes it a constructor.</span>\n\n<span class=""hljs-title class_"">ObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">b</span> = <span class=""hljs-string"">\'second\'</span>;\n<span class=""hljs-comment"">// like all functions, ObjMaker has an accessible `prototype` property that </span>\n<span class=""hljs-comment"">// we can alter. I just added a property called \'b\' to it. Like </span>\n<span class=""hljs-comment"">// all objects, ObjMaker also has an inaccessible `[[prototype]]` property</span>\n<span class=""hljs-comment"">// that we can\'t do anything with</span>\n\nobj1 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>();\n<span class=""hljs-comment"">// 3 things just happened.</span>\n<span class=""hljs-comment"">// A new, empty object was created called `obj1`.  At first `obj1` </span>\n<span class=""hljs-comment"">// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current</span>\n<span class=""hljs-comment"">// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later</span>\n<span class=""hljs-comment"">// assigned a new object value, `obj1`\'s `[[prototype]]` will not change, but you</span>\n<span class=""hljs-comment"">// can alter the properties of `ObjMaker.prototype` to add to both the</span>\n<span class=""hljs-comment"">// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with</span>\n<span class=""hljs-comment"">// `obj1` in place of `this`... so `obj1.a` was set to \'first\'.</span>\n\nobj1.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\'</span>\nobj1.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// `obj1` doesn\'t have a property called \'b\', so JavaScript checks </span>\n<span class=""hljs-comment"">// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`</span>\n<span class=""hljs-comment"">// `ObjMaker.prototype` has a property called \'b\' with value \'second\'</span>\n<span class=""hljs-comment"">// returns \'second\'</span>\n</code></pre>\n<p>It\'s like class inheritance because now, any objects you make using <code>new ObjMaker()</code> will also appear to have inherited the \'b\' property.</p>\n<p>If you want something like a subclass, then you do this:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">SubObjMaker</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {};\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>(); <span class=""hljs-comment"">// note: this pattern is deprecated!</span>\n<span class=""hljs-comment"">// Because we used \'new\', the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is now set to the object value of ObjMaker.prototype.</span>\n<span class=""hljs-comment"">// The modern way to do this is with Object.create(), which was added in ECMAScript 5:</span>\n<span class=""hljs-comment"">// SubObjMaker.prototype = Object.create(ObjMaker.prototype);</span>\n\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">c</span> = <span class=""hljs-string"">\'third\'</span>;  \nobj2 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">SubObjMaker</span>();\n<span class=""hljs-comment"">// [[prototype]] property of obj2 is now set to SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// Remember that the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is ObjMaker.prototype. So now obj2 has a prototype chain!</span>\n<span class=""hljs-comment"">// obj2 ---&gt; SubObjMaker.prototype ---&gt; ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">c</span>;\n<span class=""hljs-comment"">// returns \'third\', from SubObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// returns \'second\', from ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\', from SubObjMaker.prototype, because SubObjMaker.prototype </span>\n<span class=""hljs-comment"">// was created with the ObjMaker function, which assigned a for us</span>\n</code></pre>\n<hr>\n<p>I read a ton of rubbish on this subject before finally finding <a href=""http://joost.zeekat.nl/constructors-considered-mildly-confusing.html"" rel=""noreferrer"">this page</a>, where this is explained very well with nice diagrams.</p>\n    ',)","2011-04-14 14:55:40Z, License: CC BY-SA 3.0","('2291',)",,,,,,answer,1646698,What is the 'new' keyword in JavaScript?,50,54,81
176,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,3658673.0,"It does 5 things:
It creates a new object. The type of this object is simply object.
It sets this new object's internal, inaccessible, [[prototype]] (i.e. __proto__) property to be the constructor function's external, accessible, prototype object (every function object automatically has a prototype property).
It makes the this variable point to the newly created object.
It executes the constructor function, using the newly created object whenever this is mentioned.
It returns the newly created object, unless the constructor function returns a non-null object reference. In this case, that object reference is returned instead.
Note: constructor function refers to the function after the new keyword, as in
new ConstructorFunction(arg1, arg2)
Once this is done, if an undefined property of the new object is requested, the script will check the object's [[prototype]] object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.
The most difficult part about this is point number 2. Every object (including functions) has this internal property called [[prototype]]. It can only be set at object creation time, either with new, with Object.create, or based on the literal (functions default to Function.prototype, numbers to Number.prototype, etc.). It can only be read with Object.getPrototypeOf(someObject). There is no other way to get or set this value.
Functions, in addition to the hidden [[prototype]] property, also have a property called prototype, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.
Here is an example:
ObjMaker = function() { this.a = 'first'; };
// `ObjMaker` is just a function, there's nothing special about it
// that makes it a constructor.

ObjMaker.prototype.b = 'second';
// like all functions, ObjMaker has an accessible `prototype` property that 
// we can alter. I just added a property called 'b' to it. Like 
// all objects, ObjMaker also has an inaccessible `[[prototype]]` property
// that we can't do anything with

obj1 = new ObjMaker();
// 3 things just happened.
// A new, empty object was created called `obj1`.  At first `obj1` 
// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current
// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later
// assigned a new object value, `obj1`'s `[[prototype]]` will not change, but you
// can alter the properties of `ObjMaker.prototype` to add to both the
// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with
// `obj1` in place of `this`... so `obj1.a` was set to 'first'.

obj1.a;
// returns 'first'
obj1.b;
// `obj1` doesn't have a property called 'b', so JavaScript checks 
// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`
// `ObjMaker.prototype` has a property called 'b' with value 'second'
// returns 'second'
It's like class inheritance because now, any objects you make using new ObjMaker() will also appear to have inherited the 'b' property.
If you want something like a subclass, then you do this:
SubObjMaker = function () {};
SubObjMaker.prototype = new ObjMaker(); // note: this pattern is deprecated!
// Because we used 'new', the [[prototype]] property of SubObjMaker.prototype
// is now set to the object value of ObjMaker.prototype.
// The modern way to do this is with Object.create(), which was added in ECMAScript 5:
// SubObjMaker.prototype = Object.create(ObjMaker.prototype);

SubObjMaker.prototype.c = 'third';  
obj2 = new SubObjMaker();
// [[prototype]] property of obj2 is now set to SubObjMaker.prototype
// Remember that the [[prototype]] property of SubObjMaker.prototype
// is ObjMaker.prototype. So now obj2 has a prototype chain!
// obj2 ---> SubObjMaker.prototype ---> ObjMaker.prototype

obj2.c;
// returns 'third', from SubObjMaker.prototype

obj2.b;
// returns 'second', from ObjMaker.prototype

obj2.a;
// returns 'first', from SubObjMaker.prototype, because SubObjMaker.prototype 
// was created with the ObjMaker function, which assigned a for us
I read a ton of rubbish on this subject before finally finding this page, where this is explained very well with nice diagrams.","('\n<p>It does 5 things:</p>\n<ol>\n<li>It creates a new object.  The type of this object is simply <em>object</em>.</li>\n<li>It sets this new object\'s internal, inaccessible, <code>[[prototype]]</code> (i.e. <code>__proto__</code>) property to be the constructor function\'s external, accessible, <code>prototype</code> object (every function object automatically has a <code>prototype</code> property).</li>\n<li>It makes the <code>this</code> variable point to the newly created object.</li>\n<li>It executes the constructor function, using the newly created object whenever <code>this</code> is mentioned.</li>\n<li>It returns the newly created object, unless the constructor function returns a non-<code>null</code> object reference. In this case, that object reference is returned instead.</li>\n</ol>\n<p>Note: <em>constructor function</em> refers to the function after the <code>new</code> keyword, as in</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ConstructorFunction</span>(arg1, arg2)\n</code></pre>\n<p>Once this is done, if an undefined property of the new object is requested, the script will check the object\'s <code>[[prototype]]</code> object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.</p>\n<p>The most difficult part about this is point number 2.  Every object (including functions) has this internal property called <code>[[prototype]]</code>. It can <em>only</em> be set at object creation time, either with <code>new</code>, with <code>Object.create</code>, or based on the literal (functions default to <code>Function.prototype</code>, numbers to <code>Number.prototype</code>, etc.). It can only be read with <code>Object.getPrototypeOf(someObject)</code>. There is <em>no</em> other way to get or set this value.</p>\n<p>Functions, in addition to the hidden <code>[[prototype]]</code> property, also have a property called <em>prototype</em>, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.</p>\n<hr>\n<p>Here is an example:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">ObjMaker</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) { <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">a</span> = <span class=""hljs-string"">\'first\'</span>; };\n<span class=""hljs-comment"">// `ObjMaker` is just a function, there\'s nothing special about it</span>\n<span class=""hljs-comment"">// that makes it a constructor.</span>\n\n<span class=""hljs-title class_"">ObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">b</span> = <span class=""hljs-string"">\'second\'</span>;\n<span class=""hljs-comment"">// like all functions, ObjMaker has an accessible `prototype` property that </span>\n<span class=""hljs-comment"">// we can alter. I just added a property called \'b\' to it. Like </span>\n<span class=""hljs-comment"">// all objects, ObjMaker also has an inaccessible `[[prototype]]` property</span>\n<span class=""hljs-comment"">// that we can\'t do anything with</span>\n\nobj1 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>();\n<span class=""hljs-comment"">// 3 things just happened.</span>\n<span class=""hljs-comment"">// A new, empty object was created called `obj1`.  At first `obj1` </span>\n<span class=""hljs-comment"">// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current</span>\n<span class=""hljs-comment"">// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later</span>\n<span class=""hljs-comment"">// assigned a new object value, `obj1`\'s `[[prototype]]` will not change, but you</span>\n<span class=""hljs-comment"">// can alter the properties of `ObjMaker.prototype` to add to both the</span>\n<span class=""hljs-comment"">// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with</span>\n<span class=""hljs-comment"">// `obj1` in place of `this`... so `obj1.a` was set to \'first\'.</span>\n\nobj1.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\'</span>\nobj1.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// `obj1` doesn\'t have a property called \'b\', so JavaScript checks </span>\n<span class=""hljs-comment"">// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`</span>\n<span class=""hljs-comment"">// `ObjMaker.prototype` has a property called \'b\' with value \'second\'</span>\n<span class=""hljs-comment"">// returns \'second\'</span>\n</code></pre>\n<p>It\'s like class inheritance because now, any objects you make using <code>new ObjMaker()</code> will also appear to have inherited the \'b\' property.</p>\n<p>If you want something like a subclass, then you do this:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">SubObjMaker</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {};\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>(); <span class=""hljs-comment"">// note: this pattern is deprecated!</span>\n<span class=""hljs-comment"">// Because we used \'new\', the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is now set to the object value of ObjMaker.prototype.</span>\n<span class=""hljs-comment"">// The modern way to do this is with Object.create(), which was added in ECMAScript 5:</span>\n<span class=""hljs-comment"">// SubObjMaker.prototype = Object.create(ObjMaker.prototype);</span>\n\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">c</span> = <span class=""hljs-string"">\'third\'</span>;  \nobj2 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">SubObjMaker</span>();\n<span class=""hljs-comment"">// [[prototype]] property of obj2 is now set to SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// Remember that the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is ObjMaker.prototype. So now obj2 has a prototype chain!</span>\n<span class=""hljs-comment"">// obj2 ---&gt; SubObjMaker.prototype ---&gt; ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">c</span>;\n<span class=""hljs-comment"">// returns \'third\', from SubObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// returns \'second\', from ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\', from SubObjMaker.prototype, because SubObjMaker.prototype </span>\n<span class=""hljs-comment"">// was created with the ObjMaker function, which assigned a for us</span>\n</code></pre>\n<hr>\n<p>I read a ton of rubbish on this subject before finally finding <a href=""http://joost.zeekat.nl/constructors-considered-mildly-confusing.html"" rel=""noreferrer"">this page</a>, where this is explained very well with nice diagrams.</p>\n    ',)","2011-04-14 14:55:40Z, License: CC BY-SA 3.0","('2291',)","('6464255',)","Just wanted to add: There is in fact a way to access the internal [[prototype]], by __proto__. This is however non-standard, and only supported by relatively new browsers (and not all of them). There is a standardized way coming up, namely Object.getPrototypeOf(obj), but it is Ecmascript3.1, and is itself only supported on new browers - again. It is generally recommended to not use that property though, stuff gets complicated real fast inside there.","('\n                \n                <span class=""comment-copy"">Just wanted to add: There is in fact a way to access the internal [[prototype]], by __proto__. This is however non-standard, and only supported by relatively new browsers (and not all of them). There is a standardized way coming up, namely Object.getPrototypeOf(obj), but it is Ecmascript3.1, and is itself only supported on new browers - again. It is generally recommended to not use that property though, stuff gets complicated real fast inside there.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/335355/blub"" title=""12,864 reputation"" class=""comment-user"">Blub</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment6464255_3658673"" aria-label=""Link to comment""><span title=""2011-04-14 14:55:40Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 14, 2011 at 14:55</span></a></span>\n                        <span title=""this comment was edited 4 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 14, 2011 at 14:55","('53',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
177,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,3658673.0,"It does 5 things:
It creates a new object. The type of this object is simply object.
It sets this new object's internal, inaccessible, [[prototype]] (i.e. __proto__) property to be the constructor function's external, accessible, prototype object (every function object automatically has a prototype property).
It makes the this variable point to the newly created object.
It executes the constructor function, using the newly created object whenever this is mentioned.
It returns the newly created object, unless the constructor function returns a non-null object reference. In this case, that object reference is returned instead.
Note: constructor function refers to the function after the new keyword, as in
new ConstructorFunction(arg1, arg2)
Once this is done, if an undefined property of the new object is requested, the script will check the object's [[prototype]] object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.
The most difficult part about this is point number 2. Every object (including functions) has this internal property called [[prototype]]. It can only be set at object creation time, either with new, with Object.create, or based on the literal (functions default to Function.prototype, numbers to Number.prototype, etc.). It can only be read with Object.getPrototypeOf(someObject). There is no other way to get or set this value.
Functions, in addition to the hidden [[prototype]] property, also have a property called prototype, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.
Here is an example:
ObjMaker = function() { this.a = 'first'; };
// `ObjMaker` is just a function, there's nothing special about it
// that makes it a constructor.

ObjMaker.prototype.b = 'second';
// like all functions, ObjMaker has an accessible `prototype` property that 
// we can alter. I just added a property called 'b' to it. Like 
// all objects, ObjMaker also has an inaccessible `[[prototype]]` property
// that we can't do anything with

obj1 = new ObjMaker();
// 3 things just happened.
// A new, empty object was created called `obj1`.  At first `obj1` 
// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current
// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later
// assigned a new object value, `obj1`'s `[[prototype]]` will not change, but you
// can alter the properties of `ObjMaker.prototype` to add to both the
// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with
// `obj1` in place of `this`... so `obj1.a` was set to 'first'.

obj1.a;
// returns 'first'
obj1.b;
// `obj1` doesn't have a property called 'b', so JavaScript checks 
// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`
// `ObjMaker.prototype` has a property called 'b' with value 'second'
// returns 'second'
It's like class inheritance because now, any objects you make using new ObjMaker() will also appear to have inherited the 'b' property.
If you want something like a subclass, then you do this:
SubObjMaker = function () {};
SubObjMaker.prototype = new ObjMaker(); // note: this pattern is deprecated!
// Because we used 'new', the [[prototype]] property of SubObjMaker.prototype
// is now set to the object value of ObjMaker.prototype.
// The modern way to do this is with Object.create(), which was added in ECMAScript 5:
// SubObjMaker.prototype = Object.create(ObjMaker.prototype);

SubObjMaker.prototype.c = 'third';  
obj2 = new SubObjMaker();
// [[prototype]] property of obj2 is now set to SubObjMaker.prototype
// Remember that the [[prototype]] property of SubObjMaker.prototype
// is ObjMaker.prototype. So now obj2 has a prototype chain!
// obj2 ---> SubObjMaker.prototype ---> ObjMaker.prototype

obj2.c;
// returns 'third', from SubObjMaker.prototype

obj2.b;
// returns 'second', from ObjMaker.prototype

obj2.a;
// returns 'first', from SubObjMaker.prototype, because SubObjMaker.prototype 
// was created with the ObjMaker function, which assigned a for us
I read a ton of rubbish on this subject before finally finding this page, where this is explained very well with nice diagrams.","('\n<p>It does 5 things:</p>\n<ol>\n<li>It creates a new object.  The type of this object is simply <em>object</em>.</li>\n<li>It sets this new object\'s internal, inaccessible, <code>[[prototype]]</code> (i.e. <code>__proto__</code>) property to be the constructor function\'s external, accessible, <code>prototype</code> object (every function object automatically has a <code>prototype</code> property).</li>\n<li>It makes the <code>this</code> variable point to the newly created object.</li>\n<li>It executes the constructor function, using the newly created object whenever <code>this</code> is mentioned.</li>\n<li>It returns the newly created object, unless the constructor function returns a non-<code>null</code> object reference. In this case, that object reference is returned instead.</li>\n</ol>\n<p>Note: <em>constructor function</em> refers to the function after the <code>new</code> keyword, as in</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ConstructorFunction</span>(arg1, arg2)\n</code></pre>\n<p>Once this is done, if an undefined property of the new object is requested, the script will check the object\'s <code>[[prototype]]</code> object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.</p>\n<p>The most difficult part about this is point number 2.  Every object (including functions) has this internal property called <code>[[prototype]]</code>. It can <em>only</em> be set at object creation time, either with <code>new</code>, with <code>Object.create</code>, or based on the literal (functions default to <code>Function.prototype</code>, numbers to <code>Number.prototype</code>, etc.). It can only be read with <code>Object.getPrototypeOf(someObject)</code>. There is <em>no</em> other way to get or set this value.</p>\n<p>Functions, in addition to the hidden <code>[[prototype]]</code> property, also have a property called <em>prototype</em>, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.</p>\n<hr>\n<p>Here is an example:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">ObjMaker</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) { <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">a</span> = <span class=""hljs-string"">\'first\'</span>; };\n<span class=""hljs-comment"">// `ObjMaker` is just a function, there\'s nothing special about it</span>\n<span class=""hljs-comment"">// that makes it a constructor.</span>\n\n<span class=""hljs-title class_"">ObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">b</span> = <span class=""hljs-string"">\'second\'</span>;\n<span class=""hljs-comment"">// like all functions, ObjMaker has an accessible `prototype` property that </span>\n<span class=""hljs-comment"">// we can alter. I just added a property called \'b\' to it. Like </span>\n<span class=""hljs-comment"">// all objects, ObjMaker also has an inaccessible `[[prototype]]` property</span>\n<span class=""hljs-comment"">// that we can\'t do anything with</span>\n\nobj1 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>();\n<span class=""hljs-comment"">// 3 things just happened.</span>\n<span class=""hljs-comment"">// A new, empty object was created called `obj1`.  At first `obj1` </span>\n<span class=""hljs-comment"">// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current</span>\n<span class=""hljs-comment"">// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later</span>\n<span class=""hljs-comment"">// assigned a new object value, `obj1`\'s `[[prototype]]` will not change, but you</span>\n<span class=""hljs-comment"">// can alter the properties of `ObjMaker.prototype` to add to both the</span>\n<span class=""hljs-comment"">// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with</span>\n<span class=""hljs-comment"">// `obj1` in place of `this`... so `obj1.a` was set to \'first\'.</span>\n\nobj1.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\'</span>\nobj1.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// `obj1` doesn\'t have a property called \'b\', so JavaScript checks </span>\n<span class=""hljs-comment"">// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`</span>\n<span class=""hljs-comment"">// `ObjMaker.prototype` has a property called \'b\' with value \'second\'</span>\n<span class=""hljs-comment"">// returns \'second\'</span>\n</code></pre>\n<p>It\'s like class inheritance because now, any objects you make using <code>new ObjMaker()</code> will also appear to have inherited the \'b\' property.</p>\n<p>If you want something like a subclass, then you do this:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">SubObjMaker</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {};\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>(); <span class=""hljs-comment"">// note: this pattern is deprecated!</span>\n<span class=""hljs-comment"">// Because we used \'new\', the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is now set to the object value of ObjMaker.prototype.</span>\n<span class=""hljs-comment"">// The modern way to do this is with Object.create(), which was added in ECMAScript 5:</span>\n<span class=""hljs-comment"">// SubObjMaker.prototype = Object.create(ObjMaker.prototype);</span>\n\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">c</span> = <span class=""hljs-string"">\'third\'</span>;  \nobj2 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">SubObjMaker</span>();\n<span class=""hljs-comment"">// [[prototype]] property of obj2 is now set to SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// Remember that the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is ObjMaker.prototype. So now obj2 has a prototype chain!</span>\n<span class=""hljs-comment"">// obj2 ---&gt; SubObjMaker.prototype ---&gt; ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">c</span>;\n<span class=""hljs-comment"">// returns \'third\', from SubObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// returns \'second\', from ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\', from SubObjMaker.prototype, because SubObjMaker.prototype </span>\n<span class=""hljs-comment"">// was created with the ObjMaker function, which assigned a for us</span>\n</code></pre>\n<hr>\n<p>I read a ton of rubbish on this subject before finally finding <a href=""http://joost.zeekat.nl/constructors-considered-mildly-confusing.html"" rel=""noreferrer"">this page</a>, where this is explained very well with nice diagrams.</p>\n    ',)","2011-04-14 14:55:40Z, License: CC BY-SA 3.0","('2291',)","('11984206',)",Question: what happens differently if ObjMaker is defined as a function that returns a value?,"('\n                \n                <span class=""comment-copy"">Question: what happens differently if <code>ObjMaker</code> is defined as a function that returns a value?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/82515/jim-blackler"" title=""22,866 reputation"" class=""comment-user"">Jim Blackler</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment11984206_3658673"" aria-label=""Link to comment""><span title=""2012-02-27 19:05:32Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Feb 27, 2012 at 19:05</span></a></span>\n            ',)","Feb 27, 2012 at 19:05","('12',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
178,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,3658673.0,"It does 5 things:
It creates a new object. The type of this object is simply object.
It sets this new object's internal, inaccessible, [[prototype]] (i.e. __proto__) property to be the constructor function's external, accessible, prototype object (every function object automatically has a prototype property).
It makes the this variable point to the newly created object.
It executes the constructor function, using the newly created object whenever this is mentioned.
It returns the newly created object, unless the constructor function returns a non-null object reference. In this case, that object reference is returned instead.
Note: constructor function refers to the function after the new keyword, as in
new ConstructorFunction(arg1, arg2)
Once this is done, if an undefined property of the new object is requested, the script will check the object's [[prototype]] object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.
The most difficult part about this is point number 2. Every object (including functions) has this internal property called [[prototype]]. It can only be set at object creation time, either with new, with Object.create, or based on the literal (functions default to Function.prototype, numbers to Number.prototype, etc.). It can only be read with Object.getPrototypeOf(someObject). There is no other way to get or set this value.
Functions, in addition to the hidden [[prototype]] property, also have a property called prototype, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.
Here is an example:
ObjMaker = function() { this.a = 'first'; };
// `ObjMaker` is just a function, there's nothing special about it
// that makes it a constructor.

ObjMaker.prototype.b = 'second';
// like all functions, ObjMaker has an accessible `prototype` property that 
// we can alter. I just added a property called 'b' to it. Like 
// all objects, ObjMaker also has an inaccessible `[[prototype]]` property
// that we can't do anything with

obj1 = new ObjMaker();
// 3 things just happened.
// A new, empty object was created called `obj1`.  At first `obj1` 
// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current
// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later
// assigned a new object value, `obj1`'s `[[prototype]]` will not change, but you
// can alter the properties of `ObjMaker.prototype` to add to both the
// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with
// `obj1` in place of `this`... so `obj1.a` was set to 'first'.

obj1.a;
// returns 'first'
obj1.b;
// `obj1` doesn't have a property called 'b', so JavaScript checks 
// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`
// `ObjMaker.prototype` has a property called 'b' with value 'second'
// returns 'second'
It's like class inheritance because now, any objects you make using new ObjMaker() will also appear to have inherited the 'b' property.
If you want something like a subclass, then you do this:
SubObjMaker = function () {};
SubObjMaker.prototype = new ObjMaker(); // note: this pattern is deprecated!
// Because we used 'new', the [[prototype]] property of SubObjMaker.prototype
// is now set to the object value of ObjMaker.prototype.
// The modern way to do this is with Object.create(), which was added in ECMAScript 5:
// SubObjMaker.prototype = Object.create(ObjMaker.prototype);

SubObjMaker.prototype.c = 'third';  
obj2 = new SubObjMaker();
// [[prototype]] property of obj2 is now set to SubObjMaker.prototype
// Remember that the [[prototype]] property of SubObjMaker.prototype
// is ObjMaker.prototype. So now obj2 has a prototype chain!
// obj2 ---> SubObjMaker.prototype ---> ObjMaker.prototype

obj2.c;
// returns 'third', from SubObjMaker.prototype

obj2.b;
// returns 'second', from ObjMaker.prototype

obj2.a;
// returns 'first', from SubObjMaker.prototype, because SubObjMaker.prototype 
// was created with the ObjMaker function, which assigned a for us
I read a ton of rubbish on this subject before finally finding this page, where this is explained very well with nice diagrams.","('\n<p>It does 5 things:</p>\n<ol>\n<li>It creates a new object.  The type of this object is simply <em>object</em>.</li>\n<li>It sets this new object\'s internal, inaccessible, <code>[[prototype]]</code> (i.e. <code>__proto__</code>) property to be the constructor function\'s external, accessible, <code>prototype</code> object (every function object automatically has a <code>prototype</code> property).</li>\n<li>It makes the <code>this</code> variable point to the newly created object.</li>\n<li>It executes the constructor function, using the newly created object whenever <code>this</code> is mentioned.</li>\n<li>It returns the newly created object, unless the constructor function returns a non-<code>null</code> object reference. In this case, that object reference is returned instead.</li>\n</ol>\n<p>Note: <em>constructor function</em> refers to the function after the <code>new</code> keyword, as in</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ConstructorFunction</span>(arg1, arg2)\n</code></pre>\n<p>Once this is done, if an undefined property of the new object is requested, the script will check the object\'s <code>[[prototype]]</code> object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.</p>\n<p>The most difficult part about this is point number 2.  Every object (including functions) has this internal property called <code>[[prototype]]</code>. It can <em>only</em> be set at object creation time, either with <code>new</code>, with <code>Object.create</code>, or based on the literal (functions default to <code>Function.prototype</code>, numbers to <code>Number.prototype</code>, etc.). It can only be read with <code>Object.getPrototypeOf(someObject)</code>. There is <em>no</em> other way to get or set this value.</p>\n<p>Functions, in addition to the hidden <code>[[prototype]]</code> property, also have a property called <em>prototype</em>, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.</p>\n<hr>\n<p>Here is an example:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">ObjMaker</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) { <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">a</span> = <span class=""hljs-string"">\'first\'</span>; };\n<span class=""hljs-comment"">// `ObjMaker` is just a function, there\'s nothing special about it</span>\n<span class=""hljs-comment"">// that makes it a constructor.</span>\n\n<span class=""hljs-title class_"">ObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">b</span> = <span class=""hljs-string"">\'second\'</span>;\n<span class=""hljs-comment"">// like all functions, ObjMaker has an accessible `prototype` property that </span>\n<span class=""hljs-comment"">// we can alter. I just added a property called \'b\' to it. Like </span>\n<span class=""hljs-comment"">// all objects, ObjMaker also has an inaccessible `[[prototype]]` property</span>\n<span class=""hljs-comment"">// that we can\'t do anything with</span>\n\nobj1 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>();\n<span class=""hljs-comment"">// 3 things just happened.</span>\n<span class=""hljs-comment"">// A new, empty object was created called `obj1`.  At first `obj1` </span>\n<span class=""hljs-comment"">// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current</span>\n<span class=""hljs-comment"">// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later</span>\n<span class=""hljs-comment"">// assigned a new object value, `obj1`\'s `[[prototype]]` will not change, but you</span>\n<span class=""hljs-comment"">// can alter the properties of `ObjMaker.prototype` to add to both the</span>\n<span class=""hljs-comment"">// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with</span>\n<span class=""hljs-comment"">// `obj1` in place of `this`... so `obj1.a` was set to \'first\'.</span>\n\nobj1.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\'</span>\nobj1.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// `obj1` doesn\'t have a property called \'b\', so JavaScript checks </span>\n<span class=""hljs-comment"">// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`</span>\n<span class=""hljs-comment"">// `ObjMaker.prototype` has a property called \'b\' with value \'second\'</span>\n<span class=""hljs-comment"">// returns \'second\'</span>\n</code></pre>\n<p>It\'s like class inheritance because now, any objects you make using <code>new ObjMaker()</code> will also appear to have inherited the \'b\' property.</p>\n<p>If you want something like a subclass, then you do this:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">SubObjMaker</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {};\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>(); <span class=""hljs-comment"">// note: this pattern is deprecated!</span>\n<span class=""hljs-comment"">// Because we used \'new\', the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is now set to the object value of ObjMaker.prototype.</span>\n<span class=""hljs-comment"">// The modern way to do this is with Object.create(), which was added in ECMAScript 5:</span>\n<span class=""hljs-comment"">// SubObjMaker.prototype = Object.create(ObjMaker.prototype);</span>\n\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">c</span> = <span class=""hljs-string"">\'third\'</span>;  \nobj2 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">SubObjMaker</span>();\n<span class=""hljs-comment"">// [[prototype]] property of obj2 is now set to SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// Remember that the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is ObjMaker.prototype. So now obj2 has a prototype chain!</span>\n<span class=""hljs-comment"">// obj2 ---&gt; SubObjMaker.prototype ---&gt; ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">c</span>;\n<span class=""hljs-comment"">// returns \'third\', from SubObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// returns \'second\', from ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\', from SubObjMaker.prototype, because SubObjMaker.prototype </span>\n<span class=""hljs-comment"">// was created with the ObjMaker function, which assigned a for us</span>\n</code></pre>\n<hr>\n<p>I read a ton of rubbish on this subject before finally finding <a href=""http://joost.zeekat.nl/constructors-considered-mildly-confusing.html"" rel=""noreferrer"">this page</a>, where this is explained very well with nice diagrams.</p>\n    ',)","2011-04-14 14:55:40Z, License: CC BY-SA 3.0","('2291',)","('17705231',)","@LonelyPixel new exists so that you don't have to write factory methods to construct/copy functions/objects. It means, ""Copy this, making it just like its parent 'class'; do so efficiently and correctly; and store inheritance info that is accessible only to me, JS, internally"". To do so, it modifies the otherwise inaccessible internal prototype of the new object to opaquely encapsulate the inherited members, mimicking classical OO inheritance chains (which aren't runtime modifiable). You can simulate this without new, but inheritance will be runtime modifiable. Good? Bad? Up to you.","('\n                \n                <span class=""comment-copy"">@LonelyPixel <code>new</code> exists <i>so that you don\'t have to</i> write factory methods to construct/copy functions/objects. It means, ""Copy this, making it just like its parent \'class\'; do so efficiently and correctly; and store inheritance info that is accessible only to me, JS, internally"". To do so, it modifies the otherwise inaccessible internal <code>prototype</code> of the new object to opaquely encapsulate the inherited members, mimicking classical OO inheritance chains (which aren\'t runtime modifiable). You can simulate this without <code>new</code>, but inheritance will be runtime modifiable. Good? Bad? Up to you.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/279738/engineer"" title=""8,393 reputation"" class=""comment-user"">Engineer</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment17705231_3658673"" aria-label=""Link to comment""><span title=""2012-10-23 22:36:20Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Oct 23, 2012 at 22:36</span></a></span>\n                        <span title=""this comment was edited 6 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Oct 23, 2012 at 22:36","('14',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
179,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,3658673.0,"It does 5 things:
It creates a new object. The type of this object is simply object.
It sets this new object's internal, inaccessible, [[prototype]] (i.e. __proto__) property to be the constructor function's external, accessible, prototype object (every function object automatically has a prototype property).
It makes the this variable point to the newly created object.
It executes the constructor function, using the newly created object whenever this is mentioned.
It returns the newly created object, unless the constructor function returns a non-null object reference. In this case, that object reference is returned instead.
Note: constructor function refers to the function after the new keyword, as in
new ConstructorFunction(arg1, arg2)
Once this is done, if an undefined property of the new object is requested, the script will check the object's [[prototype]] object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.
The most difficult part about this is point number 2. Every object (including functions) has this internal property called [[prototype]]. It can only be set at object creation time, either with new, with Object.create, or based on the literal (functions default to Function.prototype, numbers to Number.prototype, etc.). It can only be read with Object.getPrototypeOf(someObject). There is no other way to get or set this value.
Functions, in addition to the hidden [[prototype]] property, also have a property called prototype, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.
Here is an example:
ObjMaker = function() { this.a = 'first'; };
// `ObjMaker` is just a function, there's nothing special about it
// that makes it a constructor.

ObjMaker.prototype.b = 'second';
// like all functions, ObjMaker has an accessible `prototype` property that 
// we can alter. I just added a property called 'b' to it. Like 
// all objects, ObjMaker also has an inaccessible `[[prototype]]` property
// that we can't do anything with

obj1 = new ObjMaker();
// 3 things just happened.
// A new, empty object was created called `obj1`.  At first `obj1` 
// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current
// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later
// assigned a new object value, `obj1`'s `[[prototype]]` will not change, but you
// can alter the properties of `ObjMaker.prototype` to add to both the
// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with
// `obj1` in place of `this`... so `obj1.a` was set to 'first'.

obj1.a;
// returns 'first'
obj1.b;
// `obj1` doesn't have a property called 'b', so JavaScript checks 
// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`
// `ObjMaker.prototype` has a property called 'b' with value 'second'
// returns 'second'
It's like class inheritance because now, any objects you make using new ObjMaker() will also appear to have inherited the 'b' property.
If you want something like a subclass, then you do this:
SubObjMaker = function () {};
SubObjMaker.prototype = new ObjMaker(); // note: this pattern is deprecated!
// Because we used 'new', the [[prototype]] property of SubObjMaker.prototype
// is now set to the object value of ObjMaker.prototype.
// The modern way to do this is with Object.create(), which was added in ECMAScript 5:
// SubObjMaker.prototype = Object.create(ObjMaker.prototype);

SubObjMaker.prototype.c = 'third';  
obj2 = new SubObjMaker();
// [[prototype]] property of obj2 is now set to SubObjMaker.prototype
// Remember that the [[prototype]] property of SubObjMaker.prototype
// is ObjMaker.prototype. So now obj2 has a prototype chain!
// obj2 ---> SubObjMaker.prototype ---> ObjMaker.prototype

obj2.c;
// returns 'third', from SubObjMaker.prototype

obj2.b;
// returns 'second', from ObjMaker.prototype

obj2.a;
// returns 'first', from SubObjMaker.prototype, because SubObjMaker.prototype 
// was created with the ObjMaker function, which assigned a for us
I read a ton of rubbish on this subject before finally finding this page, where this is explained very well with nice diagrams.","('\n<p>It does 5 things:</p>\n<ol>\n<li>It creates a new object.  The type of this object is simply <em>object</em>.</li>\n<li>It sets this new object\'s internal, inaccessible, <code>[[prototype]]</code> (i.e. <code>__proto__</code>) property to be the constructor function\'s external, accessible, <code>prototype</code> object (every function object automatically has a <code>prototype</code> property).</li>\n<li>It makes the <code>this</code> variable point to the newly created object.</li>\n<li>It executes the constructor function, using the newly created object whenever <code>this</code> is mentioned.</li>\n<li>It returns the newly created object, unless the constructor function returns a non-<code>null</code> object reference. In this case, that object reference is returned instead.</li>\n</ol>\n<p>Note: <em>constructor function</em> refers to the function after the <code>new</code> keyword, as in</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ConstructorFunction</span>(arg1, arg2)\n</code></pre>\n<p>Once this is done, if an undefined property of the new object is requested, the script will check the object\'s <code>[[prototype]]</code> object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.</p>\n<p>The most difficult part about this is point number 2.  Every object (including functions) has this internal property called <code>[[prototype]]</code>. It can <em>only</em> be set at object creation time, either with <code>new</code>, with <code>Object.create</code>, or based on the literal (functions default to <code>Function.prototype</code>, numbers to <code>Number.prototype</code>, etc.). It can only be read with <code>Object.getPrototypeOf(someObject)</code>. There is <em>no</em> other way to get or set this value.</p>\n<p>Functions, in addition to the hidden <code>[[prototype]]</code> property, also have a property called <em>prototype</em>, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.</p>\n<hr>\n<p>Here is an example:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">ObjMaker</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) { <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">a</span> = <span class=""hljs-string"">\'first\'</span>; };\n<span class=""hljs-comment"">// `ObjMaker` is just a function, there\'s nothing special about it</span>\n<span class=""hljs-comment"">// that makes it a constructor.</span>\n\n<span class=""hljs-title class_"">ObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">b</span> = <span class=""hljs-string"">\'second\'</span>;\n<span class=""hljs-comment"">// like all functions, ObjMaker has an accessible `prototype` property that </span>\n<span class=""hljs-comment"">// we can alter. I just added a property called \'b\' to it. Like </span>\n<span class=""hljs-comment"">// all objects, ObjMaker also has an inaccessible `[[prototype]]` property</span>\n<span class=""hljs-comment"">// that we can\'t do anything with</span>\n\nobj1 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>();\n<span class=""hljs-comment"">// 3 things just happened.</span>\n<span class=""hljs-comment"">// A new, empty object was created called `obj1`.  At first `obj1` </span>\n<span class=""hljs-comment"">// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current</span>\n<span class=""hljs-comment"">// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later</span>\n<span class=""hljs-comment"">// assigned a new object value, `obj1`\'s `[[prototype]]` will not change, but you</span>\n<span class=""hljs-comment"">// can alter the properties of `ObjMaker.prototype` to add to both the</span>\n<span class=""hljs-comment"">// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with</span>\n<span class=""hljs-comment"">// `obj1` in place of `this`... so `obj1.a` was set to \'first\'.</span>\n\nobj1.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\'</span>\nobj1.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// `obj1` doesn\'t have a property called \'b\', so JavaScript checks </span>\n<span class=""hljs-comment"">// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`</span>\n<span class=""hljs-comment"">// `ObjMaker.prototype` has a property called \'b\' with value \'second\'</span>\n<span class=""hljs-comment"">// returns \'second\'</span>\n</code></pre>\n<p>It\'s like class inheritance because now, any objects you make using <code>new ObjMaker()</code> will also appear to have inherited the \'b\' property.</p>\n<p>If you want something like a subclass, then you do this:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">SubObjMaker</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {};\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>(); <span class=""hljs-comment"">// note: this pattern is deprecated!</span>\n<span class=""hljs-comment"">// Because we used \'new\', the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is now set to the object value of ObjMaker.prototype.</span>\n<span class=""hljs-comment"">// The modern way to do this is with Object.create(), which was added in ECMAScript 5:</span>\n<span class=""hljs-comment"">// SubObjMaker.prototype = Object.create(ObjMaker.prototype);</span>\n\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">c</span> = <span class=""hljs-string"">\'third\'</span>;  \nobj2 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">SubObjMaker</span>();\n<span class=""hljs-comment"">// [[prototype]] property of obj2 is now set to SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// Remember that the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is ObjMaker.prototype. So now obj2 has a prototype chain!</span>\n<span class=""hljs-comment"">// obj2 ---&gt; SubObjMaker.prototype ---&gt; ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">c</span>;\n<span class=""hljs-comment"">// returns \'third\', from SubObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// returns \'second\', from ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\', from SubObjMaker.prototype, because SubObjMaker.prototype </span>\n<span class=""hljs-comment"">// was created with the ObjMaker function, which assigned a for us</span>\n</code></pre>\n<hr>\n<p>I read a ton of rubbish on this subject before finally finding <a href=""http://joost.zeekat.nl/constructors-considered-mildly-confusing.html"" rel=""noreferrer"">this page</a>, where this is explained very well with nice diagrams.</p>\n    ',)","2011-04-14 14:55:40Z, License: CC BY-SA 3.0","('2291',)","('24480594',)","a small point to add: a call to a constructor, when preceded by the new keyword, automatically returns the created object; there is no need to explicitly return it from within the constructor.","('\n                \n                <span class=""comment-copy"">a small point to add: a call to a constructor, when preceded by the new keyword, automatically returns the created object; there is no need to explicitly return it from within the constructor.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1436177/charlie-roberts"" title=""1,639 reputation"" class=""comment-user"">charlie roberts</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment24480594_3658673"" aria-label=""Link to comment""><span title=""2013-06-06 02:04:18Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jun 6, 2013 at 2:04</span></a></span>\n            ',)","Jun 6, 2013 at 2:04","('11',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
180,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,3658673.0,"It does 5 things:
It creates a new object. The type of this object is simply object.
It sets this new object's internal, inaccessible, [[prototype]] (i.e. __proto__) property to be the constructor function's external, accessible, prototype object (every function object automatically has a prototype property).
It makes the this variable point to the newly created object.
It executes the constructor function, using the newly created object whenever this is mentioned.
It returns the newly created object, unless the constructor function returns a non-null object reference. In this case, that object reference is returned instead.
Note: constructor function refers to the function after the new keyword, as in
new ConstructorFunction(arg1, arg2)
Once this is done, if an undefined property of the new object is requested, the script will check the object's [[prototype]] object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.
The most difficult part about this is point number 2. Every object (including functions) has this internal property called [[prototype]]. It can only be set at object creation time, either with new, with Object.create, or based on the literal (functions default to Function.prototype, numbers to Number.prototype, etc.). It can only be read with Object.getPrototypeOf(someObject). There is no other way to get or set this value.
Functions, in addition to the hidden [[prototype]] property, also have a property called prototype, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.
Here is an example:
ObjMaker = function() { this.a = 'first'; };
// `ObjMaker` is just a function, there's nothing special about it
// that makes it a constructor.

ObjMaker.prototype.b = 'second';
// like all functions, ObjMaker has an accessible `prototype` property that 
// we can alter. I just added a property called 'b' to it. Like 
// all objects, ObjMaker also has an inaccessible `[[prototype]]` property
// that we can't do anything with

obj1 = new ObjMaker();
// 3 things just happened.
// A new, empty object was created called `obj1`.  At first `obj1` 
// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current
// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later
// assigned a new object value, `obj1`'s `[[prototype]]` will not change, but you
// can alter the properties of `ObjMaker.prototype` to add to both the
// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with
// `obj1` in place of `this`... so `obj1.a` was set to 'first'.

obj1.a;
// returns 'first'
obj1.b;
// `obj1` doesn't have a property called 'b', so JavaScript checks 
// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`
// `ObjMaker.prototype` has a property called 'b' with value 'second'
// returns 'second'
It's like class inheritance because now, any objects you make using new ObjMaker() will also appear to have inherited the 'b' property.
If you want something like a subclass, then you do this:
SubObjMaker = function () {};
SubObjMaker.prototype = new ObjMaker(); // note: this pattern is deprecated!
// Because we used 'new', the [[prototype]] property of SubObjMaker.prototype
// is now set to the object value of ObjMaker.prototype.
// The modern way to do this is with Object.create(), which was added in ECMAScript 5:
// SubObjMaker.prototype = Object.create(ObjMaker.prototype);

SubObjMaker.prototype.c = 'third';  
obj2 = new SubObjMaker();
// [[prototype]] property of obj2 is now set to SubObjMaker.prototype
// Remember that the [[prototype]] property of SubObjMaker.prototype
// is ObjMaker.prototype. So now obj2 has a prototype chain!
// obj2 ---> SubObjMaker.prototype ---> ObjMaker.prototype

obj2.c;
// returns 'third', from SubObjMaker.prototype

obj2.b;
// returns 'second', from ObjMaker.prototype

obj2.a;
// returns 'first', from SubObjMaker.prototype, because SubObjMaker.prototype 
// was created with the ObjMaker function, which assigned a for us
I read a ton of rubbish on this subject before finally finding this page, where this is explained very well with nice diagrams.","('\n<p>It does 5 things:</p>\n<ol>\n<li>It creates a new object.  The type of this object is simply <em>object</em>.</li>\n<li>It sets this new object\'s internal, inaccessible, <code>[[prototype]]</code> (i.e. <code>__proto__</code>) property to be the constructor function\'s external, accessible, <code>prototype</code> object (every function object automatically has a <code>prototype</code> property).</li>\n<li>It makes the <code>this</code> variable point to the newly created object.</li>\n<li>It executes the constructor function, using the newly created object whenever <code>this</code> is mentioned.</li>\n<li>It returns the newly created object, unless the constructor function returns a non-<code>null</code> object reference. In this case, that object reference is returned instead.</li>\n</ol>\n<p>Note: <em>constructor function</em> refers to the function after the <code>new</code> keyword, as in</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ConstructorFunction</span>(arg1, arg2)\n</code></pre>\n<p>Once this is done, if an undefined property of the new object is requested, the script will check the object\'s <code>[[prototype]]</code> object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript.</p>\n<p>The most difficult part about this is point number 2.  Every object (including functions) has this internal property called <code>[[prototype]]</code>. It can <em>only</em> be set at object creation time, either with <code>new</code>, with <code>Object.create</code>, or based on the literal (functions default to <code>Function.prototype</code>, numbers to <code>Number.prototype</code>, etc.). It can only be read with <code>Object.getPrototypeOf(someObject)</code>. There is <em>no</em> other way to get or set this value.</p>\n<p>Functions, in addition to the hidden <code>[[prototype]]</code> property, also have a property called <em>prototype</em>, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.</p>\n<hr>\n<p>Here is an example:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">ObjMaker</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) { <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">a</span> = <span class=""hljs-string"">\'first\'</span>; };\n<span class=""hljs-comment"">// `ObjMaker` is just a function, there\'s nothing special about it</span>\n<span class=""hljs-comment"">// that makes it a constructor.</span>\n\n<span class=""hljs-title class_"">ObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">b</span> = <span class=""hljs-string"">\'second\'</span>;\n<span class=""hljs-comment"">// like all functions, ObjMaker has an accessible `prototype` property that </span>\n<span class=""hljs-comment"">// we can alter. I just added a property called \'b\' to it. Like </span>\n<span class=""hljs-comment"">// all objects, ObjMaker also has an inaccessible `[[prototype]]` property</span>\n<span class=""hljs-comment"">// that we can\'t do anything with</span>\n\nobj1 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>();\n<span class=""hljs-comment"">// 3 things just happened.</span>\n<span class=""hljs-comment"">// A new, empty object was created called `obj1`.  At first `obj1` </span>\n<span class=""hljs-comment"">// was just `{}`. The `[[prototype]]` property of `obj1` was then set to the current</span>\n<span class=""hljs-comment"">// object value of the `ObjMaker.prototype` (if `ObjMaker.prototype` is later</span>\n<span class=""hljs-comment"">// assigned a new object value, `obj1`\'s `[[prototype]]` will not change, but you</span>\n<span class=""hljs-comment"">// can alter the properties of `ObjMaker.prototype` to add to both the</span>\n<span class=""hljs-comment"">// `prototype` and `[[prototype]]`). The `ObjMaker` function was executed, with</span>\n<span class=""hljs-comment"">// `obj1` in place of `this`... so `obj1.a` was set to \'first\'.</span>\n\nobj1.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\'</span>\nobj1.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// `obj1` doesn\'t have a property called \'b\', so JavaScript checks </span>\n<span class=""hljs-comment"">// its `[[prototype]]`. Its `[[prototype]]` is the same as `ObjMaker.prototype`</span>\n<span class=""hljs-comment"">// `ObjMaker.prototype` has a property called \'b\' with value \'second\'</span>\n<span class=""hljs-comment"">// returns \'second\'</span>\n</code></pre>\n<p>It\'s like class inheritance because now, any objects you make using <code>new ObjMaker()</code> will also appear to have inherited the \'b\' property.</p>\n<p>If you want something like a subclass, then you do this:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">SubObjMaker</span> = <span class=""hljs-keyword"">function</span> (<span class=""hljs-params""></span>) {};\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">ObjMaker</span>(); <span class=""hljs-comment"">// note: this pattern is deprecated!</span>\n<span class=""hljs-comment"">// Because we used \'new\', the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is now set to the object value of ObjMaker.prototype.</span>\n<span class=""hljs-comment"">// The modern way to do this is with Object.create(), which was added in ECMAScript 5:</span>\n<span class=""hljs-comment"">// SubObjMaker.prototype = Object.create(ObjMaker.prototype);</span>\n\n<span class=""hljs-title class_"">SubObjMaker</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">c</span> = <span class=""hljs-string"">\'third\'</span>;  \nobj2 = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">SubObjMaker</span>();\n<span class=""hljs-comment"">// [[prototype]] property of obj2 is now set to SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// Remember that the [[prototype]] property of SubObjMaker.prototype</span>\n<span class=""hljs-comment"">// is ObjMaker.prototype. So now obj2 has a prototype chain!</span>\n<span class=""hljs-comment"">// obj2 ---&gt; SubObjMaker.prototype ---&gt; ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">c</span>;\n<span class=""hljs-comment"">// returns \'third\', from SubObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">b</span>;\n<span class=""hljs-comment"">// returns \'second\', from ObjMaker.prototype</span>\n\nobj2.<span class=""hljs-property"">a</span>;\n<span class=""hljs-comment"">// returns \'first\', from SubObjMaker.prototype, because SubObjMaker.prototype </span>\n<span class=""hljs-comment"">// was created with the ObjMaker function, which assigned a for us</span>\n</code></pre>\n<hr>\n<p>I read a ton of rubbish on this subject before finally finding <a href=""http://joost.zeekat.nl/constructors-considered-mildly-confusing.html"" rel=""noreferrer"">this page</a>, where this is explained very well with nice diagrams.</p>\n    ',)","2011-04-14 14:55:40Z, License: CC BY-SA 3.0","('2291',)","('33037798',)",There is a note that says Notice that this pattern is deprecated!. What is the correct up-to-date pattern to set the prototype of a class?,"('\n                \n                <span class=""comment-copy"">There is a note that says <code>Notice that this pattern is deprecated!</code>. What is the correct up-to-date pattern to set the prototype of a class?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/108374/tom-pa%c5%beourek"" title=""9,442 reputation"" class=""comment-user"">Tom Pažourek</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment33037798_3658673"" aria-label=""Link to comment""><span title=""2014-02-17 12:18:41Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Feb 17, 2014 at 12:18</span></a></span>\n            ',)","Feb 17, 2014 at 12:18","('7',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
181,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646957.0,"Suppose you have this function:
var Foo = function(){
  this.A = 1;
  this.B = 2;
};
If you call this as a stand-alone function like so:
Foo();
Executing this function will add two properties to the window object (A and B). It adds it to the window because window is the object that called the function when you execute it like that, and this in a function is the object that called the function. In JavaScript at least.
Now, call it like this with new:
var bar = new Foo();
When you add new to a function call, a new object is created (just var bar = new Object()) and the this within the function points to the new Object you just created, instead of to the object that called the function. So bar is now an object with the properties A and B. Any function can be a constructor; it just doesn't always make sense.","('\n<p>Suppose you have this function:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> <span class=""hljs-title class_"">Foo</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>){\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">A</span> = <span class=""hljs-number"">1</span>;\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">B</span> = <span class=""hljs-number"">2</span>;\n};\n</code></pre>\n<p>If you call this as a stand-alone function like so:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>Executing this function will add two properties to the <code>window</code> object (<code>A</code> and <code>B</code>). It adds it to the <code>window</code> because <code>window</code> is the object that called the function when you execute it like that, and <code>this</code> in a function is the object that called the function. In JavaScript at least.</p>\n<p>Now, call it like this with <code>new</code>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> bar = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>When you add <code>new</code> to a function call, a new object is created (just <code>var bar = new Object()</code>) and the <code>this</code> within the function points to the new <code>Object</code> you just created, instead of to the object that called the function. So <code>bar</code> is now an object with the properties <code>A</code> and <code>B</code>. Any function can be a constructor; it just doesn\'t always make sense.</p>\n    ',)","2013-01-21 13:24:27Z, License: CC BY-SA 3.0","('449',)",,,,,,answer,1646698,What is the 'new' keyword in JavaScript?,50,54,81
182,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646957.0,"Suppose you have this function:
var Foo = function(){
  this.A = 1;
  this.B = 2;
};
If you call this as a stand-alone function like so:
Foo();
Executing this function will add two properties to the window object (A and B). It adds it to the window because window is the object that called the function when you execute it like that, and this in a function is the object that called the function. In JavaScript at least.
Now, call it like this with new:
var bar = new Foo();
When you add new to a function call, a new object is created (just var bar = new Object()) and the this within the function points to the new Object you just created, instead of to the object that called the function. So bar is now an object with the properties A and B. Any function can be a constructor; it just doesn't always make sense.","('\n<p>Suppose you have this function:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> <span class=""hljs-title class_"">Foo</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>){\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">A</span> = <span class=""hljs-number"">1</span>;\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">B</span> = <span class=""hljs-number"">2</span>;\n};\n</code></pre>\n<p>If you call this as a stand-alone function like so:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>Executing this function will add two properties to the <code>window</code> object (<code>A</code> and <code>B</code>). It adds it to the <code>window</code> because <code>window</code> is the object that called the function when you execute it like that, and <code>this</code> in a function is the object that called the function. In JavaScript at least.</p>\n<p>Now, call it like this with <code>new</code>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> bar = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>When you add <code>new</code> to a function call, a new object is created (just <code>var bar = new Object()</code>) and the <code>this</code> within the function points to the new <code>Object</code> you just created, instead of to the object that called the function. So <code>bar</code> is now an object with the properties <code>A</code> and <code>B</code>. Any function can be a constructor; it just doesn\'t always make sense.</p>\n    ',)","2013-01-21 13:24:27Z, License: CC BY-SA 3.0","('449',)","('20104470',)",Depends on execution context. In my case (Qt scripting) it's just a global object.,"('\n                \n                <span class=""comment-copy"">Depends on execution context. In my case (Qt scripting) it\'s just a global object.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/627327/maksymb"" title=""1,267 reputation"" class=""comment-user"">MaksymB</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment20104470_1646957"" aria-label=""Link to comment""><span title=""2013-01-21 13:24:27Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jan 21, 2013 at 13:24</span></a></span>\n            ',)","Jan 21, 2013 at 13:24","('8',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
183,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646957.0,"Suppose you have this function:
var Foo = function(){
  this.A = 1;
  this.B = 2;
};
If you call this as a stand-alone function like so:
Foo();
Executing this function will add two properties to the window object (A and B). It adds it to the window because window is the object that called the function when you execute it like that, and this in a function is the object that called the function. In JavaScript at least.
Now, call it like this with new:
var bar = new Foo();
When you add new to a function call, a new object is created (just var bar = new Object()) and the this within the function points to the new Object you just created, instead of to the object that called the function. So bar is now an object with the properties A and B. Any function can be a constructor; it just doesn't always make sense.","('\n<p>Suppose you have this function:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> <span class=""hljs-title class_"">Foo</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>){\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">A</span> = <span class=""hljs-number"">1</span>;\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">B</span> = <span class=""hljs-number"">2</span>;\n};\n</code></pre>\n<p>If you call this as a stand-alone function like so:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>Executing this function will add two properties to the <code>window</code> object (<code>A</code> and <code>B</code>). It adds it to the <code>window</code> because <code>window</code> is the object that called the function when you execute it like that, and <code>this</code> in a function is the object that called the function. In JavaScript at least.</p>\n<p>Now, call it like this with <code>new</code>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> bar = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>When you add <code>new</code> to a function call, a new object is created (just <code>var bar = new Object()</code>) and the <code>this</code> within the function points to the new <code>Object</code> you just created, instead of to the object that called the function. So <code>bar</code> is now an object with the properties <code>A</code> and <code>B</code>. Any function can be a constructor; it just doesn\'t always make sense.</p>\n    ',)","2013-01-21 13:24:27Z, License: CC BY-SA 3.0","('449',)","('26045938',)",will this cause more memory usage?,"('\n                \n                <span class=""comment-copy"">will this cause more memory usage?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1099531/j%c3%bcrgen-paul"" title=""14,109 reputation"" class=""comment-user"">Jürgen Paul</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment26045938_1646957"" aria-label=""Link to comment""><span title=""2013-07-24 19:20:44Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jul 24, 2013 at 19:20</span></a></span>\n            ',)","Jul 24, 2013 at 19:20","('4',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
184,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646957.0,"Suppose you have this function:
var Foo = function(){
  this.A = 1;
  this.B = 2;
};
If you call this as a stand-alone function like so:
Foo();
Executing this function will add two properties to the window object (A and B). It adds it to the window because window is the object that called the function when you execute it like that, and this in a function is the object that called the function. In JavaScript at least.
Now, call it like this with new:
var bar = new Foo();
When you add new to a function call, a new object is created (just var bar = new Object()) and the this within the function points to the new Object you just created, instead of to the object that called the function. So bar is now an object with the properties A and B. Any function can be a constructor; it just doesn't always make sense.","('\n<p>Suppose you have this function:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> <span class=""hljs-title class_"">Foo</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>){\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">A</span> = <span class=""hljs-number"">1</span>;\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">B</span> = <span class=""hljs-number"">2</span>;\n};\n</code></pre>\n<p>If you call this as a stand-alone function like so:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>Executing this function will add two properties to the <code>window</code> object (<code>A</code> and <code>B</code>). It adds it to the <code>window</code> because <code>window</code> is the object that called the function when you execute it like that, and <code>this</code> in a function is the object that called the function. In JavaScript at least.</p>\n<p>Now, call it like this with <code>new</code>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> bar = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>When you add <code>new</code> to a function call, a new object is created (just <code>var bar = new Object()</code>) and the <code>this</code> within the function points to the new <code>Object</code> you just created, instead of to the object that called the function. So <code>bar</code> is now an object with the properties <code>A</code> and <code>B</code>. Any function can be a constructor; it just doesn\'t always make sense.</p>\n    ',)","2013-01-21 13:24:27Z, License: CC BY-SA 3.0","('449',)","('64476658',)",because window is the object that called the function - must be: because window is the object that contains the function.,"('\n                \n                <span class=""comment-copy""><i>because window is the object that called the function</i> - must be: because window is the object that <b>contains</b> the function.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3948862/d%c3%a1vid-horv%c3%a1th"" title=""4,000 reputation"" class=""comment-user"">Dávid Horváth</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment64476658_1646957"" aria-label=""Link to comment""><span title=""2016-07-23 13:22:05Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jul 23, 2016 at 13:22</span></a></span>\n            ',)","Jul 23, 2016 at 13:22","('3',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
185,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646957.0,"Suppose you have this function:
var Foo = function(){
  this.A = 1;
  this.B = 2;
};
If you call this as a stand-alone function like so:
Foo();
Executing this function will add two properties to the window object (A and B). It adds it to the window because window is the object that called the function when you execute it like that, and this in a function is the object that called the function. In JavaScript at least.
Now, call it like this with new:
var bar = new Foo();
When you add new to a function call, a new object is created (just var bar = new Object()) and the this within the function points to the new Object you just created, instead of to the object that called the function. So bar is now an object with the properties A and B. Any function can be a constructor; it just doesn't always make sense.","('\n<p>Suppose you have this function:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> <span class=""hljs-title class_"">Foo</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>){\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">A</span> = <span class=""hljs-number"">1</span>;\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">B</span> = <span class=""hljs-number"">2</span>;\n};\n</code></pre>\n<p>If you call this as a stand-alone function like so:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>Executing this function will add two properties to the <code>window</code> object (<code>A</code> and <code>B</code>). It adds it to the <code>window</code> because <code>window</code> is the object that called the function when you execute it like that, and <code>this</code> in a function is the object that called the function. In JavaScript at least.</p>\n<p>Now, call it like this with <code>new</code>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> bar = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>When you add <code>new</code> to a function call, a new object is created (just <code>var bar = new Object()</code>) and the <code>this</code> within the function points to the new <code>Object</code> you just created, instead of to the object that called the function. So <code>bar</code> is now an object with the properties <code>A</code> and <code>B</code>. Any function can be a constructor; it just doesn\'t always make sense.</p>\n    ',)","2013-01-21 13:24:27Z, License: CC BY-SA 3.0","('449',)","('79271440',)","@Taurus In a web browser a non-method function will be a method of window implicitly. Even in a closure, even if anonymus. However, in the example it is a simple method invocation on window: Foo(); => [default context].Foo(); => window.Foo();. In this expression window is the context (not only the caller, which does not matter).","('\n                \n                <span class=""comment-copy"">@Taurus In a web browser a non-method function will be a method of <code>window</code> implicitly. Even in a closure, even if anonymus. However, in the example it is a simple method invocation on window: <code>Foo();</code> =&gt; <code>[default context].Foo();</code> =&gt; <code>window.Foo();</code>.  In this expression <code>window</code> is the <i>context</i> (not only the <i>caller</i>, which does not matter).</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3948862/d%c3%a1vid-horv%c3%a1th"" title=""4,000 reputation"" class=""comment-user"">Dávid Horváth</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment79271440_1646957"" aria-label=""Link to comment""><span title=""2017-09-11 11:47:02Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Sep 11, 2017 at 11:47</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Sep 11, 2017 at 11:47","('3',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
186,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646957.0,"Suppose you have this function:
var Foo = function(){
  this.A = 1;
  this.B = 2;
};
If you call this as a stand-alone function like so:
Foo();
Executing this function will add two properties to the window object (A and B). It adds it to the window because window is the object that called the function when you execute it like that, and this in a function is the object that called the function. In JavaScript at least.
Now, call it like this with new:
var bar = new Foo();
When you add new to a function call, a new object is created (just var bar = new Object()) and the this within the function points to the new Object you just created, instead of to the object that called the function. So bar is now an object with the properties A and B. Any function can be a constructor; it just doesn't always make sense.","('\n<p>Suppose you have this function:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> <span class=""hljs-title class_"">Foo</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>){\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">A</span> = <span class=""hljs-number"">1</span>;\n  <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">B</span> = <span class=""hljs-number"">2</span>;\n};\n</code></pre>\n<p>If you call this as a stand-alone function like so:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>Executing this function will add two properties to the <code>window</code> object (<code>A</code> and <code>B</code>). It adds it to the <code>window</code> because <code>window</code> is the object that called the function when you execute it like that, and <code>this</code> in a function is the object that called the function. In JavaScript at least.</p>\n<p>Now, call it like this with <code>new</code>:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> bar = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Foo</span>();\n</code></pre>\n<p>When you add <code>new</code> to a function call, a new object is created (just <code>var bar = new Object()</code>) and the <code>this</code> within the function points to the new <code>Object</code> you just created, instead of to the object that called the function. So <code>bar</code> is now an object with the properties <code>A</code> and <code>B</code>. Any function can be a constructor; it just doesn\'t always make sense.</p>\n    ',)","2013-01-21 13:24:27Z, License: CC BY-SA 3.0","('449',)","('79272025',)","@Taurus Basicly yes. However in ECMA 6 and 7 things are more complex (see lambdas, classes, etc).","('\n                \n                <span class=""comment-copy"">@Taurus Basicly yes. However in ECMA 6 and 7 things are more complex (see lambdas, classes, etc).</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3948862/d%c3%a1vid-horv%c3%a1th"" title=""4,000 reputation"" class=""comment-user"">Dávid Horváth</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment79272025_1646957"" aria-label=""Link to comment""><span title=""2017-09-11 12:00:32Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Sep 11, 2017 at 12:00</span></a></span>\n            ',)","Sep 11, 2017 at 12:00","('2',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
187,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,17225654.0,"In addition to Daniel Howard's answer, here is what new does (or at least seems to do):
function New(func) {
    var res = {};
    if (func.prototype !== null) {
        res.__proto__ = func.prototype;
    }
    var ret = func.apply(res, Array.prototype.slice.call(arguments, 1));
    if ((typeof ret === ""object"" || typeof ret === ""function"") && ret !== null) {
        return ret;
    }
    return res;
}
While
var obj = New(A, 1, 2);
is equivalent to
var obj = new A(1, 2);","('\n<p>In addition to <a href=""https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript/3658673#3658673"">Daniel Howard\'s answer</a>, here is what <code>new</code> does (or at least seems to do):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">New</span>(<span class=""hljs-params"">func</span>) {\n    <span class=""hljs-keyword"">var</span> res = {};\n    <span class=""hljs-keyword"">if</span> (func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> !== <span class=""hljs-literal"">null</span>) {\n        res.<span class=""hljs-property"">__proto__</span> = func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>;\n    }\n    <span class=""hljs-keyword"">var</span> ret = func.<span class=""hljs-title function_"">apply</span>(res, <span class=""hljs-title class_"">Array</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">slice</span>.<span class=""hljs-title function_"">call</span>(<span class=""hljs-variable language_"">arguments</span>, <span class=""hljs-number"">1</span>));\n    <span class=""hljs-keyword"">if</span> ((<span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""object""</span> || <span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""function""</span>) &amp;&amp; ret !== <span class=""hljs-literal"">null</span>) {\n        <span class=""hljs-keyword"">return</span> ret;\n    }\n    <span class=""hljs-keyword"">return</span> res;\n}\n</code></pre>\n<p>While</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-title class_"">New</span>(A, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n<p>is equivalent to</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n    ',)","2013-10-20 10:11:10Z, License: CC BY-SA 3.0","('178',)",,,,,,answer,1646698,What is the 'new' keyword in JavaScript?,50,54,81
188,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,17225654.0,"In addition to Daniel Howard's answer, here is what new does (or at least seems to do):
function New(func) {
    var res = {};
    if (func.prototype !== null) {
        res.__proto__ = func.prototype;
    }
    var ret = func.apply(res, Array.prototype.slice.call(arguments, 1));
    if ((typeof ret === ""object"" || typeof ret === ""function"") && ret !== null) {
        return ret;
    }
    return res;
}
While
var obj = New(A, 1, 2);
is equivalent to
var obj = new A(1, 2);","('\n<p>In addition to <a href=""https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript/3658673#3658673"">Daniel Howard\'s answer</a>, here is what <code>new</code> does (or at least seems to do):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">New</span>(<span class=""hljs-params"">func</span>) {\n    <span class=""hljs-keyword"">var</span> res = {};\n    <span class=""hljs-keyword"">if</span> (func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> !== <span class=""hljs-literal"">null</span>) {\n        res.<span class=""hljs-property"">__proto__</span> = func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>;\n    }\n    <span class=""hljs-keyword"">var</span> ret = func.<span class=""hljs-title function_"">apply</span>(res, <span class=""hljs-title class_"">Array</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">slice</span>.<span class=""hljs-title function_"">call</span>(<span class=""hljs-variable language_"">arguments</span>, <span class=""hljs-number"">1</span>));\n    <span class=""hljs-keyword"">if</span> ((<span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""object""</span> || <span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""function""</span>) &amp;&amp; ret !== <span class=""hljs-literal"">null</span>) {\n        <span class=""hljs-keyword"">return</span> ret;\n    }\n    <span class=""hljs-keyword"">return</span> res;\n}\n</code></pre>\n<p>While</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-title class_"">New</span>(A, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n<p>is equivalent to</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n    ',)","2013-10-20 10:11:10Z, License: CC BY-SA 3.0","('178',)","('28884020',)",I found that javascript is easier to understand than english :v,"('\n                \n                <span class=""comment-copy"">I found that javascript is easier to understand than english :v</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/813080/damphat"" title=""17,946 reputation"" class=""comment-user"">damphat</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment28884020_17225654"" aria-label=""Link to comment""><span title=""2013-10-20 10:11:10Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Oct 20, 2013 at 10:11</span></a></span>\n            ',)","Oct 20, 2013 at 10:11","('78',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
189,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,17225654.0,"In addition to Daniel Howard's answer, here is what new does (or at least seems to do):
function New(func) {
    var res = {};
    if (func.prototype !== null) {
        res.__proto__ = func.prototype;
    }
    var ret = func.apply(res, Array.prototype.slice.call(arguments, 1));
    if ((typeof ret === ""object"" || typeof ret === ""function"") && ret !== null) {
        return ret;
    }
    return res;
}
While
var obj = New(A, 1, 2);
is equivalent to
var obj = new A(1, 2);","('\n<p>In addition to <a href=""https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript/3658673#3658673"">Daniel Howard\'s answer</a>, here is what <code>new</code> does (or at least seems to do):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">New</span>(<span class=""hljs-params"">func</span>) {\n    <span class=""hljs-keyword"">var</span> res = {};\n    <span class=""hljs-keyword"">if</span> (func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> !== <span class=""hljs-literal"">null</span>) {\n        res.<span class=""hljs-property"">__proto__</span> = func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>;\n    }\n    <span class=""hljs-keyword"">var</span> ret = func.<span class=""hljs-title function_"">apply</span>(res, <span class=""hljs-title class_"">Array</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">slice</span>.<span class=""hljs-title function_"">call</span>(<span class=""hljs-variable language_"">arguments</span>, <span class=""hljs-number"">1</span>));\n    <span class=""hljs-keyword"">if</span> ((<span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""object""</span> || <span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""function""</span>) &amp;&amp; ret !== <span class=""hljs-literal"">null</span>) {\n        <span class=""hljs-keyword"">return</span> ret;\n    }\n    <span class=""hljs-keyword"">return</span> res;\n}\n</code></pre>\n<p>While</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-title class_"">New</span>(A, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n<p>is equivalent to</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n    ',)","2013-10-20 10:11:10Z, License: CC BY-SA 3.0","('178',)","('34784640',)",Excellent answer. I have one tiny question: How can it be possible for func.prototype to be null? Could you please elaborate a bit on that?,"('\n                \n                <span class=""comment-copy"">Excellent answer. I have one tiny question: How can it be possible for <code>func.prototype</code> to be <code>null</code>? Could you please elaborate a bit on that?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/108374/tom-pa%c5%beourek"" title=""9,442 reputation"" class=""comment-user"">Tom Pažourek</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment34784640_17225654"" aria-label=""Link to comment""><span title=""2014-04-02 11:12:10Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 2, 2014 at 11:12</span></a></span>\n            ',)","Apr 2, 2014 at 11:12","('1',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
190,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,17225654.0,"In addition to Daniel Howard's answer, here is what new does (or at least seems to do):
function New(func) {
    var res = {};
    if (func.prototype !== null) {
        res.__proto__ = func.prototype;
    }
    var ret = func.apply(res, Array.prototype.slice.call(arguments, 1));
    if ((typeof ret === ""object"" || typeof ret === ""function"") && ret !== null) {
        return ret;
    }
    return res;
}
While
var obj = New(A, 1, 2);
is equivalent to
var obj = new A(1, 2);","('\n<p>In addition to <a href=""https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript/3658673#3658673"">Daniel Howard\'s answer</a>, here is what <code>new</code> does (or at least seems to do):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">New</span>(<span class=""hljs-params"">func</span>) {\n    <span class=""hljs-keyword"">var</span> res = {};\n    <span class=""hljs-keyword"">if</span> (func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> !== <span class=""hljs-literal"">null</span>) {\n        res.<span class=""hljs-property"">__proto__</span> = func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>;\n    }\n    <span class=""hljs-keyword"">var</span> ret = func.<span class=""hljs-title function_"">apply</span>(res, <span class=""hljs-title class_"">Array</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">slice</span>.<span class=""hljs-title function_"">call</span>(<span class=""hljs-variable language_"">arguments</span>, <span class=""hljs-number"">1</span>));\n    <span class=""hljs-keyword"">if</span> ((<span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""object""</span> || <span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""function""</span>) &amp;&amp; ret !== <span class=""hljs-literal"">null</span>) {\n        <span class=""hljs-keyword"">return</span> ret;\n    }\n    <span class=""hljs-keyword"">return</span> res;\n}\n</code></pre>\n<p>While</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-title class_"">New</span>(A, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n<p>is equivalent to</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n    ',)","2013-10-20 10:11:10Z, License: CC BY-SA 3.0","('178',)","('35756673',)","@tomp you could override the prototype property, by simply writing A.prototype = null; In that case new A() will result in on object, thats internal prototype points to the Object object: jsfiddle.net/Mk42Z","('\n                \n                <span class=""comment-copy"">@tomp you could override the prototype property, by simply writing <code>A.prototype = null;</code> In that case <code>new A()</code> will result in on object,  thats internal prototype points to the <code>Object</code> object: <a href=""http://jsfiddle.net/Mk42Z/"" rel=""nofollow noreferrer"">jsfiddle.net/Mk42Z</a></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1258878/basilikum"" title=""10,298 reputation"" class=""comment-user"">basilikum</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment35756673_17225654"" aria-label=""Link to comment""><span title=""2014-04-28 18:19:32Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 28, 2014 at 18:19</span></a></span>\n            ',)","Apr 28, 2014 at 18:19","('7',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
191,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,17225654.0,"In addition to Daniel Howard's answer, here is what new does (or at least seems to do):
function New(func) {
    var res = {};
    if (func.prototype !== null) {
        res.__proto__ = func.prototype;
    }
    var ret = func.apply(res, Array.prototype.slice.call(arguments, 1));
    if ((typeof ret === ""object"" || typeof ret === ""function"") && ret !== null) {
        return ret;
    }
    return res;
}
While
var obj = New(A, 1, 2);
is equivalent to
var obj = new A(1, 2);","('\n<p>In addition to <a href=""https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript/3658673#3658673"">Daniel Howard\'s answer</a>, here is what <code>new</code> does (or at least seems to do):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">New</span>(<span class=""hljs-params"">func</span>) {\n    <span class=""hljs-keyword"">var</span> res = {};\n    <span class=""hljs-keyword"">if</span> (func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> !== <span class=""hljs-literal"">null</span>) {\n        res.<span class=""hljs-property"">__proto__</span> = func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>;\n    }\n    <span class=""hljs-keyword"">var</span> ret = func.<span class=""hljs-title function_"">apply</span>(res, <span class=""hljs-title class_"">Array</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">slice</span>.<span class=""hljs-title function_"">call</span>(<span class=""hljs-variable language_"">arguments</span>, <span class=""hljs-number"">1</span>));\n    <span class=""hljs-keyword"">if</span> ((<span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""object""</span> || <span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""function""</span>) &amp;&amp; ret !== <span class=""hljs-literal"">null</span>) {\n        <span class=""hljs-keyword"">return</span> ret;\n    }\n    <span class=""hljs-keyword"">return</span> res;\n}\n</code></pre>\n<p>While</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-title class_"">New</span>(A, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n<p>is equivalent to</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n    ',)","2013-10-20 10:11:10Z, License: CC BY-SA 3.0","('178',)","('53875129',)","The typeof check might be wrong because a host object could produce something different than ""object"" or ""function"". To test if something is an object, I prefer Object(ret) === ret.","('\n                \n                <span class=""comment-copy"">The typeof check might be wrong because a host object could produce something different than ""object"" or ""function"". To test if something is an object, I prefer <code>Object(ret) === ret</code>.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1529630/oriol"" title=""268,720 reputation"" class=""comment-user"">Oriol</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment53875129_17225654"" aria-label=""Link to comment""><span title=""2015-10-08 21:40:25Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Oct 8, 2015 at 21:40</span></a></span>\n            ',)","Oct 8, 2015 at 21:40","('3',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
192,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,17225654.0,"In addition to Daniel Howard's answer, here is what new does (or at least seems to do):
function New(func) {
    var res = {};
    if (func.prototype !== null) {
        res.__proto__ = func.prototype;
    }
    var ret = func.apply(res, Array.prototype.slice.call(arguments, 1));
    if ((typeof ret === ""object"" || typeof ret === ""function"") && ret !== null) {
        return ret;
    }
    return res;
}
While
var obj = New(A, 1, 2);
is equivalent to
var obj = new A(1, 2);","('\n<p>In addition to <a href=""https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript/3658673#3658673"">Daniel Howard\'s answer</a>, here is what <code>new</code> does (or at least seems to do):</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">New</span>(<span class=""hljs-params"">func</span>) {\n    <span class=""hljs-keyword"">var</span> res = {};\n    <span class=""hljs-keyword"">if</span> (func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span> !== <span class=""hljs-literal"">null</span>) {\n        res.<span class=""hljs-property"">__proto__</span> = func.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>;\n    }\n    <span class=""hljs-keyword"">var</span> ret = func.<span class=""hljs-title function_"">apply</span>(res, <span class=""hljs-title class_"">Array</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">slice</span>.<span class=""hljs-title function_"">call</span>(<span class=""hljs-variable language_"">arguments</span>, <span class=""hljs-number"">1</span>));\n    <span class=""hljs-keyword"">if</span> ((<span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""object""</span> || <span class=""hljs-keyword"">typeof</span> ret === <span class=""hljs-string"">""function""</span>) &amp;&amp; ret !== <span class=""hljs-literal"">null</span>) {\n        <span class=""hljs-keyword"">return</span> ret;\n    }\n    <span class=""hljs-keyword"">return</span> res;\n}\n</code></pre>\n<p>While</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-title class_"">New</span>(A, <span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n<p>is equivalent to</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> obj = <span class=""hljs-keyword"">new</span> <span class=""hljs-title function_"">A</span>(<span class=""hljs-number"">1</span>, <span class=""hljs-number"">2</span>);\n</code></pre>\n    ',)","2013-10-20 10:11:10Z, License: CC BY-SA 3.0","('178',)","('53875438',)","@Oriol thank you for the comment. It is true what you say and any actual test should be done in more robust way. However, I think for this conceptual answer, the typeof test just makes it easier to understand what is going on behind the scenes.","('\n                \n                <span class=""comment-copy"">@Oriol thank you for the comment. It is true what you say and any actual test should be done in more robust way. However, I think for this conceptual answer, the <code>typeof</code> test just makes it easier to understand what is going on behind the scenes.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1258878/basilikum"" title=""10,298 reputation"" class=""comment-user"">basilikum</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment53875438_17225654"" aria-label=""Link to comment""><span title=""2015-10-08 21:53:27Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Oct 8, 2015 at 21:53</span></a></span>\n            ',)","Oct 8, 2015 at 21:53","('3',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
193,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,30478240.0,"For beginners to understand it better
Try out the following code in the browser console.
function Foo() {
    return this;
}

var a = Foo();       // Returns the 'window' object
var b = new Foo();   // Returns an empty object of foo

a instanceof Window;  // True
a instanceof Foo;     // False

b instanceof Window;  // False
b instanceof Foo;     // True
Now you can read the community wiki answer :)","('\n<h3>For beginners to understand it better</h3>\n<p>Try out the following code in the browser console.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Foo</span>(<span class=""hljs-params""></span>) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-variable language_"">this</span>;\n}\n\n<span class=""hljs-keyword"">var</span> a = <span class=""hljs-title class_"">Foo</span>();       <span class=""hljs-comment"">// Returns the \'window\' object</span>\n<span class=""hljs-keyword"">var</span> b = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Foo</span>();   <span class=""hljs-comment"">// Returns an empty object of foo</span>\n\na <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Window</span>;  <span class=""hljs-comment"">// True</span>\na <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Foo</span>;     <span class=""hljs-comment"">// False</span>\n\nb <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Window</span>;  <span class=""hljs-comment"">// False</span>\nb <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Foo</span>;     <span class=""hljs-comment"">// True</span>\n</code></pre>\n<p>Now you can read the <a href=""https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript#3658673"">community wiki answer</a> :)</p>\n    ',)","2017-02-02 21:26:52Z, License: CC BY-SA 3.0","('137',)",,,,,,answer,1646698,What is the 'new' keyword in JavaScript?,50,54,81
194,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,30478240.0,"For beginners to understand it better
Try out the following code in the browser console.
function Foo() {
    return this;
}

var a = Foo();       // Returns the 'window' object
var b = new Foo();   // Returns an empty object of foo

a instanceof Window;  // True
a instanceof Foo;     // False

b instanceof Window;  // False
b instanceof Foo;     // True
Now you can read the community wiki answer :)","('\n<h3>For beginners to understand it better</h3>\n<p>Try out the following code in the browser console.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Foo</span>(<span class=""hljs-params""></span>) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-variable language_"">this</span>;\n}\n\n<span class=""hljs-keyword"">var</span> a = <span class=""hljs-title class_"">Foo</span>();       <span class=""hljs-comment"">// Returns the \'window\' object</span>\n<span class=""hljs-keyword"">var</span> b = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Foo</span>();   <span class=""hljs-comment"">// Returns an empty object of foo</span>\n\na <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Window</span>;  <span class=""hljs-comment"">// True</span>\na <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Foo</span>;     <span class=""hljs-comment"">// False</span>\n\nb <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Window</span>;  <span class=""hljs-comment"">// False</span>\nb <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Foo</span>;     <span class=""hljs-comment"">// True</span>\n</code></pre>\n<p>Now you can read the <a href=""https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript#3658673"">community wiki answer</a> :)</p>\n    ',)","2017-02-02 21:26:52Z, License: CC BY-SA 3.0","('137',)","('71200692',)",Good answer. Also - leaving out return this; yields the same output.,"('\n                \n                <span class=""comment-copy"">Good answer. Also - leaving out <code>return this;</code> yields the same output.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1678614/nelu"" title=""16,086 reputation"" class=""comment-user"">Nelu</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment71200692_30478240"" aria-label=""Link to comment""><span title=""2017-02-02 21:26:52Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Feb 2, 2017 at 21:26</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Feb 2, 2017 at 21:26","('8',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
195,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,30478240.0,"For beginners to understand it better
Try out the following code in the browser console.
function Foo() {
    return this;
}

var a = Foo();       // Returns the 'window' object
var b = new Foo();   // Returns an empty object of foo

a instanceof Window;  // True
a instanceof Foo;     // False

b instanceof Window;  // False
b instanceof Foo;     // True
Now you can read the community wiki answer :)","('\n<h3>For beginners to understand it better</h3>\n<p>Try out the following code in the browser console.</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Foo</span>(<span class=""hljs-params""></span>) {\n    <span class=""hljs-keyword"">return</span> <span class=""hljs-variable language_"">this</span>;\n}\n\n<span class=""hljs-keyword"">var</span> a = <span class=""hljs-title class_"">Foo</span>();       <span class=""hljs-comment"">// Returns the \'window\' object</span>\n<span class=""hljs-keyword"">var</span> b = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Foo</span>();   <span class=""hljs-comment"">// Returns an empty object of foo</span>\n\na <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Window</span>;  <span class=""hljs-comment"">// True</span>\na <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Foo</span>;     <span class=""hljs-comment"">// False</span>\n\nb <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Window</span>;  <span class=""hljs-comment"">// False</span>\nb <span class=""hljs-keyword"">instanceof</span> <span class=""hljs-title class_"">Foo</span>;     <span class=""hljs-comment"">// True</span>\n</code></pre>\n<p>Now you can read the <a href=""https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript#3658673"">community wiki answer</a> :)</p>\n    ',)","2017-02-02 21:26:52Z, License: CC BY-SA 3.0","('137',)","('130495724',)","And the explanation for why return this; doesn't change the behavior is that the operator new is magical in creating the new object and executing the constructor and if the return value of the constructor is undefined (no return clause or just return;) or null (special case: return null;) then the newly created object (this inside the constructor) will be used as the value of new operator, otherwise the value of new is the returned value. I don't know the rationale for this behavior but I'd guess ""due historical reasons"".","('\n                \n                <span class=""comment-copy"">And the explanation for why <code>return this;</code> doesn\'t change the behavior is that the operator <code>new</code> is magical in creating the new object and executing the constructor and <i>if</i> the return value of the constructor is <code>undefined</code> (no return clause or just <code>return;</code>) or <code>null</code> (special case: <code>return null;</code>) then the newly created object (<code>this</code> inside the constructor) will be used as the value of <code>new</code> operator, otherwise the value of <code>new</code> is the returned value. I don\'t know the rationale for this behavior but I\'d guess ""due historical reasons"".</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/334451/mikko-rantalainen"" title=""13,445 reputation"" class=""comment-user"">Mikko Rantalainen</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment130495724_30478240"" aria-label=""Link to comment""><span title=""2022-09-30 07:39:28Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Sep 30, 2022 at 7:39</span></a></span>\n                        <span title=""this comment was edited 4 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Sep 30, 2022 at 7:39","('',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
196,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646706.0,"so it's probably not for creating instances of object
It's used exactly for that. You define a function constructor like so:
function Person(name) {
    this.name = name;
}

var john = new Person('John');
However the extra benefit that ECMAScript has is you can extend with the .prototype property, so we can do something like...
Person.prototype.getName = function() { return this.name; }
All objects created from this constructor will now have a getName because of the prototype chain that they have access to.","('\n<blockquote>\n  <p>so it\'s probably not for creating\n  instances of object</p>\n</blockquote>\n\n<p>It\'s used exactly for that. You define a function constructor like so:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Person</span>(<span class=""hljs-params"">name</span>) {\n    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">name</span> = name;\n}\n\n<span class=""hljs-keyword"">var</span> john = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Person</span>(<span class=""hljs-string"">\'John\'</span>);\n</code></pre>\n\n<p>However the extra benefit that ECMAScript has is you can extend with the <code>.prototype</code> property, so we can do something like...</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Person</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">getName</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) { <span class=""hljs-keyword"">return</span> <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">name</span>; }\n</code></pre>\n\n<p>All objects created from this constructor will now have a <code>getName</code> because of the prototype chain that they have access to.</p>\n    ',)","2009-10-29 21:37:07Z, License: CC BY-SA 2.5","('41',)",,,,,,answer,1646698,What is the 'new' keyword in JavaScript?,50,54,81
197,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646706.0,"so it's probably not for creating instances of object
It's used exactly for that. You define a function constructor like so:
function Person(name) {
    this.name = name;
}

var john = new Person('John');
However the extra benefit that ECMAScript has is you can extend with the .prototype property, so we can do something like...
Person.prototype.getName = function() { return this.name; }
All objects created from this constructor will now have a getName because of the prototype chain that they have access to.","('\n<blockquote>\n  <p>so it\'s probably not for creating\n  instances of object</p>\n</blockquote>\n\n<p>It\'s used exactly for that. You define a function constructor like so:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Person</span>(<span class=""hljs-params"">name</span>) {\n    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">name</span> = name;\n}\n\n<span class=""hljs-keyword"">var</span> john = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Person</span>(<span class=""hljs-string"">\'John\'</span>);\n</code></pre>\n\n<p>However the extra benefit that ECMAScript has is you can extend with the <code>.prototype</code> property, so we can do something like...</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Person</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">getName</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) { <span class=""hljs-keyword"">return</span> <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">name</span>; }\n</code></pre>\n\n<p>All objects created from this constructor will now have a <code>getName</code> because of the prototype chain that they have access to.</p>\n    ',)","2009-10-29 21:37:07Z, License: CC BY-SA 2.5","('41',)","('1517271',)","function constructors are used like classes, there is no class keyword but you can pretty much do the same thing.","('\n                \n                <span class=""comment-copy"">function constructors are used like classes, there is no <code>class</code> keyword but you can pretty much do the same thing.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/145190/meder-omuraliev"" title=""182,316 reputation"" class=""comment-user"">meder omuraliev</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment1517271_1646706"" aria-label=""Link to comment""><span title=""2009-10-29 21:37:07Z, License: CC BY-SA 2.5"" class=""relativetime-clean"">Oct 29, 2009 at 21:37</span></a></span>\n            ',)","Oct 29, 2009 at 21:37","('8',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
198,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646706.0,"so it's probably not for creating instances of object
It's used exactly for that. You define a function constructor like so:
function Person(name) {
    this.name = name;
}

var john = new Person('John');
However the extra benefit that ECMAScript has is you can extend with the .prototype property, so we can do something like...
Person.prototype.getName = function() { return this.name; }
All objects created from this constructor will now have a getName because of the prototype chain that they have access to.","('\n<blockquote>\n  <p>so it\'s probably not for creating\n  instances of object</p>\n</blockquote>\n\n<p>It\'s used exactly for that. You define a function constructor like so:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Person</span>(<span class=""hljs-params"">name</span>) {\n    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">name</span> = name;\n}\n\n<span class=""hljs-keyword"">var</span> john = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Person</span>(<span class=""hljs-string"">\'John\'</span>);\n</code></pre>\n\n<p>However the extra benefit that ECMAScript has is you can extend with the <code>.prototype</code> property, so we can do something like...</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Person</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">getName</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) { <span class=""hljs-keyword"">return</span> <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">name</span>; }\n</code></pre>\n\n<p>All objects created from this constructor will now have a <code>getName</code> because of the prototype chain that they have access to.</p>\n    ',)","2009-10-29 21:37:07Z, License: CC BY-SA 2.5","('41',)","('1517298',)",There kindof is a class keyword - class is reserved for future use,"('\n                \n                <span class=""comment-copy"">There kindof is a class keyword - class is reserved for future use</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/24181/greg"" title=""314,558 reputation"" class=""comment-user"">Greg</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment1517298_1646706"" aria-label=""Link to comment""><span title=""2009-10-29 21:41:09Z, License: CC BY-SA 2.5"" class=""relativetime-clean"">Oct 29, 2009 at 21:41</span></a></span>\n            ',)","Oct 29, 2009 at 21:41","('2',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
199,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646706.0,"so it's probably not for creating instances of object
It's used exactly for that. You define a function constructor like so:
function Person(name) {
    this.name = name;
}

var john = new Person('John');
However the extra benefit that ECMAScript has is you can extend with the .prototype property, so we can do something like...
Person.prototype.getName = function() { return this.name; }
All objects created from this constructor will now have a getName because of the prototype chain that they have access to.","('\n<blockquote>\n  <p>so it\'s probably not for creating\n  instances of object</p>\n</blockquote>\n\n<p>It\'s used exactly for that. You define a function constructor like so:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Person</span>(<span class=""hljs-params"">name</span>) {\n    <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">name</span> = name;\n}\n\n<span class=""hljs-keyword"">var</span> john = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Person</span>(<span class=""hljs-string"">\'John\'</span>);\n</code></pre>\n\n<p>However the extra benefit that ECMAScript has is you can extend with the <code>.prototype</code> property, so we can do something like...</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-title class_"">Person</span>.<span class=""hljs-property""><span class=""hljs-keyword"">prototype</span></span>.<span class=""hljs-property"">getName</span> = <span class=""hljs-keyword"">function</span>(<span class=""hljs-params""></span>) { <span class=""hljs-keyword"">return</span> <span class=""hljs-variable language_"">this</span>.<span class=""hljs-property"">name</span>; }\n</code></pre>\n\n<p>All objects created from this constructor will now have a <code>getName</code> because of the prototype chain that they have access to.</p>\n    ',)","2009-10-29 21:37:07Z, License: CC BY-SA 2.5","('41',)","('1517303',)",Incidentally that's why you use .className not .class to set a CSS class,"('\n                \n                <span class=""comment-copy"">Incidentally that\'s why you use .className not .class to set a CSS class</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/24181/greg"" title=""314,558 reputation"" class=""comment-user"">Greg</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment1517303_1646706"" aria-label=""Link to comment""><span title=""2009-10-29 21:41:47Z, License: CC BY-SA 2.5"" class=""relativetime-clean"">Oct 29, 2009 at 21:41</span></a></span>\n            ',)","Oct 29, 2009 at 21:41","('12',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
200,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646723.0,"JavaScript is an object-oriented programming language and it's used exactly for creating instances. It's prototype-based, rather than class-based, but that does not mean that it is not object-oriented.","('\n<p>JavaScript <em>is</em> an object-oriented programming language and it\'s used exactly for creating instances. It\'s <a href=""https://en.wikipedia.org/wiki/Prototype-based_programming"" rel=""nofollow noreferrer"">prototype-based</a>, rather than <a href=""https://en.wikipedia.org/wiki/Class-based_programming"" rel=""nofollow noreferrer"">class-based</a>, but that does not mean that it is not object-oriented.</p>\n    ',)","2013-10-07 07:33:29Z, License: CC BY-SA 3.0","('29',)",,,,,,answer,1646698,What is the 'new' keyword in JavaScript?,50,54,81
201,1646698,https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript,What is the 'new' keyword in JavaScript?,"
                
<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>

<ul>
<li>What is it?</li>
<li>What problems does it solve?</li>
<li>When is it appropriate and when not?</li>
</ul>
    ","('2009-10-29 21:32:45Z',)","('1912',)",,,,,,1646723.0,"JavaScript is an object-oriented programming language and it's used exactly for creating instances. It's prototype-based, rather than class-based, but that does not mean that it is not object-oriented.","('\n<p>JavaScript <em>is</em> an object-oriented programming language and it\'s used exactly for creating instances. It\'s <a href=""https://en.wikipedia.org/wiki/Prototype-based_programming"" rel=""nofollow noreferrer"">prototype-based</a>, rather than <a href=""https://en.wikipedia.org/wiki/Class-based_programming"" rel=""nofollow noreferrer"">class-based</a>, but that does not mean that it is not object-oriented.</p>\n    ',)","2013-10-07 07:33:29Z, License: CC BY-SA 3.0","('29',)","('28442930',)","I like to say that JavaScript seems to be even more object-oriented than all those class-based languages. In JavaScript everything you write immediately becomes an object, but in class-based languages you first write declarations and only later you create specific instances (objects) of classes. And JavaScript prototype seems to vaguely remind all that VTABLE stuff for class-based languages.","('\n                \n                <span class=""comment-copy"">I like to say that JavaScript seems to be even more object-oriented than all those class-based languages. In JavaScript everything you write immediately becomes an object, but in class-based languages you first write declarations and only later you create specific instances (objects) of classes. And JavaScript prototype seems to vaguely remind all that VTABLE stuff for class-based languages.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/217823/justamartin"" title=""13,025 reputation"" class=""comment-user"">JustAMartin</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment28442930_1646723"" aria-label=""Link to comment""><span title=""2013-10-07 07:33:29Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Oct 7, 2013 at 7:33</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Oct 7, 2013 at 7:33","('9',)",answer_comment,1646698,What is the 'new' keyword in JavaScript?,50,54,81
202,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,,,,,,,,,,,post,8936984,Uint8Array to string in Javascript,62,52,81
203,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",comment-87781970,,jcubic,"Not sure if it will work, but I use <code>u8array.toString()</code> when reading files from BrowserFS that expose Uint8Array object when you call <code>fs.readFile</code>.","2018-05-17 04:08:11Z, License: CC BY-SA 4.0",,,,,,,,,,,post_comment,8936984,Uint8Array to string in Javascript,62,52,81
204,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",comment-104949851,14.0,kolen,"@jcubic for me, <code>toString</code> on <code>Uint8Array</code> returns comma-separated numbers such as <code>""91,50,48,49,57,45""</code> (Chrome 79)","2019-12-17 17:01:11Z, License: CC BY-SA 4.0",,,,,,,,,,,post_comment,8936984,Uint8Array to string in Javascript,62,52,81
205,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",comment-130772432,,Aadit M Shah,"You can convert a Node.js <code>Buffer</code> to a JavaScript string using <code>buffer.toString(""utf8"", start, end)</code> where <code>end = start + length</code>. Unfortunately, browsers don't have <code>Buffer</code>. They only have <code>Uint8Array</code>. So, for browsers you can use <code>new TextDecoder().decode(uint8array.subarray(start, end))</code>. This will work in Node.js too because <code>Buffer</code> is a subclass of <code>Uint8Array</code>.","2022-10-14 08:34:05Z, License: CC BY-SA 4.0",,,,,,,,,,,post_comment,8936984,Uint8Array to string in Javascript,62,52,81
206,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,36949791.0,"TextEncoder and TextDecoder from the Encoding standard, which is polyfilled by the stringencoding library, converts between strings and ArrayBuffers:
var uint8array = new TextEncoder().encode(""someString"");
var string = new TextDecoder().decode(uint8array);","('\n<p><code>TextEncoder</code> and <code>TextDecoder</code> from the <a href=""https://encoding.spec.whatwg.org/"" rel=""noreferrer"">Encoding standard</a>, which is polyfilled by the <a href=""https://github.com/inexorabletash/text-encoding"" rel=""noreferrer"">stringencoding library</a>, converts between strings and ArrayBuffers:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> uint8array = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextEncoder</span>().<span class=""hljs-title function_"">encode</span>(<span class=""hljs-string"">""someString""</span>);\n<span class=""hljs-keyword"">var</span> string = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextDecoder</span>().<span class=""hljs-title function_"">decode</span>(uint8array);\n</code></pre>\n    ',)","2016-11-29 06:11:40Z, License: CC BY-SA 3.0","('365',)",,,,,,answer,8936984,Uint8Array to string in Javascript,62,52,81
207,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,36949791.0,"TextEncoder and TextDecoder from the Encoding standard, which is polyfilled by the stringencoding library, converts between strings and ArrayBuffers:
var uint8array = new TextEncoder().encode(""someString"");
var string = new TextDecoder().decode(uint8array);","('\n<p><code>TextEncoder</code> and <code>TextDecoder</code> from the <a href=""https://encoding.spec.whatwg.org/"" rel=""noreferrer"">Encoding standard</a>, which is polyfilled by the <a href=""https://github.com/inexorabletash/text-encoding"" rel=""noreferrer"">stringencoding library</a>, converts between strings and ArrayBuffers:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> uint8array = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextEncoder</span>().<span class=""hljs-title function_"">encode</span>(<span class=""hljs-string"">""someString""</span>);\n<span class=""hljs-keyword"">var</span> string = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextDecoder</span>().<span class=""hljs-title function_"">decode</span>(uint8array);\n</code></pre>\n    ',)","2016-11-29 06:11:40Z, License: CC BY-SA 3.0","('365',)","('68933741',)","For anyone lazy like me, npm install text-encoding, var textEncoding = require('text-encoding');  var TextDecoder = textEncoding.TextDecoder;. No thanks.","('\n                \n                <span class=""comment-copy"">For anyone lazy like me, <code>npm install text-encoding</code>, <code>var textEncoding = require(\'text-encoding\');  var TextDecoder = textEncoding.TextDecoder;</code>. No thanks.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/906945/evan-hu"" title=""967 reputation"" class=""comment-user"">Evan Hu</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment68933741_36949791"" aria-label=""Link to comment""><span title=""2016-11-29 06:11:40Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Nov 29, 2016 at 6:11</span></a></span>\n            ',)","Nov 29, 2016 at 6:11","('51',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
208,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,36949791.0,"TextEncoder and TextDecoder from the Encoding standard, which is polyfilled by the stringencoding library, converts between strings and ArrayBuffers:
var uint8array = new TextEncoder().encode(""someString"");
var string = new TextDecoder().decode(uint8array);","('\n<p><code>TextEncoder</code> and <code>TextDecoder</code> from the <a href=""https://encoding.spec.whatwg.org/"" rel=""noreferrer"">Encoding standard</a>, which is polyfilled by the <a href=""https://github.com/inexorabletash/text-encoding"" rel=""noreferrer"">stringencoding library</a>, converts between strings and ArrayBuffers:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> uint8array = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextEncoder</span>().<span class=""hljs-title function_"">encode</span>(<span class=""hljs-string"">""someString""</span>);\n<span class=""hljs-keyword"">var</span> string = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextDecoder</span>().<span class=""hljs-title function_"">decode</span>(uint8array);\n</code></pre>\n    ',)","2016-11-29 06:11:40Z, License: CC BY-SA 3.0","('365',)","('81698453',)","beware the npm text-encoding library, webpack bundle analyzer shows the library is HUGE","('\n                \n                <span class=""comment-copy"">beware the npm text-encoding library, webpack bundle analyzer shows the library is HUGE</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2152289/wayofthefuture"" title=""8,107 reputation"" class=""comment-user"">wayofthefuture</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment81698453_36949791"" aria-label=""Link to comment""><span title=""2017-11-19 01:42:33Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Nov 19, 2017 at 1:42</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Nov 19, 2017 at 1:42","('24',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
209,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,36949791.0,"TextEncoder and TextDecoder from the Encoding standard, which is polyfilled by the stringencoding library, converts between strings and ArrayBuffers:
var uint8array = new TextEncoder().encode(""someString"");
var string = new TextDecoder().decode(uint8array);","('\n<p><code>TextEncoder</code> and <code>TextDecoder</code> from the <a href=""https://encoding.spec.whatwg.org/"" rel=""noreferrer"">Encoding standard</a>, which is polyfilled by the <a href=""https://github.com/inexorabletash/text-encoding"" rel=""noreferrer"">stringencoding library</a>, converts between strings and ArrayBuffers:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> uint8array = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextEncoder</span>().<span class=""hljs-title function_"">encode</span>(<span class=""hljs-string"">""someString""</span>);\n<span class=""hljs-keyword"">var</span> string = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextDecoder</span>().<span class=""hljs-title function_"">decode</span>(uint8array);\n</code></pre>\n    ',)","2016-11-29 06:11:40Z, License: CC BY-SA 3.0","('365',)","('100883613',)","nodejs.org/api/string_decoder.html from the example: const { StringDecoder } = require('string_decoder'); const decoder = new StringDecoder('utf8'); const cent = Buffer.from([0xC2, 0xA2]); console.log(decoder.write(cent));","('\n                \n                <span class=""comment-copy""><a href=""https://nodejs.org/api/string_decoder.html"" rel=""nofollow noreferrer"">nodejs.org/api/string_decoder.html</a> from the example: const { StringDecoder } = require(\'string_decoder\'); const decoder = new StringDecoder(\'utf8\'); const cent = Buffer.from([0xC2, 0xA2]); console.log(decoder.write(cent));</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/3282323/curist"" title=""446 reputation"" class=""comment-user"">curist</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment100883613_36949791"" aria-label=""Link to comment""><span title=""2019-07-24 15:43:15Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Jul 24, 2019 at 15:43</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Jul 24, 2019 at 15:43","('1',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
210,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,36949791.0,"TextEncoder and TextDecoder from the Encoding standard, which is polyfilled by the stringencoding library, converts between strings and ArrayBuffers:
var uint8array = new TextEncoder().encode(""someString"");
var string = new TextDecoder().decode(uint8array);","('\n<p><code>TextEncoder</code> and <code>TextDecoder</code> from the <a href=""https://encoding.spec.whatwg.org/"" rel=""noreferrer"">Encoding standard</a>, which is polyfilled by the <a href=""https://github.com/inexorabletash/text-encoding"" rel=""noreferrer"">stringencoding library</a>, converts between strings and ArrayBuffers:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> uint8array = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextEncoder</span>().<span class=""hljs-title function_"">encode</span>(<span class=""hljs-string"">""someString""</span>);\n<span class=""hljs-keyword"">var</span> string = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextDecoder</span>().<span class=""hljs-title function_"">decode</span>(uint8array);\n</code></pre>\n    ',)","2016-11-29 06:11:40Z, License: CC BY-SA 3.0","('365',)","('102629400',)","Note that Node.js added the TextEncoder/TextDecoder APIs in v11, so no need to install any extra packages if you only target current Node versions.","('\n                \n                <span class=""comment-copy"">Note that Node.js added the <code>TextEncoder</code>/<code>TextDecoder</code> APIs in v11, so no need to install any extra packages if you only target current Node versions.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2048874/loilo"" title=""13,076 reputation"" class=""comment-user"">Loilo</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment102629400_36949791"" aria-label=""Link to comment""><span title=""2019-09-26 15:38:57Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Sep 26, 2019 at 15:38</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Sep 26, 2019 at 15:38","('17',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
211,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,36949791.0,"TextEncoder and TextDecoder from the Encoding standard, which is polyfilled by the stringencoding library, converts between strings and ArrayBuffers:
var uint8array = new TextEncoder().encode(""someString"");
var string = new TextDecoder().decode(uint8array);","('\n<p><code>TextEncoder</code> and <code>TextDecoder</code> from the <a href=""https://encoding.spec.whatwg.org/"" rel=""noreferrer"">Encoding standard</a>, which is polyfilled by the <a href=""https://github.com/inexorabletash/text-encoding"" rel=""noreferrer"">stringencoding library</a>, converts between strings and ArrayBuffers:</p>\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> uint8array = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextEncoder</span>().<span class=""hljs-title function_"">encode</span>(<span class=""hljs-string"">""someString""</span>);\n<span class=""hljs-keyword"">var</span> string = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">TextDecoder</span>().<span class=""hljs-title function_"">decode</span>(uint8array);\n</code></pre>\n    ',)","2016-11-29 06:11:40Z, License: CC BY-SA 3.0","('365',)","('104595639',)","I think that nowadays the best polyfill is FastestSmallestTextEncoderDecoder, as recommended by the MDN website.","('\n                \n                <span class=""comment-copy"">I think that nowadays the best polyfill is <a href=""https://github.com/anonyco/FastestSmallestTextEncoderDecoder"" rel=""nofollow noreferrer"">FastestSmallestTextEncoderDecoder</a>, as recommended by the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder"" rel=""nofollow noreferrer"">MDN website</a>.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2160765/rosberg-linhares"" title=""3,439 reputation"" class=""comment-user"">Rosberg Linhares</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment104595639_36949791"" aria-label=""Link to comment""><span title=""2019-12-05 03:46:03Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Dec 5, 2019 at 3:46</span></a></span>\n            ',)","Dec 5, 2019 at 3:46","('3',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
212,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,22373197.0,"This should work:
// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt

/* utf.js - UTF-8 <=> UTF-16 convertion
 *
 * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
 * Version: 1.0
 * LastModified: Dec 25 1999
 * This library is free.  You can redistribute it and/or modify it.
 */

function Utf8ArrayToStr(array) {
    var out, i, len, c;
    var char2, char3;

    out = """";
    len = array.length;
    i = 0;
    while(i < len) {
    c = array[i++];
    switch(c >> 4)
    { 
      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
        // 0xxxxxxx
        out += String.fromCharCode(c);
        break;
      case 12: case 13:
        // 110x xxxx   10xx xxxx
        char2 = array[i++];
        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
        break;
      case 14:
        // 1110 xxxx  10xx xxxx  10xx xxxx
        char2 = array[i++];
        char3 = array[i++];
        out += String.fromCharCode(((c & 0x0F) << 12) |
                       ((char2 & 0x3F) << 6) |
                       ((char3 & 0x3F) << 0));
        break;
    }
    }

    return out;
}
It's somewhat cleaner as the other solutions because it doesn't use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.
Check out the JSFiddle demo.
Also see the related questions: here and here","('\n<p>This should work:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt</span>\n\n<span class=""hljs-comment"">/* utf.js - UTF-8 &lt;=&gt; UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo &lt;iz@onicos.co.jp&gt;\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Utf8ArrayToStr</span>(<span class=""hljs-params"">array</span>) {\n    <span class=""hljs-keyword"">var</span> out, i, len, c;\n    <span class=""hljs-keyword"">var</span> char2, char3;\n\n    out = <span class=""hljs-string"">""""</span>;\n    len = array.<span class=""hljs-property"">length</span>;\n    i = <span class=""hljs-number"">0</span>;\n    <span class=""hljs-keyword"">while</span>(i &lt; len) {\n    c = array[i++];\n    <span class=""hljs-keyword"">switch</span>(c &gt;&gt; <span class=""hljs-number"">4</span>)\n    { \n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">0</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">1</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">2</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">3</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">4</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">5</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">6</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">7</span>:\n        <span class=""hljs-comment"">// 0xxxxxxx</span>\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(c);\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">12</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">13</span>:\n        <span class=""hljs-comment"">// 110x xxxx   10xx xxxx</span>\n        char2 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x1F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) | (char2 &amp; <span class=""hljs-number"">0x3F</span>));\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">14</span>:\n        <span class=""hljs-comment"">// 1110 xxxx  10xx xxxx  10xx xxxx</span>\n        char2 = array[i++];\n        char3 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x0F</span>) &lt;&lt; <span class=""hljs-number"">12</span>) |\n                       ((char2 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) |\n                       ((char3 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">0</span>));\n        <span class=""hljs-keyword"">break</span>;\n    }\n    }\n\n    <span class=""hljs-keyword"">return</span> out;\n}\n</code></pre>\n\n<p>It\'s somewhat cleaner as the other solutions because it doesn\'t use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.</p>\n\n<p>Check out the <a href=""http://jsfiddle.net/3VuLx/2/"" rel=""noreferrer"">JSFiddle demo</a>.</p>\n\n<p>Also see the related questions: <a href=""https://stackoverflow.com/questions/17191945/conversion-between-utf-8-arraybuffer-and-string/22373135"">here</a> and <a href=""https://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript/22373061"">here</a></p>\n    ',)","2014-05-26 13:25:11Z, License: CC BY-SA 3.0","('52',)",,,,,,answer,8936984,Uint8Array to string in Javascript,62,52,81
213,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,22373197.0,"This should work:
// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt

/* utf.js - UTF-8 <=> UTF-16 convertion
 *
 * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
 * Version: 1.0
 * LastModified: Dec 25 1999
 * This library is free.  You can redistribute it and/or modify it.
 */

function Utf8ArrayToStr(array) {
    var out, i, len, c;
    var char2, char3;

    out = """";
    len = array.length;
    i = 0;
    while(i < len) {
    c = array[i++];
    switch(c >> 4)
    { 
      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
        // 0xxxxxxx
        out += String.fromCharCode(c);
        break;
      case 12: case 13:
        // 110x xxxx   10xx xxxx
        char2 = array[i++];
        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
        break;
      case 14:
        // 1110 xxxx  10xx xxxx  10xx xxxx
        char2 = array[i++];
        char3 = array[i++];
        out += String.fromCharCode(((c & 0x0F) << 12) |
                       ((char2 & 0x3F) << 6) |
                       ((char3 & 0x3F) << 0));
        break;
    }
    }

    return out;
}
It's somewhat cleaner as the other solutions because it doesn't use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.
Check out the JSFiddle demo.
Also see the related questions: here and here","('\n<p>This should work:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt</span>\n\n<span class=""hljs-comment"">/* utf.js - UTF-8 &lt;=&gt; UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo &lt;iz@onicos.co.jp&gt;\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Utf8ArrayToStr</span>(<span class=""hljs-params"">array</span>) {\n    <span class=""hljs-keyword"">var</span> out, i, len, c;\n    <span class=""hljs-keyword"">var</span> char2, char3;\n\n    out = <span class=""hljs-string"">""""</span>;\n    len = array.<span class=""hljs-property"">length</span>;\n    i = <span class=""hljs-number"">0</span>;\n    <span class=""hljs-keyword"">while</span>(i &lt; len) {\n    c = array[i++];\n    <span class=""hljs-keyword"">switch</span>(c &gt;&gt; <span class=""hljs-number"">4</span>)\n    { \n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">0</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">1</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">2</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">3</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">4</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">5</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">6</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">7</span>:\n        <span class=""hljs-comment"">// 0xxxxxxx</span>\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(c);\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">12</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">13</span>:\n        <span class=""hljs-comment"">// 110x xxxx   10xx xxxx</span>\n        char2 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x1F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) | (char2 &amp; <span class=""hljs-number"">0x3F</span>));\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">14</span>:\n        <span class=""hljs-comment"">// 1110 xxxx  10xx xxxx  10xx xxxx</span>\n        char2 = array[i++];\n        char3 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x0F</span>) &lt;&lt; <span class=""hljs-number"">12</span>) |\n                       ((char2 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) |\n                       ((char3 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">0</span>));\n        <span class=""hljs-keyword"">break</span>;\n    }\n    }\n\n    <span class=""hljs-keyword"">return</span> out;\n}\n</code></pre>\n\n<p>It\'s somewhat cleaner as the other solutions because it doesn\'t use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.</p>\n\n<p>Check out the <a href=""http://jsfiddle.net/3VuLx/2/"" rel=""noreferrer"">JSFiddle demo</a>.</p>\n\n<p>Also see the related questions: <a href=""https://stackoverflow.com/questions/17191945/conversion-between-utf-8-arraybuffer-and-string/22373135"">here</a> and <a href=""https://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript/22373061"">here</a></p>\n    ',)","2014-05-26 13:25:11Z, License: CC BY-SA 3.0","('52',)","('36743704',)",This seems kinda slow. But the only snippet in the universe I found that works. Good find+adoption!,"('\n                \n                <span class=""comment-copy"">This seems kinda slow. But the only snippet in the universe I found that works. Good find+adoption!</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/754174/redsandro"" title=""10,940 reputation"" class=""comment-user"">Redsandro</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment36743704_22373197"" aria-label=""Link to comment""><span title=""2014-05-26 13:25:11Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">May 26, 2014 at 13:25</span></a></span>\n            ',)","May 26, 2014 at 13:25","('6',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
214,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,22373197.0,"This should work:
// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt

/* utf.js - UTF-8 <=> UTF-16 convertion
 *
 * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
 * Version: 1.0
 * LastModified: Dec 25 1999
 * This library is free.  You can redistribute it and/or modify it.
 */

function Utf8ArrayToStr(array) {
    var out, i, len, c;
    var char2, char3;

    out = """";
    len = array.length;
    i = 0;
    while(i < len) {
    c = array[i++];
    switch(c >> 4)
    { 
      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
        // 0xxxxxxx
        out += String.fromCharCode(c);
        break;
      case 12: case 13:
        // 110x xxxx   10xx xxxx
        char2 = array[i++];
        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
        break;
      case 14:
        // 1110 xxxx  10xx xxxx  10xx xxxx
        char2 = array[i++];
        char3 = array[i++];
        out += String.fromCharCode(((c & 0x0F) << 12) |
                       ((char2 & 0x3F) << 6) |
                       ((char3 & 0x3F) << 0));
        break;
    }
    }

    return out;
}
It's somewhat cleaner as the other solutions because it doesn't use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.
Check out the JSFiddle demo.
Also see the related questions: here and here","('\n<p>This should work:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt</span>\n\n<span class=""hljs-comment"">/* utf.js - UTF-8 &lt;=&gt; UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo &lt;iz@onicos.co.jp&gt;\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Utf8ArrayToStr</span>(<span class=""hljs-params"">array</span>) {\n    <span class=""hljs-keyword"">var</span> out, i, len, c;\n    <span class=""hljs-keyword"">var</span> char2, char3;\n\n    out = <span class=""hljs-string"">""""</span>;\n    len = array.<span class=""hljs-property"">length</span>;\n    i = <span class=""hljs-number"">0</span>;\n    <span class=""hljs-keyword"">while</span>(i &lt; len) {\n    c = array[i++];\n    <span class=""hljs-keyword"">switch</span>(c &gt;&gt; <span class=""hljs-number"">4</span>)\n    { \n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">0</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">1</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">2</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">3</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">4</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">5</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">6</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">7</span>:\n        <span class=""hljs-comment"">// 0xxxxxxx</span>\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(c);\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">12</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">13</span>:\n        <span class=""hljs-comment"">// 110x xxxx   10xx xxxx</span>\n        char2 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x1F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) | (char2 &amp; <span class=""hljs-number"">0x3F</span>));\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">14</span>:\n        <span class=""hljs-comment"">// 1110 xxxx  10xx xxxx  10xx xxxx</span>\n        char2 = array[i++];\n        char3 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x0F</span>) &lt;&lt; <span class=""hljs-number"">12</span>) |\n                       ((char2 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) |\n                       ((char3 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">0</span>));\n        <span class=""hljs-keyword"">break</span>;\n    }\n    }\n\n    <span class=""hljs-keyword"">return</span> out;\n}\n</code></pre>\n\n<p>It\'s somewhat cleaner as the other solutions because it doesn\'t use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.</p>\n\n<p>Check out the <a href=""http://jsfiddle.net/3VuLx/2/"" rel=""noreferrer"">JSFiddle demo</a>.</p>\n\n<p>Also see the related questions: <a href=""https://stackoverflow.com/questions/17191945/conversion-between-utf-8-arraybuffer-and-string/22373135"">here</a> and <a href=""https://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript/22373061"">here</a></p>\n    ',)","2014-05-26 13:25:11Z, License: CC BY-SA 3.0","('52',)","('44928186',)",I don't understand why this doesn't have more upvotes. It seems eminently sensible to crank through the UTF-8 convention for small snippets. Async Blob + Filereader works great for big texts as others have indicated.,"('\n                \n                <span class=""comment-copy"">I don\'t understand why this doesn\'t have more upvotes. It seems eminently sensible to crank through the UTF-8 convention for small snippets. Async Blob + Filereader works great for big texts as others have indicated.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/568360/danhorner"" title=""83 reputation"" class=""comment-user"">DanHorner</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment44928186_22373197"" aria-label=""Link to comment""><span title=""2015-02-02 21:31:36Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Feb 2, 2015 at 21:31</span></a></span>\n            ',)","Feb 2, 2015 at 21:31","('7',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
215,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,22373197.0,"This should work:
// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt

/* utf.js - UTF-8 <=> UTF-16 convertion
 *
 * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
 * Version: 1.0
 * LastModified: Dec 25 1999
 * This library is free.  You can redistribute it and/or modify it.
 */

function Utf8ArrayToStr(array) {
    var out, i, len, c;
    var char2, char3;

    out = """";
    len = array.length;
    i = 0;
    while(i < len) {
    c = array[i++];
    switch(c >> 4)
    { 
      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
        // 0xxxxxxx
        out += String.fromCharCode(c);
        break;
      case 12: case 13:
        // 110x xxxx   10xx xxxx
        char2 = array[i++];
        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
        break;
      case 14:
        // 1110 xxxx  10xx xxxx  10xx xxxx
        char2 = array[i++];
        char3 = array[i++];
        out += String.fromCharCode(((c & 0x0F) << 12) |
                       ((char2 & 0x3F) << 6) |
                       ((char3 & 0x3F) << 0));
        break;
    }
    }

    return out;
}
It's somewhat cleaner as the other solutions because it doesn't use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.
Check out the JSFiddle demo.
Also see the related questions: here and here","('\n<p>This should work:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt</span>\n\n<span class=""hljs-comment"">/* utf.js - UTF-8 &lt;=&gt; UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo &lt;iz@onicos.co.jp&gt;\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Utf8ArrayToStr</span>(<span class=""hljs-params"">array</span>) {\n    <span class=""hljs-keyword"">var</span> out, i, len, c;\n    <span class=""hljs-keyword"">var</span> char2, char3;\n\n    out = <span class=""hljs-string"">""""</span>;\n    len = array.<span class=""hljs-property"">length</span>;\n    i = <span class=""hljs-number"">0</span>;\n    <span class=""hljs-keyword"">while</span>(i &lt; len) {\n    c = array[i++];\n    <span class=""hljs-keyword"">switch</span>(c &gt;&gt; <span class=""hljs-number"">4</span>)\n    { \n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">0</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">1</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">2</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">3</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">4</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">5</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">6</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">7</span>:\n        <span class=""hljs-comment"">// 0xxxxxxx</span>\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(c);\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">12</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">13</span>:\n        <span class=""hljs-comment"">// 110x xxxx   10xx xxxx</span>\n        char2 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x1F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) | (char2 &amp; <span class=""hljs-number"">0x3F</span>));\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">14</span>:\n        <span class=""hljs-comment"">// 1110 xxxx  10xx xxxx  10xx xxxx</span>\n        char2 = array[i++];\n        char3 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x0F</span>) &lt;&lt; <span class=""hljs-number"">12</span>) |\n                       ((char2 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) |\n                       ((char3 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">0</span>));\n        <span class=""hljs-keyword"">break</span>;\n    }\n    }\n\n    <span class=""hljs-keyword"">return</span> out;\n}\n</code></pre>\n\n<p>It\'s somewhat cleaner as the other solutions because it doesn\'t use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.</p>\n\n<p>Check out the <a href=""http://jsfiddle.net/3VuLx/2/"" rel=""noreferrer"">JSFiddle demo</a>.</p>\n\n<p>Also see the related questions: <a href=""https://stackoverflow.com/questions/17191945/conversion-between-utf-8-arraybuffer-and-string/22373135"">here</a> and <a href=""https://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript/22373061"">here</a></p>\n    ',)","2014-05-26 13:25:11Z, License: CC BY-SA 3.0","('52',)","('61465372',)",The question was how to do this without string concatenation,"('\n                \n                <span class=""comment-copy"">The question was how to do this without string concatenation</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/820956/jack-wester"" title=""5,040 reputation"" class=""comment-user owner"">Jack Wester</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment61465372_22373197"" aria-label=""Link to comment""><span title=""2016-04-30 10:34:16Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 30, 2016 at 10:34</span></a></span>\n            ',)","Apr 30, 2016 at 10:34","('4',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
216,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,22373197.0,"This should work:
// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt

/* utf.js - UTF-8 <=> UTF-16 convertion
 *
 * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
 * Version: 1.0
 * LastModified: Dec 25 1999
 * This library is free.  You can redistribute it and/or modify it.
 */

function Utf8ArrayToStr(array) {
    var out, i, len, c;
    var char2, char3;

    out = """";
    len = array.length;
    i = 0;
    while(i < len) {
    c = array[i++];
    switch(c >> 4)
    { 
      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
        // 0xxxxxxx
        out += String.fromCharCode(c);
        break;
      case 12: case 13:
        // 110x xxxx   10xx xxxx
        char2 = array[i++];
        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
        break;
      case 14:
        // 1110 xxxx  10xx xxxx  10xx xxxx
        char2 = array[i++];
        char3 = array[i++];
        out += String.fromCharCode(((c & 0x0F) << 12) |
                       ((char2 & 0x3F) << 6) |
                       ((char3 & 0x3F) << 0));
        break;
    }
    }

    return out;
}
It's somewhat cleaner as the other solutions because it doesn't use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.
Check out the JSFiddle demo.
Also see the related questions: here and here","('\n<p>This should work:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt</span>\n\n<span class=""hljs-comment"">/* utf.js - UTF-8 &lt;=&gt; UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo &lt;iz@onicos.co.jp&gt;\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Utf8ArrayToStr</span>(<span class=""hljs-params"">array</span>) {\n    <span class=""hljs-keyword"">var</span> out, i, len, c;\n    <span class=""hljs-keyword"">var</span> char2, char3;\n\n    out = <span class=""hljs-string"">""""</span>;\n    len = array.<span class=""hljs-property"">length</span>;\n    i = <span class=""hljs-number"">0</span>;\n    <span class=""hljs-keyword"">while</span>(i &lt; len) {\n    c = array[i++];\n    <span class=""hljs-keyword"">switch</span>(c &gt;&gt; <span class=""hljs-number"">4</span>)\n    { \n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">0</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">1</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">2</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">3</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">4</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">5</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">6</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">7</span>:\n        <span class=""hljs-comment"">// 0xxxxxxx</span>\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(c);\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">12</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">13</span>:\n        <span class=""hljs-comment"">// 110x xxxx   10xx xxxx</span>\n        char2 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x1F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) | (char2 &amp; <span class=""hljs-number"">0x3F</span>));\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">14</span>:\n        <span class=""hljs-comment"">// 1110 xxxx  10xx xxxx  10xx xxxx</span>\n        char2 = array[i++];\n        char3 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x0F</span>) &lt;&lt; <span class=""hljs-number"">12</span>) |\n                       ((char2 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) |\n                       ((char3 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">0</span>));\n        <span class=""hljs-keyword"">break</span>;\n    }\n    }\n\n    <span class=""hljs-keyword"">return</span> out;\n}\n</code></pre>\n\n<p>It\'s somewhat cleaner as the other solutions because it doesn\'t use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.</p>\n\n<p>Check out the <a href=""http://jsfiddle.net/3VuLx/2/"" rel=""noreferrer"">JSFiddle demo</a>.</p>\n\n<p>Also see the related questions: <a href=""https://stackoverflow.com/questions/17191945/conversion-between-utf-8-arraybuffer-and-string/22373135"">here</a> and <a href=""https://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript/22373061"">here</a></p>\n    ',)","2014-05-26 13:25:11Z, License: CC BY-SA 3.0","('52',)","('68411476',)","Works great, except it doesn't handle 4+ byte sequences, e.g. fromUTF8Array([240,159,154,133]) turns out empty (while fromUTF8Array([226,152,131])→""☃"")","('\n                \n                <span class=""comment-copy"">Works great, except it doesn\'t handle 4+ byte sequences, e.g. <code>fromUTF8Array([240,159,154,133])</code> turns out empty (while <code>fromUTF8Array([226,152,131])→""☃""</code>)</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/69663/unhammer"" title=""4,209 reputation"" class=""comment-user"">unhammer</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment68411476_22373197"" aria-label=""Link to comment""><span title=""2016-11-14 11:55:01Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Nov 14, 2016 at 11:55</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Nov 14, 2016 at 11:55","('7',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
217,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,22373197.0,"This should work:
// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt

/* utf.js - UTF-8 <=> UTF-16 convertion
 *
 * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
 * Version: 1.0
 * LastModified: Dec 25 1999
 * This library is free.  You can redistribute it and/or modify it.
 */

function Utf8ArrayToStr(array) {
    var out, i, len, c;
    var char2, char3;

    out = """";
    len = array.length;
    i = 0;
    while(i < len) {
    c = array[i++];
    switch(c >> 4)
    { 
      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
        // 0xxxxxxx
        out += String.fromCharCode(c);
        break;
      case 12: case 13:
        // 110x xxxx   10xx xxxx
        char2 = array[i++];
        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
        break;
      case 14:
        // 1110 xxxx  10xx xxxx  10xx xxxx
        char2 = array[i++];
        char3 = array[i++];
        out += String.fromCharCode(((c & 0x0F) << 12) |
                       ((char2 & 0x3F) << 6) |
                       ((char3 & 0x3F) << 0));
        break;
    }
    }

    return out;
}
It's somewhat cleaner as the other solutions because it doesn't use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.
Check out the JSFiddle demo.
Also see the related questions: here and here","('\n<p>This should work:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt</span>\n\n<span class=""hljs-comment"">/* utf.js - UTF-8 &lt;=&gt; UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo &lt;iz@onicos.co.jp&gt;\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */</span>\n\n<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">Utf8ArrayToStr</span>(<span class=""hljs-params"">array</span>) {\n    <span class=""hljs-keyword"">var</span> out, i, len, c;\n    <span class=""hljs-keyword"">var</span> char2, char3;\n\n    out = <span class=""hljs-string"">""""</span>;\n    len = array.<span class=""hljs-property"">length</span>;\n    i = <span class=""hljs-number"">0</span>;\n    <span class=""hljs-keyword"">while</span>(i &lt; len) {\n    c = array[i++];\n    <span class=""hljs-keyword"">switch</span>(c &gt;&gt; <span class=""hljs-number"">4</span>)\n    { \n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">0</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">1</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">2</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">3</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">4</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">5</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">6</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">7</span>:\n        <span class=""hljs-comment"">// 0xxxxxxx</span>\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(c);\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">12</span>: <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">13</span>:\n        <span class=""hljs-comment"">// 110x xxxx   10xx xxxx</span>\n        char2 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x1F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) | (char2 &amp; <span class=""hljs-number"">0x3F</span>));\n        <span class=""hljs-keyword"">break</span>;\n      <span class=""hljs-keyword"">case</span> <span class=""hljs-number"">14</span>:\n        <span class=""hljs-comment"">// 1110 xxxx  10xx xxxx  10xx xxxx</span>\n        char2 = array[i++];\n        char3 = array[i++];\n        out += <span class=""hljs-title class_"">String</span>.<span class=""hljs-title function_"">fromCharCode</span>(((c &amp; <span class=""hljs-number"">0x0F</span>) &lt;&lt; <span class=""hljs-number"">12</span>) |\n                       ((char2 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">6</span>) |\n                       ((char3 &amp; <span class=""hljs-number"">0x3F</span>) &lt;&lt; <span class=""hljs-number"">0</span>));\n        <span class=""hljs-keyword"">break</span>;\n    }\n    }\n\n    <span class=""hljs-keyword"">return</span> out;\n}\n</code></pre>\n\n<p>It\'s somewhat cleaner as the other solutions because it doesn\'t use any hacks nor depends on Browser JS functions, e.g. works also in other JS environments.</p>\n\n<p>Check out the <a href=""http://jsfiddle.net/3VuLx/2/"" rel=""noreferrer"">JSFiddle demo</a>.</p>\n\n<p>Also see the related questions: <a href=""https://stackoverflow.com/questions/17191945/conversion-between-utf-8-arraybuffer-and-string/22373135"">here</a> and <a href=""https://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript/22373061"">here</a></p>\n    ',)","2014-05-26 13:25:11Z, License: CC BY-SA 3.0","('52',)","('103324395',)","Why cases 8, 9, 10 and 11 are excluded? Any particular reason? And case 15 is also possible, right? 15(1111) will denote 4 bytes are used, isn't it?","('\n                \n                <span class=""comment-copy"">Why cases 8, 9, 10 and 11 are excluded? Any particular reason? And case 15 is also possible, right? 15(1111) will denote 4 bytes are used, isn\'t it?</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/6048928/rar"" title=""2,985 reputation"" class=""comment-user"">RaR</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment103324395_22373197"" aria-label=""Link to comment""><span title=""2019-10-22 05:38:05Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Oct 22, 2019 at 5:38</span></a></span>\n            ',)","Oct 22, 2019 at 5:38","('2',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
218,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,19102224.0,"Here's what I use:
var str = String.fromCharCode.apply(null, uint8Arr);","('\n<p>Here\'s what I use:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> str = <span class=""hljs-title class_"">String</span>.<span class=""hljs-property"">fromCharCode</span>.<span class=""hljs-title function_"">apply</span>(<span class=""hljs-literal"">null</span>, uint8Arr);\n</code></pre>\n    ',)","2014-03-13 08:06:48Z, License: CC BY-SA 3.0","('45',)",,,,,,answer,8936984,Uint8Array to string in Javascript,62,52,81
219,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,19102224.0,"Here's what I use:
var str = String.fromCharCode.apply(null, uint8Arr);","('\n<p>Here\'s what I use:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> str = <span class=""hljs-title class_"">String</span>.<span class=""hljs-property"">fromCharCode</span>.<span class=""hljs-title function_"">apply</span>(<span class=""hljs-literal"">null</span>, uint8Arr);\n</code></pre>\n    ',)","2014-03-13 08:06:48Z, License: CC BY-SA 3.0","('45',)","('34008523',)","From the doc, this does not seem to decode UTF8.","('\n                \n                <span class=""comment-copy"">From the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode"" rel=""nofollow noreferrer"">doc</a>, this does not seem to decode UTF8.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/133374/albert"" title=""64,568 reputation"" class=""comment-user"">Albert</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment34008523_19102224"" aria-label=""Link to comment""><span title=""2014-03-13 08:06:48Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Mar 13, 2014 at 8:06</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Mar 13, 2014 at 8:06","('9',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
220,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,19102224.0,"Here's what I use:
var str = String.fromCharCode.apply(null, uint8Arr);","('\n<p>Here\'s what I use:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> str = <span class=""hljs-title class_"">String</span>.<span class=""hljs-property"">fromCharCode</span>.<span class=""hljs-title function_"">apply</span>(<span class=""hljs-literal"">null</span>, uint8Arr);\n</code></pre>\n    ',)","2014-03-13 08:06:48Z, License: CC BY-SA 3.0","('45',)","('34544257',)","This will throw RangeError on bigger texts. ""Maximum call stack size exceeded""","('\n                \n                <span class=""comment-copy"">This will throw <code>RangeError</code> on bigger texts. <i>""Maximum call stack size exceeded""</i></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/754174/redsandro"" title=""10,940 reputation"" class=""comment-user"">Redsandro</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment34544257_19102224"" aria-label=""Link to comment""><span title=""2014-03-27 00:18:49Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Mar 27, 2014 at 0:18</span></a></span>\n            ',)","Mar 27, 2014 at 0:18","('45',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
221,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,19102224.0,"Here's what I use:
var str = String.fromCharCode.apply(null, uint8Arr);","('\n<p>Here\'s what I use:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> str = <span class=""hljs-title class_"">String</span>.<span class=""hljs-property"">fromCharCode</span>.<span class=""hljs-title function_"">apply</span>(<span class=""hljs-literal"">null</span>, uint8Arr);\n</code></pre>\n    ',)","2014-03-13 08:06:48Z, License: CC BY-SA 3.0","('45',)","('41961651',)","If you are converting large Uint8Arrays to binary strings and are getting RangeError, see the Uint8ToString function from stackoverflow.com/a/12713326/471341.","('\n                \n                <span class=""comment-copy"">If you are converting large Uint8Arrays to binary strings and are getting RangeError, see the Uint8ToString function from <a href=""http://stackoverflow.com/a/12713326/471341"">stackoverflow.com/a/12713326/471341</a>.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/471341/yonran"" title=""17,916 reputation"" class=""comment-user"">yonran</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment41961651_19102224"" aria-label=""Link to comment""><span title=""2014-10-31 18:46:09Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Oct 31, 2014 at 18:46</span></a></span>\n                        <span title=""this comment was edited 4 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Oct 31, 2014 at 18:46","('1',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
222,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,19102224.0,"Here's what I use:
var str = String.fromCharCode.apply(null, uint8Arr);","('\n<p>Here\'s what I use:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> str = <span class=""hljs-title class_"">String</span>.<span class=""hljs-property"">fromCharCode</span>.<span class=""hljs-title function_"">apply</span>(<span class=""hljs-literal"">null</span>, uint8Arr);\n</code></pre>\n    ',)","2014-03-13 08:06:48Z, License: CC BY-SA 3.0","('45',)","('42882057',)","IE 11 throws SCRIPT28: Out of stack space when I feed it 300+k chars, or RangeError for Chrome 39. Firefox 33 is ok. 100+k runs ok with all three.","('\n                \n                <span class=""comment-copy"">IE 11 throws <code>SCRIPT28: Out of stack space</code> when I feed it 300+k chars, or <code>RangeError</code> for Chrome 39.  Firefox 33 is ok.  100+k runs ok with all three.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/893578/sheepy"" title=""17,144 reputation"" class=""comment-user"">Sheepy</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment42882057_19102224"" aria-label=""Link to comment""><span title=""2014-11-29 04:30:17Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Nov 29, 2014 at 4:30</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Nov 29, 2014 at 4:30","('1',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
223,8936984,https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript,Uint8Array to string in Javascript,"
                
<p>I have some UTF-8 encoded data living in a range of Uint8Array elements in Javascript. Is there an efficient way to decode these out to a regular javascript string (I believe Javascript uses 16 bit Unicode)? I dont want to add one character at the time as the string concaternation would become to CPU intensive. </p>
    ","('2012-01-20 05:07:22Z',)","('245',)",,,,,,19102224.0,"Here's what I use:
var str = String.fromCharCode.apply(null, uint8Arr);","('\n<p>Here\'s what I use:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> str = <span class=""hljs-title class_"">String</span>.<span class=""hljs-property"">fromCharCode</span>.<span class=""hljs-title function_"">apply</span>(<span class=""hljs-literal"">null</span>, uint8Arr);\n</code></pre>\n    ',)","2014-03-13 08:06:48Z, License: CC BY-SA 3.0","('45',)","('61457209',)","This does not produce the correct result from the example unicode characters on en.wikipedia.org/wiki/UTF-8. e.g. String.fromCharCode.apply(null, new Uint8Array([0xc2, 0xa2])) does not produce ¢.","('\n                \n                <span class=""comment-copy"">This does not produce the correct result from the example unicode characters on <a href=""https://en.wikipedia.org/wiki/UTF-8"" rel=""nofollow noreferrer"">en.wikipedia.org/wiki/UTF-8</a>. e.g. String.fromCharCode.apply(null, new Uint8Array([0xc2, 0xa2])) does not produce ¢.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/331858/vincent-scheib"" title=""16,754 reputation"" class=""comment-user"">Vincent Scheib</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment61457209_19102224"" aria-label=""Link to comment""><span title=""2016-04-30 00:27:31Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Apr 30, 2016 at 0:27</span></a></span>\n                        <span title=""this comment was edited 1 time"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","Apr 30, 2016 at 0:27","('1',)",answer_comment,8936984,Uint8Array to string in Javascript,62,52,81
224,5914020,https://stackoverflow.com/questions/5914020/javascript-date-to-string,javascript date to string,"
                
<p>Here is what I need to do. </p>

<p>Get Date, convert to string and pass it over to a third party utility. 
The response from the library will have date in string format as I passed it. So, I need to convert the date to string like 20110506105524 (YYYYMMDDHHMMSS)</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">printDate</span>(<span class=""hljs-params""></span>) {
    <span class=""hljs-keyword"">var</span> temp = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Date</span>();
    <span class=""hljs-keyword"">var</span> dateStr = temp.<span class=""hljs-title function_"">getFullYear</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getMonth</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getDate</span>().<span class=""hljs-title function_"">toString</span>() +
                  temp.<span class=""hljs-title function_"">getHours</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getMinutes</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getSeconds</span>().<span class=""hljs-title function_"">toString</span>();

    debug (dateStr );
}
</code></pre>

<p>The problem with above is that for months 1-9, it prints one digit. How can I change it to print exactly 2 digits for month, date ...</p>
    ","('2011-05-06 16:04:59Z',)","('60',)",,,,,,,,,,,,,,,,post,5914020,javascript date to string,52,51,89
225,5914020,https://stackoverflow.com/questions/5914020/javascript-date-to-string,javascript date to string,"
                
<p>Here is what I need to do. </p>

<p>Get Date, convert to string and pass it over to a third party utility. 
The response from the library will have date in string format as I passed it. So, I need to convert the date to string like 20110506105524 (YYYYMMDDHHMMSS)</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">printDate</span>(<span class=""hljs-params""></span>) {
    <span class=""hljs-keyword"">var</span> temp = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Date</span>();
    <span class=""hljs-keyword"">var</span> dateStr = temp.<span class=""hljs-title function_"">getFullYear</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getMonth</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getDate</span>().<span class=""hljs-title function_"">toString</span>() +
                  temp.<span class=""hljs-title function_"">getHours</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getMinutes</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getSeconds</span>().<span class=""hljs-title function_"">toString</span>();

    debug (dateStr );
}
</code></pre>

<p>The problem with above is that for months 1-9, it prints one digit. How can I change it to print exactly 2 digits for month, date ...</p>
    ","('2011-05-06 16:04:59Z',)","('60',)",comment-6809418,1.0,Liv,"have you looked at this previous one: <a href=""http://stackoverflow.com/questions/610406/javascript-printf-string-format"" title=""javascript printf string format"">stackoverflow.com/questions/610406/…</a>","2011-05-06 16:07:24Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,5914020,javascript date to string,52,51,89
226,5914020,https://stackoverflow.com/questions/5914020/javascript-date-to-string,javascript date to string,"
                
<p>Here is what I need to do. </p>

<p>Get Date, convert to string and pass it over to a third party utility. 
The response from the library will have date in string format as I passed it. So, I need to convert the date to string like 20110506105524 (YYYYMMDDHHMMSS)</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">printDate</span>(<span class=""hljs-params""></span>) {
    <span class=""hljs-keyword"">var</span> temp = <span class=""hljs-keyword"">new</span> <span class=""hljs-title class_"">Date</span>();
    <span class=""hljs-keyword"">var</span> dateStr = temp.<span class=""hljs-title function_"">getFullYear</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getMonth</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getDate</span>().<span class=""hljs-title function_"">toString</span>() +
                  temp.<span class=""hljs-title function_"">getHours</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getMinutes</span>().<span class=""hljs-title function_"">toString</span>() + 
                  temp.<span class=""hljs-title function_"">getSeconds</span>().<span class=""hljs-title function_"">toString</span>();

    debug (dateStr );
}
</code></pre>

<p>The problem with above is that for months 1-9, it prints one digit. How can I change it to print exactly 2 digits for month, date ...</p>
    ","('2011-05-06 16:04:59Z',)","('60',)",comment-19250671,1.0,Nate Barr,"For reference, here is a definitive source: <a href=""https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date"" rel=""nofollow noreferrer"">Javascript Date Object</a>","2012-12-19 16:41:25Z, License: CC BY-SA 3.0",,,,,,,,,,,post_comment,5914020,javascript date to string,52,51,89
227,8900652,https://stackoverflow.com/questions/8900652/what-does-do-in-javascript,What does % do in JavaScript?,"
                
<p>What does the % do in JavaScript?</p>

<p>A definition of what it is and what it does would be much appreciated.</p>
    ","('2012-01-17 19:39:25Z',)","('48',)",,,,,,,,,,,,,,,,post,8900652,What does % do in JavaScript?,59,48,82
228,8900652,https://stackoverflow.com/questions/8900652/what-does-do-in-javascript,What does % do in JavaScript?,"
                
<p>What does the % do in JavaScript?</p>

<p>A definition of what it is and what it does would be much appreciated.</p>
    ","('2012-01-17 19:39:25Z',)","('48',)",,,,,,8900665.0,"It's a modulo operator. See this documentation or the specification for more information on JavaScript arithmetic operators.
% (Modulus)
The modulus operator is used as follows:
var1 % var2
The modulus operator returns the first operand modulo the second operand, that is, var1 modulo var2, in the preceding statement, where var1 and var2 are variables. The modulo function is the integer remainder of dividing var1 by var2. For example, 12 % 5 returns 2. The result will have the same sign as var1; that is, −1 % 2 returns −1.","('\n<p>It\'s a <strong><a href=""http://en.wikipedia.org/wiki/Modulo_operation"" rel=""noreferrer"">modulo operator</a></strong>. See this <strong><a href=""https://developer.mozilla.org/en/JavaScript/Reference/Operators/Arithmetic_Operators"" rel=""noreferrer"">documentation</a></strong> or <strong><a href=""http://www.ecma-international.org/ecma-262/6.0/index.html#sec-applying-the-mod-operator"" rel=""noreferrer"">the specification</a></strong> for more information on JavaScript arithmetic operators.</p>\n\n<blockquote>\n  <p><strong>% (Modulus)</strong></p>\n  \n  <p>The modulus operator is used as follows:</p>\n  \n  <p>var1 % var2</p>\n  \n  <p>The modulus operator returns the first operand modulo the second\n  operand, that is, var1 modulo var2, in the preceding statement, where\n  var1 and var2 are variables. The modulo function is the integer\n  remainder of dividing var1 by var2. For example, 12 % 5 returns 2. The\n  result will have the same sign as var1; that is, −1 % 2 returns −1.</p>\n</blockquote>\n    ',)","2017-05-12 08:25:32Z, License: CC BY-SA 3.0","('38',)",,,,,,answer,8900652,What does % do in JavaScript?,59,48,82
229,8900652,https://stackoverflow.com/questions/8900652/what-does-do-in-javascript,What does % do in JavaScript?,"
                
<p>What does the % do in JavaScript?</p>

<p>A definition of what it is and what it does would be much appreciated.</p>
    ","('2012-01-17 19:39:25Z',)","('48',)",,,,,,8900665.0,"It's a modulo operator. See this documentation or the specification for more information on JavaScript arithmetic operators.
% (Modulus)
The modulus operator is used as follows:
var1 % var2
The modulus operator returns the first operand modulo the second operand, that is, var1 modulo var2, in the preceding statement, where var1 and var2 are variables. The modulo function is the integer remainder of dividing var1 by var2. For example, 12 % 5 returns 2. The result will have the same sign as var1; that is, −1 % 2 returns −1.","('\n<p>It\'s a <strong><a href=""http://en.wikipedia.org/wiki/Modulo_operation"" rel=""noreferrer"">modulo operator</a></strong>. See this <strong><a href=""https://developer.mozilla.org/en/JavaScript/Reference/Operators/Arithmetic_Operators"" rel=""noreferrer"">documentation</a></strong> or <strong><a href=""http://www.ecma-international.org/ecma-262/6.0/index.html#sec-applying-the-mod-operator"" rel=""noreferrer"">the specification</a></strong> for more information on JavaScript arithmetic operators.</p>\n\n<blockquote>\n  <p><strong>% (Modulus)</strong></p>\n  \n  <p>The modulus operator is used as follows:</p>\n  \n  <p>var1 % var2</p>\n  \n  <p>The modulus operator returns the first operand modulo the second\n  operand, that is, var1 modulo var2, in the preceding statement, where\n  var1 and var2 are variables. The modulo function is the integer\n  remainder of dividing var1 by var2. For example, 12 % 5 returns 2. The\n  result will have the same sign as var1; that is, −1 % 2 returns −1.</p>\n</blockquote>\n    ',)","2017-05-12 08:25:32Z, License: CC BY-SA 3.0","('38',)","('74898138',)","If you expect operator to return an integer (Ex. for calendar calculations), One should truncate var1 and var2 to integers before applying the %-operator. Modolus is defined like that, and one could not use % as is. Ex: Get last Sunday in march 2017. 31 - (((((5 * 2017) / 4) + 4) % 7)) == 25.75 // Not a valid date 31 - (~~((((5 * 2017) / 4) + 4) % 7)) == 26 // Correct","('\n                \n                <span class=""comment-copy"">If you expect operator to return an integer (Ex. for calendar calculations),  One should truncate var1 and var2 to integers before applying the %-operator. Modolus is defined like that, and one could not use % as is.  Ex: Get last Sunday in march 2017.  <code>31 - (((((5 * 2017) / 4) + 4) % 7)) == 25.75 // Not a valid date 31 - (~~((((5 * 2017) / 4) + 4) % 7)) == 26 // Correct</code></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/1879574/jesper-jensen"" title=""805 reputation"" class=""comment-user"">Jesper Jensen</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment74898138_8900665"" aria-label=""Link to comment""><span title=""2017-05-12 08:25:32Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">May 12, 2017 at 8:25</span></a></span>\n                        <span title=""this comment was edited 2 times"">\n                            <svg aria-hidden=""true"" class=""va-text-bottom o50 svg-icon iconPencilSm"" width=""14"" height=""14"" viewBox=""0 0 14 14""><path d=""m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0ZM2 10.12l6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z""></path></svg>\n                        </span>\n            ',)","May 12, 2017 at 8:25","('1',)",answer_comment,8900652,What does % do in JavaScript?,59,48,82
230,8900652,https://stackoverflow.com/questions/8900652/what-does-do-in-javascript,What does % do in JavaScript?,"
                
<p>What does the % do in JavaScript?</p>

<p>A definition of what it is and what it does would be much appreciated.</p>
    ","('2012-01-17 19:39:25Z',)","('48',)",,,,,,8900665.0,"It's a modulo operator. See this documentation or the specification for more information on JavaScript arithmetic operators.
% (Modulus)
The modulus operator is used as follows:
var1 % var2
The modulus operator returns the first operand modulo the second operand, that is, var1 modulo var2, in the preceding statement, where var1 and var2 are variables. The modulo function is the integer remainder of dividing var1 by var2. For example, 12 % 5 returns 2. The result will have the same sign as var1; that is, −1 % 2 returns −1.","('\n<p>It\'s a <strong><a href=""http://en.wikipedia.org/wiki/Modulo_operation"" rel=""noreferrer"">modulo operator</a></strong>. See this <strong><a href=""https://developer.mozilla.org/en/JavaScript/Reference/Operators/Arithmetic_Operators"" rel=""noreferrer"">documentation</a></strong> or <strong><a href=""http://www.ecma-international.org/ecma-262/6.0/index.html#sec-applying-the-mod-operator"" rel=""noreferrer"">the specification</a></strong> for more information on JavaScript arithmetic operators.</p>\n\n<blockquote>\n  <p><strong>% (Modulus)</strong></p>\n  \n  <p>The modulus operator is used as follows:</p>\n  \n  <p>var1 % var2</p>\n  \n  <p>The modulus operator returns the first operand modulo the second\n  operand, that is, var1 modulo var2, in the preceding statement, where\n  var1 and var2 are variables. The modulo function is the integer\n  remainder of dividing var1 by var2. For example, 12 % 5 returns 2. The\n  result will have the same sign as var1; that is, −1 % 2 returns −1.</p>\n</blockquote>\n    ',)","2017-05-12 08:25:32Z, License: CC BY-SA 3.0","('38',)","('118290149',)",This answer is not quite correct. It's a remainder operator. They are not the same! developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/…,"('\n                \n                <span class=""comment-copy"">This answer is not quite correct. It\'s a remainder operator. They are not the same!   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder"" rel=""nofollow noreferrer"">developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/…</a></span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/2558778/jeroen"" title=""14,817 reputation"" class=""comment-user"">Jeroen</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment118290149_8900665"" aria-label=""Link to comment""><span title=""2021-04-02 12:50:37Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Apr 2, 2021 at 12:50</span></a></span>\n            ',)","Apr 2, 2021 at 12:50","('2',)",answer_comment,8900652,What does % do in JavaScript?,59,48,82
231,8900652,https://stackoverflow.com/questions/8900652/what-does-do-in-javascript,What does % do in JavaScript?,"
                
<p>What does the % do in JavaScript?</p>

<p>A definition of what it is and what it does would be much appreciated.</p>
    ","('2012-01-17 19:39:25Z',)","('48',)",,,,,,37005857.0,"ES6 Update:
As explained in other answers, it returns the remainder after dividing the dividend by divisor, however this is no longer modulo operator, this is remainder operator. the difference being that the modulo operator result would take the sign of the divisor, not the dividend.Quoted from MDN
The remainder operator returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend, not the divisor. It uses a built-in modulo function to produce the result, which is the integer remainder of dividing var1 by var2 — for example — var1 modulo var2. There is a proposal to get an actual modulo operator in a future version of ECMAScript, the difference being that the modulo operator result would take the sign of the divisor, not the dividend.
Example:
-10 % 3 // -1
10 % -3 // 1","('\n<p><strong>ES6 Update:</strong></p>\n\n<p>As explained in other answers, it returns the remainder after dividing the dividend by divisor, however this is no longer modulo operator, this is <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder_()""><strong>remainder operator.</strong></a> <em>the difference being that the modulo operator result would take the sign of the divisor, not the dividend.</em><sup>Quoted from <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder_()"">MDN</a></sup></p>\n\n<blockquote>\n  <p>The remainder operator returns the remainder left over when one operand is divided by a second operand. <strong>It always takes the sign of the dividend, not the divisor. It uses a built-in modulo function to produce the result, which is the integer remainder of dividing <code>var1</code> by <code>var2</code></strong> — for example — <code>var1 modulo var2</code>. <a href=""http://wiki.ecmascript.org/doku.php?id=strawman:modulo_operator"">There is a proposal to get an actual modulo operator in a future version of ECMAScript</a>, the difference being that the modulo operator result would take the sign of the divisor, not the dividend.</p>\n</blockquote>\n\n<p><strong>Example:</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">-<span class=""hljs-number"">10</span> % <span class=""hljs-number"">3</span> <span class=""hljs-comment"">// -1</span>\n<span class=""hljs-number"">10</span> % -<span class=""hljs-number"">3</span> <span class=""hljs-comment"">// 1</span>\n</code></pre>\n    ',)","2019-11-20 17:48:51Z, License: CC BY-SA 4.0","('29',)",,,,,,answer,8900652,What does % do in JavaScript?,59,48,82
232,8900652,https://stackoverflow.com/questions/8900652/what-does-do-in-javascript,What does % do in JavaScript?,"
                
<p>What does the % do in JavaScript?</p>

<p>A definition of what it is and what it does would be much appreciated.</p>
    ","('2012-01-17 19:39:25Z',)","('48',)",,,,,,37005857.0,"ES6 Update:
As explained in other answers, it returns the remainder after dividing the dividend by divisor, however this is no longer modulo operator, this is remainder operator. the difference being that the modulo operator result would take the sign of the divisor, not the dividend.Quoted from MDN
The remainder operator returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend, not the divisor. It uses a built-in modulo function to produce the result, which is the integer remainder of dividing var1 by var2 — for example — var1 modulo var2. There is a proposal to get an actual modulo operator in a future version of ECMAScript, the difference being that the modulo operator result would take the sign of the divisor, not the dividend.
Example:
-10 % 3 // -1
10 % -3 // 1","('\n<p><strong>ES6 Update:</strong></p>\n\n<p>As explained in other answers, it returns the remainder after dividing the dividend by divisor, however this is no longer modulo operator, this is <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder_()""><strong>remainder operator.</strong></a> <em>the difference being that the modulo operator result would take the sign of the divisor, not the dividend.</em><sup>Quoted from <a href=""https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder_()"">MDN</a></sup></p>\n\n<blockquote>\n  <p>The remainder operator returns the remainder left over when one operand is divided by a second operand. <strong>It always takes the sign of the dividend, not the divisor. It uses a built-in modulo function to produce the result, which is the integer remainder of dividing <code>var1</code> by <code>var2</code></strong> — for example — <code>var1 modulo var2</code>. <a href=""http://wiki.ecmascript.org/doku.php?id=strawman:modulo_operator"">There is a proposal to get an actual modulo operator in a future version of ECMAScript</a>, the difference being that the modulo operator result would take the sign of the divisor, not the dividend.</p>\n</blockquote>\n\n<p><strong>Example:</strong></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">-<span class=""hljs-number"">10</span> % <span class=""hljs-number"">3</span> <span class=""hljs-comment"">// -1</span>\n<span class=""hljs-number"">10</span> % -<span class=""hljs-number"">3</span> <span class=""hljs-comment"">// 1</span>\n</code></pre>\n    ',)","2019-11-20 17:48:51Z, License: CC BY-SA 4.0","('29',)","('104176158',)",this answer illustrates the major difference from a 'true' modulo operator and the current JavaScript remainder operator when used with dividend and divisors with DIFFERENT signs. This is a nuance that has the potential to cause bugs in your algorithms if not accounted for.,"('\n                \n                <span class=""comment-copy"">this answer illustrates the major difference from a \'true\' modulo operator and the current JavaScript remainder operator when used with dividend and divisors with DIFFERENT signs.  This is a nuance that has the potential to cause bugs in your algorithms if not accounted for.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/6129793/peter"" title=""2,718 reputation"" class=""comment-user"">Peter</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment104176158_37005857"" aria-label=""Link to comment""><span title=""2019-11-20 17:48:51Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Nov 20, 2019 at 17:48</span></a></span>\n            ',)","Nov 20, 2019 at 17:48","('3',)",answer_comment,8900652,What does % do in JavaScript?,59,48,82
233,3001866,https://stackoverflow.com/questions/3001866/call-the-id-in-javascript,Call the id in JavaScript,"
                
<p>I have a span like this:</p>
<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">&lt;span id=<span class=""hljs-string"">""selectedTests""</span> <span class=""hljs-keyword"">class</span>=<span class=""hljs-string"">""emrFG""</span>&gt;  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""lblSelectedTests""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:6;font-size:8pt;""</span>&gt;</span>Selections<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:190;font-size:8pt;""</span>&gt;</span>Tests<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""recordSet""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:19;height:112;width:444;""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span></span>
&lt;/span&gt;
</code></pre>
<p>The span shows some rows of data and I want to call those rows individually by using  <code>document.all</code> method.<br>
How would I do that?</p>
    ","('2010-06-08 22:43:21Z',)","('0',)",,,,,,,,,,,,,,,,post,3001866,Call the id in JavaScript,68,48,81
234,3001866,https://stackoverflow.com/questions/3001866/call-the-id-in-javascript,Call the id in JavaScript,"
                
<p>I have a span like this:</p>
<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">&lt;span id=<span class=""hljs-string"">""selectedTests""</span> <span class=""hljs-keyword"">class</span>=<span class=""hljs-string"">""emrFG""</span>&gt;  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""lblSelectedTests""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:6;font-size:8pt;""</span>&gt;</span>Selections<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:190;font-size:8pt;""</span>&gt;</span>Tests<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""recordSet""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:19;height:112;width:444;""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span></span>
&lt;/span&gt;
</code></pre>
<p>The span shows some rows of data and I want to call those rows individually by using  <code>document.all</code> method.<br>
How would I do that?</p>
    ","('2010-06-08 22:43:21Z',)","('0',)",comment-3066613,,Asim Zaidi,"&lt;span. id=""selectedTests"" class=""emrFG""&gt; 			&lt;span. id=""lblSelectedTests"" class=""emrHDR"" style=""top:3;left:6;font-size:8pt;""&gt;Selections&lt;/span&gt; 			 &lt;span class=""emrHDR"" style=""top:3;left:190;font-size:8pt;""&gt;Tests&lt;/span&gt; 			&lt;div id=""recordSet"" style=""top:19;height:112;width:444;""&gt;&lt;/div&gt;","2010-06-08 22:44:11Z, License: CC BY-SA 2.5",,,,,,,,,,,post_comment,3001866,Call the id in JavaScript,68,48,81
235,3001866,https://stackoverflow.com/questions/3001866/call-the-id-in-javascript,Call the id in JavaScript,"
                
<p>I have a span like this:</p>
<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">&lt;span id=<span class=""hljs-string"">""selectedTests""</span> <span class=""hljs-keyword"">class</span>=<span class=""hljs-string"">""emrFG""</span>&gt;  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""lblSelectedTests""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:6;font-size:8pt;""</span>&gt;</span>Selections<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:190;font-size:8pt;""</span>&gt;</span>Tests<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""recordSet""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:19;height:112;width:444;""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span></span>
&lt;/span&gt;
</code></pre>
<p>The span shows some rows of data and I want to call those rows individually by using  <code>document.all</code> method.<br>
How would I do that?</p>
    ","('2010-06-08 22:43:21Z',)","('0',)",comment-3066636,,Marcel Korpel,"@user: Have a look at <a href=""http://meta.stackexchange.com/questions/22186/how-do-i-format-my-code-blocks"">How do I format my code blocks?</a>.","2010-06-08 22:47:10Z, License: CC BY-SA 2.5",,,,,,,,,,,post_comment,3001866,Call the id in JavaScript,68,48,81
236,3001866,https://stackoverflow.com/questions/3001866/call-the-id-in-javascript,Call the id in JavaScript,"
                
<p>I have a span like this:</p>
<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">&lt;span id=<span class=""hljs-string"">""selectedTests""</span> <span class=""hljs-keyword"">class</span>=<span class=""hljs-string"">""emrFG""</span>&gt;  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""lblSelectedTests""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:6;font-size:8pt;""</span>&gt;</span>Selections<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:190;font-size:8pt;""</span>&gt;</span>Tests<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""recordSet""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:19;height:112;width:444;""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span></span>
&lt;/span&gt;
</code></pre>
<p>The span shows some rows of data and I want to call those rows individually by using  <code>document.all</code> method.<br>
How would I do that?</p>
    ","('2010-06-08 22:43:21Z',)","('0',)",comment-3066683,,Marcel Korpel,"Your CSS (within <code>style</code> attributes) is malformed: you have to use a <a href=""http://www.w3.org/TR/CSS21/syndata.html#value-def-length"" rel=""nofollow noreferrer"">unit identifier (e.g., px, em, etc.)</a> when defining <code>top</code>, <code>left</code>, <code>height</code> and <code>width</code>. Your HTML is malformed, too: <code>&lt;span&gt;</code> elements can only contain inline elements. <code>&lt;div&gt;</code> is a block-level element. See <a href=""http://www.w3.org/TR/html401/struct/global.html#h-7.5.3"" rel=""nofollow noreferrer"">w3.org/TR/html401/struct/global.html#h-7.5.3</a>","2010-06-08 22:55:28Z, License: CC BY-SA 2.5",,,,,,,,,,,post_comment,3001866,Call the id in JavaScript,68,48,81
237,3001866,https://stackoverflow.com/questions/3001866/call-the-id-in-javascript,Call the id in JavaScript,"
                
<p>I have a span like this:</p>
<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">&lt;span id=<span class=""hljs-string"">""selectedTests""</span> <span class=""hljs-keyword"">class</span>=<span class=""hljs-string"">""emrFG""</span>&gt;  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""lblSelectedTests""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:6;font-size:8pt;""</span>&gt;</span>Selections<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:190;font-size:8pt;""</span>&gt;</span>Tests<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""recordSet""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:19;height:112;width:444;""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span></span>
&lt;/span&gt;
</code></pre>
<p>The span shows some rows of data and I want to call those rows individually by using  <code>document.all</code> method.<br>
How would I do that?</p>
    ","('2010-06-08 22:43:21Z',)","('0',)",,,,,,3001901.0,"document.all is very old, see my answer to another question. Use document.getElementById instead.
Example:
var theElement = document.getElementById(""lblSelectedTests"");","('\n<p><code>document.all</code> is <strong>very</strong> old, see <a href=""https://stackoverflow.com/questions/2408424/document-all-vs-document-getelementbyid/2408436#2408436"">my answer to another question</a>. Use <code>document.getElementById</code> instead.</p>\n\n<p>Example:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> theElement = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""lblSelectedTests""</span>);\n</code></pre>\n    ',)","2010-06-08 23:21:21Z, License: CC BY-SA 2.5","('1',)",,,,,,answer,3001866,Call the id in JavaScript,68,48,81
238,3001866,https://stackoverflow.com/questions/3001866/call-the-id-in-javascript,Call the id in JavaScript,"
                
<p>I have a span like this:</p>
<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">&lt;span id=<span class=""hljs-string"">""selectedTests""</span> <span class=""hljs-keyword"">class</span>=<span class=""hljs-string"">""emrFG""</span>&gt;  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""lblSelectedTests""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:6;font-size:8pt;""</span>&gt;</span>Selections<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:190;font-size:8pt;""</span>&gt;</span>Tests<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""recordSet""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:19;height:112;width:444;""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span></span>
&lt;/span&gt;
</code></pre>
<p>The span shows some rows of data and I want to call those rows individually by using  <code>document.all</code> method.<br>
How would I do that?</p>
    ","('2010-06-08 22:43:21Z',)","('0',)",,,,,,3001901.0,"document.all is very old, see my answer to another question. Use document.getElementById instead.
Example:
var theElement = document.getElementById(""lblSelectedTests"");","('\n<p><code>document.all</code> is <strong>very</strong> old, see <a href=""https://stackoverflow.com/questions/2408424/document-all-vs-document-getelementbyid/2408436#2408436"">my answer to another question</a>. Use <code>document.getElementById</code> instead.</p>\n\n<p>Example:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> theElement = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""lblSelectedTests""</span>);\n</code></pre>\n    ',)","2010-06-08 23:21:21Z, License: CC BY-SA 2.5","('1',)","('3066812',)","if I do above var alert(document.getElementById(""lblSelectedTests"")); it says in alert [Object]","('\n                \n                <span class=""comment-copy"">if I do above var alert(document.getElementById(""lblSelectedTests""));     it says in alert [Object]</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/295189/asim-zaidi"" title=""26,676 reputation"" class=""comment-user owner"">Asim Zaidi</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment3066812_3001901"" aria-label=""Link to comment""><span title=""2010-06-08 23:21:21Z, License: CC BY-SA 2.5"" class=""relativetime-clean"">Jun 8, 2010 at 23:21</span></a></span>\n            ',)","Jun 8, 2010 at 23:21","('',)",answer_comment,3001866,Call the id in JavaScript,68,48,81
239,3001866,https://stackoverflow.com/questions/3001866/call-the-id-in-javascript,Call the id in JavaScript,"
                
<p>I have a span like this:</p>
<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">&lt;span id=<span class=""hljs-string"">""selectedTests""</span> <span class=""hljs-keyword"">class</span>=<span class=""hljs-string"">""emrFG""</span>&gt;  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""lblSelectedTests""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:6;font-size:8pt;""</span>&gt;</span>Selections<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">span</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""emrHDR""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:3;left:190;font-size:8pt;""</span>&gt;</span>Tests<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">span</span>&gt;</span></span>  
  <span class=""language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""recordSet""</span> <span class=""hljs-attr"">style</span>=<span class=""hljs-string"">""top:19;height:112;width:444;""</span>&gt;</span><span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span></span>
&lt;/span&gt;
</code></pre>
<p>The span shows some rows of data and I want to call those rows individually by using  <code>document.all</code> method.<br>
How would I do that?</p>
    ","('2010-06-08 22:43:21Z',)","('0',)",,,,,,3001901.0,"document.all is very old, see my answer to another question. Use document.getElementById instead.
Example:
var theElement = document.getElementById(""lblSelectedTests"");","('\n<p><code>document.all</code> is <strong>very</strong> old, see <a href=""https://stackoverflow.com/questions/2408424/document-all-vs-document-getelementbyid/2408436#2408436"">my answer to another question</a>. Use <code>document.getElementById</code> instead.</p>\n\n<p>Example:</p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-keyword"">var</span> theElement = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""lblSelectedTests""</span>);\n</code></pre>\n    ',)","2010-06-08 23:21:21Z, License: CC BY-SA 2.5","('1',)","('3066837',)","@user: Indeed, that's the intended behaviour. You can manipulate your elements this way.","('\n                \n                <span class=""comment-copy"">@user: Indeed, that\'s the intended behaviour. You can manipulate your elements this way.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/258127/marcel-korpel"" title=""21,496 reputation"" class=""comment-user"">Marcel Korpel</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment3066837_3001901"" aria-label=""Link to comment""><span title=""2010-06-08 23:25:40Z, License: CC BY-SA 2.5"" class=""relativetime-clean"">Jun 8, 2010 at 23:25</span></a></span>\n            ',)","Jun 8, 2010 at 23:25","('',)",answer_comment,3001866,Call the id in JavaScript,68,48,81
240,74497558,https://stackoverflow.com/questions/74497558/alert-in-javascript,Alert in Javascript,"
                
<p>On my order site, I have 2 options: pick up and delivery.</p>
<p>When choosing pick up, nothing happens, but when choosing delivery, the delivery address will appear for the user to fill in.</p>
<p>I want to use JS to notify you that you need to enter your shipping address <em>only I you tick the delivery box</em>.</p>
<p>Thank you.</p>
<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">/*Notify when information is invalid.*/</span>
<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">validate</span>(<span class=""hljs-params""></span>) {
  <span class=""hljs-keyword"">var</span> pickup = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""pickup""</span>).<span class=""hljs-property"">checked</span>;
  <span class=""hljs-keyword"">var</span> delivery = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""delivery""</span>).<span class=""hljs-property"">checked</span>;
  <span class=""hljs-keyword"">var</span> deladd = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""delivery_address""</span>).<span class=""hljs-property"">value</span>;
  <span class=""hljs-keyword"">var</span> biladd = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""billing_address""</span>).<span class=""hljs-property"">value</span>;

  <span class=""hljs-keyword"">if</span> ((pickup == <span class=""hljs-string"">""""</span>) &amp;&amp; (delivery == <span class=""hljs-string"">""""</span>)) {
    errMsg += <span class=""hljs-string"">""Select an option. \\n""</span>;
  }
  <span class=""hljs-keyword"">if</span> ((deladd == <span class=""hljs-literal"">false</span>) &amp;&amp; (deladd == <span class=""hljs-string"">""""</span>)) {
    errMsg += <span class=""hljs-string"">""Delivery address can not be empty.\\n""</span>;

    <span class=""hljs-keyword"">if</span> (errMsg != <span class=""hljs-string"">""""</span>) {
      <span class=""hljs-title function_"">alert</span>(errMsg);
      result = <span class=""hljs-literal"">false</span>;
    }

    <span class=""hljs-keyword"">return</span> result;
  }

  <span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">init</span>(<span class=""hljs-params""></span>) {
    <span class=""hljs-keyword"">var</span> regForm = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""form""</span>);
    regForm.<span class=""hljs-property"">onsubmit</span> = validate;
  }
  <span class=""hljs-variable language_"">window</span>.<span class=""hljs-property"">onload</span> = init;</code></pre>
<pre class=""snippet-code-html lang-html s-code-block""><code class=""hljs language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""box""</span>&gt;</span>Select an option:
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""pickup""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""option""</span> <span class=""hljs-attr"">value</span>=<span class=""hljs-string"">""pickup""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">onclick</span>=<span class=""hljs-string"">""hideAddress()""</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">label</span> <span class=""hljs-attr"">for</span>=<span class=""hljs-string"">""pickup""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""check""</span>&gt;</span>Pick Up<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">label</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""delivery""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""option""</span> <span class=""hljs-attr"">value</span>=<span class=""hljs-string"">""delivery""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">onclick</span>=<span class=""hljs-string"">""showAddress()""</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">label</span> <span class=""hljs-attr"">for</span>=<span class=""hljs-string"">""delivery""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""check""</span>&gt;</span>Delivery<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">label</span>&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span><span class=""hljs-tag"">&lt;<span class=""hljs-name"">br</span>&gt;</span>

<span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""show""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""show""</span>&gt;</span>

  <span class=""hljs-comment"">&lt;!--Delivery address.--&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""text""</span> <span class=""hljs-attr"">placeholder</span>=<span class=""hljs-string"">""delivery address:""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""box""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""delivery_address""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""delivery_address""</span>&gt;</span>

  <span class=""hljs-comment"">&lt;!--Check the same as the delivery address or not.--&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">label</span> <span class=""hljs-attr"">for</span>=<span class=""hljs-string"">""checkbox""</span>&gt;</span> billing address same as delivery address<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">label</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""checkbox""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""same_address""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""same_adsress_or_not""</span> <span class=""hljs-attr"">value</span>=<span class=""hljs-string"">""same_adress""</span> <span class=""hljs-attr"">onclick</span>=<span class=""hljs-string"">""autoFill()""</span>&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span></code></pre>
<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>
</div>
<p></p>
    ","('2022-11-19 04:29:33Z',)","('0',)",,,,,,,,,,,,,,,,post,74497558,Alert in Javascript,79,40,81
241,74497558,https://stackoverflow.com/questions/74497558/alert-in-javascript,Alert in Javascript,"
                
<p>On my order site, I have 2 options: pick up and delivery.</p>
<p>When choosing pick up, nothing happens, but when choosing delivery, the delivery address will appear for the user to fill in.</p>
<p>I want to use JS to notify you that you need to enter your shipping address <em>only I you tick the delivery box</em>.</p>
<p>Thank you.</p>
<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">/*Notify when information is invalid.*/</span>
<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">validate</span>(<span class=""hljs-params""></span>) {
  <span class=""hljs-keyword"">var</span> pickup = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""pickup""</span>).<span class=""hljs-property"">checked</span>;
  <span class=""hljs-keyword"">var</span> delivery = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""delivery""</span>).<span class=""hljs-property"">checked</span>;
  <span class=""hljs-keyword"">var</span> deladd = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""delivery_address""</span>).<span class=""hljs-property"">value</span>;
  <span class=""hljs-keyword"">var</span> biladd = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""billing_address""</span>).<span class=""hljs-property"">value</span>;

  <span class=""hljs-keyword"">if</span> ((pickup == <span class=""hljs-string"">""""</span>) &amp;&amp; (delivery == <span class=""hljs-string"">""""</span>)) {
    errMsg += <span class=""hljs-string"">""Select an option. \\n""</span>;
  }
  <span class=""hljs-keyword"">if</span> ((deladd == <span class=""hljs-literal"">false</span>) &amp;&amp; (deladd == <span class=""hljs-string"">""""</span>)) {
    errMsg += <span class=""hljs-string"">""Delivery address can not be empty.\\n""</span>;

    <span class=""hljs-keyword"">if</span> (errMsg != <span class=""hljs-string"">""""</span>) {
      <span class=""hljs-title function_"">alert</span>(errMsg);
      result = <span class=""hljs-literal"">false</span>;
    }

    <span class=""hljs-keyword"">return</span> result;
  }

  <span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">init</span>(<span class=""hljs-params""></span>) {
    <span class=""hljs-keyword"">var</span> regForm = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""form""</span>);
    regForm.<span class=""hljs-property"">onsubmit</span> = validate;
  }
  <span class=""hljs-variable language_"">window</span>.<span class=""hljs-property"">onload</span> = init;</code></pre>
<pre class=""snippet-code-html lang-html s-code-block""><code class=""hljs language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""box""</span>&gt;</span>Select an option:
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""pickup""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""option""</span> <span class=""hljs-attr"">value</span>=<span class=""hljs-string"">""pickup""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">onclick</span>=<span class=""hljs-string"">""hideAddress()""</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">label</span> <span class=""hljs-attr"">for</span>=<span class=""hljs-string"">""pickup""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""check""</span>&gt;</span>Pick Up<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">label</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""delivery""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""option""</span> <span class=""hljs-attr"">value</span>=<span class=""hljs-string"">""delivery""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">onclick</span>=<span class=""hljs-string"">""showAddress()""</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">label</span> <span class=""hljs-attr"">for</span>=<span class=""hljs-string"">""delivery""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""check""</span>&gt;</span>Delivery<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">label</span>&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span><span class=""hljs-tag"">&lt;<span class=""hljs-name"">br</span>&gt;</span>

<span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""show""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""show""</span>&gt;</span>

  <span class=""hljs-comment"">&lt;!--Delivery address.--&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""text""</span> <span class=""hljs-attr"">placeholder</span>=<span class=""hljs-string"">""delivery address:""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""box""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""delivery_address""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""delivery_address""</span>&gt;</span>

  <span class=""hljs-comment"">&lt;!--Check the same as the delivery address or not.--&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">label</span> <span class=""hljs-attr"">for</span>=<span class=""hljs-string"">""checkbox""</span>&gt;</span> billing address same as delivery address<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">label</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""checkbox""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""same_address""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""same_adsress_or_not""</span> <span class=""hljs-attr"">value</span>=<span class=""hljs-string"">""same_adress""</span> <span class=""hljs-attr"">onclick</span>=<span class=""hljs-string"">""autoFill()""</span>&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span></code></pre>
<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>
</div>
<p></p>
    ","('2022-11-19 04:29:33Z',)","('0',)",comment-131507516,3.0,Dai,<code>window.onload = init;</code> &lt;-- Don't do this. Use <code>addEventListener</code> instead.,"2022-11-19 04:30:23Z, License: CC BY-SA 4.0",,,,,,,,,,,post_comment,74497558,Alert in Javascript,79,40,81
242,74497558,https://stackoverflow.com/questions/74497558/alert-in-javascript,Alert in Javascript,"
                
<p>On my order site, I have 2 options: pick up and delivery.</p>
<p>When choosing pick up, nothing happens, but when choosing delivery, the delivery address will appear for the user to fill in.</p>
<p>I want to use JS to notify you that you need to enter your shipping address <em>only I you tick the delivery box</em>.</p>
<p>Thank you.</p>
<p></p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">/*Notify when information is invalid.*/</span>
<span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">validate</span>(<span class=""hljs-params""></span>) {
  <span class=""hljs-keyword"">var</span> pickup = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""pickup""</span>).<span class=""hljs-property"">checked</span>;
  <span class=""hljs-keyword"">var</span> delivery = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""delivery""</span>).<span class=""hljs-property"">checked</span>;
  <span class=""hljs-keyword"">var</span> deladd = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""delivery_address""</span>).<span class=""hljs-property"">value</span>;
  <span class=""hljs-keyword"">var</span> biladd = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""billing_address""</span>).<span class=""hljs-property"">value</span>;

  <span class=""hljs-keyword"">if</span> ((pickup == <span class=""hljs-string"">""""</span>) &amp;&amp; (delivery == <span class=""hljs-string"">""""</span>)) {
    errMsg += <span class=""hljs-string"">""Select an option. \\n""</span>;
  }
  <span class=""hljs-keyword"">if</span> ((deladd == <span class=""hljs-literal"">false</span>) &amp;&amp; (deladd == <span class=""hljs-string"">""""</span>)) {
    errMsg += <span class=""hljs-string"">""Delivery address can not be empty.\\n""</span>;

    <span class=""hljs-keyword"">if</span> (errMsg != <span class=""hljs-string"">""""</span>) {
      <span class=""hljs-title function_"">alert</span>(errMsg);
      result = <span class=""hljs-literal"">false</span>;
    }

    <span class=""hljs-keyword"">return</span> result;
  }

  <span class=""hljs-keyword"">function</span> <span class=""hljs-title function_"">init</span>(<span class=""hljs-params""></span>) {
    <span class=""hljs-keyword"">var</span> regForm = <span class=""hljs-variable language_"">document</span>.<span class=""hljs-title function_"">getElementById</span>(<span class=""hljs-string"">""form""</span>);
    regForm.<span class=""hljs-property"">onsubmit</span> = validate;
  }
  <span class=""hljs-variable language_"">window</span>.<span class=""hljs-property"">onload</span> = init;</code></pre>
<pre class=""snippet-code-html lang-html s-code-block""><code class=""hljs language-xml""><span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""box""</span>&gt;</span>Select an option:
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""pickup""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""option""</span> <span class=""hljs-attr"">value</span>=<span class=""hljs-string"">""pickup""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">onclick</span>=<span class=""hljs-string"">""hideAddress()""</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">label</span> <span class=""hljs-attr"">for</span>=<span class=""hljs-string"">""pickup""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""check""</span>&gt;</span>Pick Up<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">label</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""delivery""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""option""</span> <span class=""hljs-attr"">value</span>=<span class=""hljs-string"">""delivery""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""radio""</span> <span class=""hljs-attr"">onclick</span>=<span class=""hljs-string"">""showAddress()""</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">label</span> <span class=""hljs-attr"">for</span>=<span class=""hljs-string"">""delivery""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""check""</span>&gt;</span>Delivery<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">label</span>&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span><span class=""hljs-tag"">&lt;<span class=""hljs-name"">br</span>&gt;</span>

<span class=""hljs-tag"">&lt;<span class=""hljs-name"">div</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""show""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""show""</span>&gt;</span>

  <span class=""hljs-comment"">&lt;!--Delivery address.--&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""text""</span> <span class=""hljs-attr"">placeholder</span>=<span class=""hljs-string"">""delivery address:""</span> <span class=""hljs-attr"">class</span>=<span class=""hljs-string"">""box""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""delivery_address""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""delivery_address""</span>&gt;</span>

  <span class=""hljs-comment"">&lt;!--Check the same as the delivery address or not.--&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">label</span> <span class=""hljs-attr"">for</span>=<span class=""hljs-string"">""checkbox""</span>&gt;</span> billing address same as delivery address<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">label</span>&gt;</span>
  <span class=""hljs-tag"">&lt;<span class=""hljs-name"">input</span> <span class=""hljs-attr"">type</span>=<span class=""hljs-string"">""checkbox""</span> <span class=""hljs-attr"">id</span>=<span class=""hljs-string"">""same_address""</span> <span class=""hljs-attr"">name</span>=<span class=""hljs-string"">""same_adsress_or_not""</span> <span class=""hljs-attr"">value</span>=<span class=""hljs-string"">""same_adress""</span> <span class=""hljs-attr"">onclick</span>=<span class=""hljs-string"">""autoFill()""</span>&gt;</span>
<span class=""hljs-tag"">&lt;/<span class=""hljs-name"">div</span>&gt;</span></code></pre>
<div class=""snippet-result""><div class=""snippet-ctas""><button type=""button"" class=""s-btn s-btn__primary""><span class=""icon-play-white _hover""></span><span> Run code snippet</span></button><input class=""copySnippet s-btn s-btn__filled"" type=""button"" value=""Copy snippet to answer"" style=""display: none;""><button type=""button"" class=""s-btn hideResults"" style=""display: none;"">Hide results</button><div class=""popout-code""><a class=""snippet-expand-link"">Expand snippet</a></div></div><div class=""snippet-result-code"" style=""display: none;""><iframe name=""sif1"" sandbox=""allow-forms allow-modals allow-scripts"" class=""snippet-box-edit snippet-box-result"" frameborder=""0""></iframe></div></div></div>
</div>
<p></p>
    ","('2022-11-19 04:29:33Z',)","('0',)",comment-131507612,,Sebastian Simon,"Note that there are <a href=""/q/14028959/4642212"">much better alternatives</a> to a <code>load</code> listener, like <code>type=""module""</code>, <code>defer</code>, or <code>DOMContentLoaded</code>.","2022-11-19 04:46:43Z, License: CC BY-SA 4.0",,,,,,,,,,,post_comment,74497558,Alert in Javascript,79,40,81
243,6815903,https://stackoverflow.com/questions/6815903/what-is-the-correct-way-of-code-comments-in-javascript,What is the correct way of code comments in JavaScript,"
                
<p>What is the correct way of code comments in Javascript - is the same syntax as in Java? And which tools actually would take advantage of these comments:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-comment"">/*
  * Add an element to the group
  * @param {Object}  overlayElement
  * @param {Object} [element2] optional element
  */</span> 
</code></pre>

<p>I found new Resharper 6 (I write JS in VisualStudio 2010) offers the same comments as in C#, but only within the functions body, something like <code>/// &lt;param name=""overlayElement""&gt;&lt;/param&gt;
</code>. The JS code comments are not highlighted as such by ReSharper.</p>

<p>What is the best way to go ...?</p>
    ","('2011-07-25 12:11:28Z',)","('12',)",,,,,,,,,,,,,,,,post,6815903,What is the correct way of code comments in JavaScript,59,70,81
244,6815903,https://stackoverflow.com/questions/6815903/what-is-the-correct-way-of-code-comments-in-javascript,What is the correct way of code comments in JavaScript,"
                
<p>What is the correct way of code comments in Javascript - is the same syntax as in Java? And which tools actually would take advantage of these comments:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-comment"">/*
  * Add an element to the group
  * @param {Object}  overlayElement
  * @param {Object} [element2] optional element
  */</span> 
</code></pre>

<p>I found new Resharper 6 (I write JS in VisualStudio 2010) offers the same comments as in C#, but only within the functions body, something like <code>/// &lt;param name=""overlayElement""&gt;&lt;/param&gt;
</code>. The JS code comments are not highlighted as such by ReSharper.</p>

<p>What is the best way to go ...?</p>
    ","('2011-07-25 12:11:28Z',)","('12',)",,,,,,6816057.0,"using // is better than /* */ because then you can use the latter to take out an entire block containing other comments. However, if you want to use an automatic documentation generation tool, you must use comments similar to javaDoc style.
This is an example that would work with YUI DOC (best one) https://yui.github.io/yuidoc/
/**
* This is a description
* @namespace My.Namespace
* @method myMethodName
* @param {String} some string
* @param {Object} some object
* @return {bool} some bool
*/","('\n<p>using <code>//</code> is better than <code>/* */</code> because then you can use the latter to take out an entire block containing other comments. However, if you want to use an automatic documentation generation tool, you must use comments similar to javaDoc style.</p>\n\n<p>This is an example that would work with YUI DOC (best one) <a href=""https://yui.github.io/yuidoc/"" rel=""nofollow noreferrer"">https://yui.github.io/yuidoc/</a></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">/**\n* This is a description\n* <span class=""hljs-doctag"">@namespace</span> My.Namespace\n* <span class=""hljs-doctag"">@method</span> <span class=""hljs-variable"">myMethodName</span>\n* <span class=""hljs-doctag"">@param</span> {<span class=""hljs-type"">String</span>} some string\n* <span class=""hljs-doctag"">@param</span> {<span class=""hljs-type"">Object</span>} some object\n* <span class=""hljs-doctag"">@return</span> {<span class=""hljs-type"">bool</span>} some bool\n*/</span>\n</code></pre>\n    ',)","2011-07-26 10:41:32Z, License: CC BY-SA 3.0","('17',)",,,,,,answer,6815903,What is the correct way of code comments in JavaScript,59,70,81
245,6815903,https://stackoverflow.com/questions/6815903/what-is-the-correct-way-of-code-comments-in-javascript,What is the correct way of code comments in JavaScript,"
                
<p>What is the correct way of code comments in Javascript - is the same syntax as in Java? And which tools actually would take advantage of these comments:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-comment"">/*
  * Add an element to the group
  * @param {Object}  overlayElement
  * @param {Object} [element2] optional element
  */</span> 
</code></pre>

<p>I found new Resharper 6 (I write JS in VisualStudio 2010) offers the same comments as in C#, but only within the functions body, something like <code>/// &lt;param name=""overlayElement""&gt;&lt;/param&gt;
</code>. The JS code comments are not highlighted as such by ReSharper.</p>

<p>What is the best way to go ...?</p>
    ","('2011-07-25 12:11:28Z',)","('12',)",,,,,,6816057.0,"using // is better than /* */ because then you can use the latter to take out an entire block containing other comments. However, if you want to use an automatic documentation generation tool, you must use comments similar to javaDoc style.
This is an example that would work with YUI DOC (best one) https://yui.github.io/yuidoc/
/**
* This is a description
* @namespace My.Namespace
* @method myMethodName
* @param {String} some string
* @param {Object} some object
* @return {bool} some bool
*/","('\n<p>using <code>//</code> is better than <code>/* */</code> because then you can use the latter to take out an entire block containing other comments. However, if you want to use an automatic documentation generation tool, you must use comments similar to javaDoc style.</p>\n\n<p>This is an example that would work with YUI DOC (best one) <a href=""https://yui.github.io/yuidoc/"" rel=""nofollow noreferrer"">https://yui.github.io/yuidoc/</a></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">/**\n* This is a description\n* <span class=""hljs-doctag"">@namespace</span> My.Namespace\n* <span class=""hljs-doctag"">@method</span> <span class=""hljs-variable"">myMethodName</span>\n* <span class=""hljs-doctag"">@param</span> {<span class=""hljs-type"">String</span>} some string\n* <span class=""hljs-doctag"">@param</span> {<span class=""hljs-type"">Object</span>} some object\n* <span class=""hljs-doctag"">@return</span> {<span class=""hljs-type"">bool</span>} some bool\n*/</span>\n</code></pre>\n    ',)","2011-07-26 10:41:32Z, License: CC BY-SA 3.0","('17',)","('8113981',)","So it is similar to javadoc, good to know. Thanks, to all who have helped.","('\n                \n                <span class=""comment-copy"">So it is similar to javadoc, good to know. Thanks, to all who have helped.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/356726/horst-walter"" title=""13,583 reputation"" class=""comment-user owner"">Horst Walter</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment8113981_6816057"" aria-label=""Link to comment""><span title=""2011-07-26 10:41:32Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jul 26, 2011 at 10:41</span></a></span>\n            ',)","Jul 26, 2011 at 10:41","('',)",answer_comment,6815903,What is the correct way of code comments in JavaScript,59,70,81
246,6815903,https://stackoverflow.com/questions/6815903/what-is-the-correct-way-of-code-comments-in-javascript,What is the correct way of code comments in JavaScript,"
                
<p>What is the correct way of code comments in Javascript - is the same syntax as in Java? And which tools actually would take advantage of these comments:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-comment"">/*
  * Add an element to the group
  * @param {Object}  overlayElement
  * @param {Object} [element2] optional element
  */</span> 
</code></pre>

<p>I found new Resharper 6 (I write JS in VisualStudio 2010) offers the same comments as in C#, but only within the functions body, something like <code>/// &lt;param name=""overlayElement""&gt;&lt;/param&gt;
</code>. The JS code comments are not highlighted as such by ReSharper.</p>

<p>What is the best way to go ...?</p>
    ","('2011-07-25 12:11:28Z',)","('12',)",,,,,,6816057.0,"using // is better than /* */ because then you can use the latter to take out an entire block containing other comments. However, if you want to use an automatic documentation generation tool, you must use comments similar to javaDoc style.
This is an example that would work with YUI DOC (best one) https://yui.github.io/yuidoc/
/**
* This is a description
* @namespace My.Namespace
* @method myMethodName
* @param {String} some string
* @param {Object} some object
* @return {bool} some bool
*/","('\n<p>using <code>//</code> is better than <code>/* */</code> because then you can use the latter to take out an entire block containing other comments. However, if you want to use an automatic documentation generation tool, you must use comments similar to javaDoc style.</p>\n\n<p>This is an example that would work with YUI DOC (best one) <a href=""https://yui.github.io/yuidoc/"" rel=""nofollow noreferrer"">https://yui.github.io/yuidoc/</a></p>\n\n<pre class=""lang-js s-code-block""><code class=""hljs language-javascript""><span class=""hljs-comment"">/**\n* This is a description\n* <span class=""hljs-doctag"">@namespace</span> My.Namespace\n* <span class=""hljs-doctag"">@method</span> <span class=""hljs-variable"">myMethodName</span>\n* <span class=""hljs-doctag"">@param</span> {<span class=""hljs-type"">String</span>} some string\n* <span class=""hljs-doctag"">@param</span> {<span class=""hljs-type"">Object</span>} some object\n* <span class=""hljs-doctag"">@return</span> {<span class=""hljs-type"">bool</span>} some bool\n*/</span>\n</code></pre>\n    ',)","2011-07-26 10:41:32Z, License: CC BY-SA 3.0","('17',)","('103529212',)",Your code editor should allow you to mark the text and take it out with // in each line (e.g. Ctrl + /). It will comment out everything no matter what was there.,"('\n                \n                <span class=""comment-copy"">Your code editor should allow you to mark the text and take it out with // in each line (e.g. Ctrl + /). It will comment out everything no matter what was there.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/4925661/maciej-krawczyk"" title=""14,328 reputation"" class=""comment-user"">Maciej Krawczyk</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment103529212_6816057"" aria-label=""Link to comment""><span title=""2019-10-29 14:18:53Z, License: CC BY-SA 4.0"" class=""relativetime-clean"">Oct 29, 2019 at 14:18</span></a></span>\n            ',)","Oct 29, 2019 at 14:18","('',)",answer_comment,6815903,What is the correct way of code comments in JavaScript,59,70,81
247,6815903,https://stackoverflow.com/questions/6815903/what-is-the-correct-way-of-code-comments-in-javascript,What is the correct way of code comments in JavaScript,"
                
<p>What is the correct way of code comments in Javascript - is the same syntax as in Java? And which tools actually would take advantage of these comments:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-comment"">/*
  * Add an element to the group
  * @param {Object}  overlayElement
  * @param {Object} [element2] optional element
  */</span> 
</code></pre>

<p>I found new Resharper 6 (I write JS in VisualStudio 2010) offers the same comments as in C#, but only within the functions body, something like <code>/// &lt;param name=""overlayElement""&gt;&lt;/param&gt;
</code>. The JS code comments are not highlighted as such by ReSharper.</p>

<p>What is the best way to go ...?</p>
    ","('2011-07-25 12:11:28Z',)","('12',)",,,,,,6815943.0,"good practice is to use // instead of /* */
The reason for that is because if you have */ in any part of the comment (assuming you do not intend to end yet), it would end the comment. This happens even if */ is in a string. i.e. ""*/"" <--- this would end the comment and would likely to give you a syntax error.
note // ends at a line break so you would need // for every line of comment.","('\n<p>good practice is to use <code>//</code> instead of <code>/* */</code></p>\n\n<p>The reason for that is because if you have <code>*/</code> in any part of the comment (assuming you do not intend to end yet), it would end the comment. This happens even if <code>*/</code> is in a string. i.e. <code>""*/""</code> &lt;--- this would end the comment and would likely to give you a syntax error.</p>\n\n<p>note <code>//</code> ends at a line break so you would need <code>//</code> for every line of comment.</p>\n    ',)","2011-07-25 12:27:46Z, License: CC BY-SA 3.0","('7',)",,,,,,answer,6815903,What is the correct way of code comments in JavaScript,59,70,81
248,6815903,https://stackoverflow.com/questions/6815903/what-is-the-correct-way-of-code-comments-in-javascript,What is the correct way of code comments in JavaScript,"
                
<p>What is the correct way of code comments in Javascript - is the same syntax as in Java? And which tools actually would take advantage of these comments:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-comment"">/*
  * Add an element to the group
  * @param {Object}  overlayElement
  * @param {Object} [element2] optional element
  */</span> 
</code></pre>

<p>I found new Resharper 6 (I write JS in VisualStudio 2010) offers the same comments as in C#, but only within the functions body, something like <code>/// &lt;param name=""overlayElement""&gt;&lt;/param&gt;
</code>. The JS code comments are not highlighted as such by ReSharper.</p>

<p>What is the best way to go ...?</p>
    ","('2011-07-25 12:11:28Z',)","('12',)",,,,,,6815943.0,"good practice is to use // instead of /* */
The reason for that is because if you have */ in any part of the comment (assuming you do not intend to end yet), it would end the comment. This happens even if */ is in a string. i.e. ""*/"" <--- this would end the comment and would likely to give you a syntax error.
note // ends at a line break so you would need // for every line of comment.","('\n<p>good practice is to use <code>//</code> instead of <code>/* */</code></p>\n\n<p>The reason for that is because if you have <code>*/</code> in any part of the comment (assuming you do not intend to end yet), it would end the comment. This happens even if <code>*/</code> is in a string. i.e. <code>""*/""</code> &lt;--- this would end the comment and would likely to give you a syntax error.</p>\n\n<p>note <code>//</code> ends at a line break so you would need <code>//</code> for every line of comment.</p>\n    ',)","2011-07-25 12:27:46Z, License: CC BY-SA 3.0","('7',)","('8096026',)","Note: Ctrl-K, Ctrl-C and Ctrl-K, Ctrl-U are handy shortcuts for commenting and uncommenting code.","('\n                \n                <span class=""comment-copy"">Note:  Ctrl-K, Ctrl-C and Ctrl-K, Ctrl-U are handy shortcuts for commenting and uncommenting code.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/479869/steve-wellens"" title=""20,428 reputation"" class=""comment-user"">Steve Wellens</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment8096026_6815943"" aria-label=""Link to comment""><span title=""2011-07-25 12:27:46Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Jul 25, 2011 at 12:27</span></a></span>\n            ',)","Jul 25, 2011 at 12:27","('2',)",answer_comment,6815903,What is the correct way of code comments in JavaScript,59,70,81
249,6815903,https://stackoverflow.com/questions/6815903/what-is-the-correct-way-of-code-comments-in-javascript,What is the correct way of code comments in JavaScript,"
                
<p>What is the correct way of code comments in Javascript - is the same syntax as in Java? And which tools actually would take advantage of these comments:</p>

<pre class=""lang-js s-code-block""><code class=""hljs language-javascript"">  <span class=""hljs-comment"">/*
  * Add an element to the group
  * @param {Object}  overlayElement
  * @param {Object} [element2] optional element
  */</span> 
</code></pre>

<p>I found new Resharper 6 (I write JS in VisualStudio 2010) offers the same comments as in C#, but only within the functions body, something like <code>/// &lt;param name=""overlayElement""&gt;&lt;/param&gt;
</code>. The JS code comments are not highlighted as such by ReSharper.</p>

<p>What is the best way to go ...?</p>
    ","('2011-07-25 12:11:28Z',)","('12',)",,,,,,6815943.0,"good practice is to use // instead of /* */
The reason for that is because if you have */ in any part of the comment (assuming you do not intend to end yet), it would end the comment. This happens even if */ is in a string. i.e. ""*/"" <--- this would end the comment and would likely to give you a syntax error.
note // ends at a line break so you would need // for every line of comment.","('\n<p>good practice is to use <code>//</code> instead of <code>/* */</code></p>\n\n<p>The reason for that is because if you have <code>*/</code> in any part of the comment (assuming you do not intend to end yet), it would end the comment. This happens even if <code>*/</code> is in a string. i.e. <code>""*/""</code> &lt;--- this would end the comment and would likely to give you a syntax error.</p>\n\n<p>note <code>//</code> ends at a line break so you would need <code>//</code> for every line of comment.</p>\n    ',)","2011-07-25 12:27:46Z, License: CC BY-SA 3.0","('7',)","('58249605',)",I disagree and prefer /* */ always.. minifiers.. and many reasons it always comes in handy.,"('\n                \n                <span class=""comment-copy"">I disagree and prefer <code>/* */</code> always.. minifiers.. and many reasons it always comes in handy.</span>\n                \n                <div class=""d-inline-flex ai-center"">\n–&nbsp;<a href=""/users/596952/theblackbenzkid"" title=""26,104 reputation"" class=""comment-user"">TheBlackBenzKid</a>\n                </div>\n                <span class=""comment-date"" dir=""ltr""><a class=""comment-link"" href=""#comment58249605_6815943"" aria-label=""Link to comment""><span title=""2016-02-08 12:04:28Z, License: CC BY-SA 3.0"" class=""relativetime-clean"">Feb 8, 2016 at 12:04</span></a></span>\n            ',)","Feb 8, 2016 at 12:04","('',)",answer_comment,6815903,What is the correct way of code comments in JavaScript,59,70,81
